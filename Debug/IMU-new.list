
IMU-new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005cf8  08005cf8  00015cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de0  08005de0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08005de0  08005de0  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005de0  08005de0  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de0  08005de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005de4  08005de4  00015de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08005de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  200000a0  08005e88  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08005e88  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b943  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022db  00000000  00000000  0002ba0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0002dce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002e8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180c0  00000000  00000000  0002f3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e014  00000000  00000000  00047470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000879cd  00000000  00000000  00055484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dce51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003684  00000000  00000000  000dcea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005cdc 	.word	0x08005cdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	08005cdc 	.word	0x08005cdc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <MPU6050_Init>:
uint8_t MPU6050_rx_buf[6];
uint8_t MPU6050_tx;
//float MPU6050_Gyro_LSB = 32.8;
//float MPU6050_Acc_LSB = 4096.0;

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af04      	add	r7, sp, #16
 8000a52:	6078      	str	r0, [r7, #4]
//	default:
//		break;
//	}

// Read Who am I
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &MPU6050_rx, 1, 100);
 8000a54:	2364      	movs	r3, #100	; 0x64
 8000a56:	9302      	str	r3, [sp, #8]
 8000a58:	2301      	movs	r3, #1
 8000a5a:	9301      	str	r3, [sp, #4]
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MPU6050_Init+0x60>)
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2301      	movs	r3, #1
 8000a62:	2275      	movs	r2, #117	; 0x75
 8000a64:	21d0      	movs	r1, #208	; 0xd0
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f002 f982 	bl	8002d70 <HAL_I2C_Mem_Read>
	MPU6050_tx = 0; //Will return this value if code ends here
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MPU6050_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]

	// 0x68 will be returned if sensor accessed correctly
	if (MPU6050_rx == 0x68) {
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MPU6050_Init+0x60>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b68      	cmp	r3, #104	; 0x68
 8000a78:	d113      	bne.n	8000aa2 <MPU6050_Init+0x56>
		MPU6050_tx = 0;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <MPU6050_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &MPU6050_tx, 1,
 8000a80:	2364      	movs	r3, #100	; 0x64
 8000a82:	9302      	str	r3, [sp, #8]
 8000a84:	2301      	movs	r3, #1
 8000a86:	9301      	str	r3, [sp, #4]
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MPU6050_Init+0x64>)
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	226b      	movs	r2, #107	; 0x6b
 8000a90:	21d0      	movs	r1, #208	; 0xd0
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f002 f872 	bl	8002b7c <HAL_I2C_Mem_Write>
				100);
		HAL_Delay(10);
 8000a98:	200a      	movs	r0, #10
 8000a9a:	f001 fbe5 	bl	8002268 <HAL_Delay>
//		MPU6050_tx = Acc_FS << 3;
//		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &MPU6050_tx,
//				1, 100);
//		HAL_Delay(10);

		return 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e000      	b.n	8000aa4 <MPU6050_Init+0x58>
	}
	return 1;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200000bc 	.word	0x200000bc
 8000ab0:	200000c6 	.word	0x200000c6

08000ab4 <MPU6050_Bypass>:

void MPU6050_Bypass(I2C_HandleTypeDef *I2Cx) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af04      	add	r7, sp, #16
 8000aba:	6078      	str	r0, [r7, #4]
	MPU6050_tx = 0b00000000; //
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MPU6050_Bypass+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x6A, 1, &MPU6050_tx, 1, 100); //Master Disable
 8000ac2:	2364      	movs	r3, #100	; 0x64
 8000ac4:	9302      	str	r3, [sp, #8]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MPU6050_Bypass+0x58>)
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	226a      	movs	r2, #106	; 0x6a
 8000ad2:	21d0      	movs	r1, #208	; 0xd0
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f002 f851 	bl	8002b7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000ada:	200a      	movs	r0, #10
 8000adc:	f001 fbc4 	bl	8002268 <HAL_Delay>

	MPU6050_tx = 0b00000010; //
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <MPU6050_Bypass+0x58>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x37, 1, &MPU6050_tx, 1, 100); //Bypass Enable
 8000ae6:	2364      	movs	r3, #100	; 0x64
 8000ae8:	9302      	str	r3, [sp, #8]
 8000aea:	2301      	movs	r3, #1
 8000aec:	9301      	str	r3, [sp, #4]
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <MPU6050_Bypass+0x58>)
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2301      	movs	r3, #1
 8000af4:	2237      	movs	r2, #55	; 0x37
 8000af6:	21d0      	movs	r1, #208	; 0xd0
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f002 f83f 	bl	8002b7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000afe:	200a      	movs	r0, #10
 8000b00:	f001 fbb2 	bl	8002268 <HAL_Delay>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200000c6 	.word	0x200000c6

08000b10 <MPU6050_Master>:

void MPU6050_Master(I2C_HandleTypeDef *I2Cx) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af04      	add	r7, sp, #16
 8000b16:	6078      	str	r0, [r7, #4]
	MPU6050_tx = 0x00; //
 8000b18:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <MPU6050_Master+0xa0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x37, 1, &MPU6050_tx, 1, 100); //Disable Bypass
 8000b1e:	2364      	movs	r3, #100	; 0x64
 8000b20:	9302      	str	r3, [sp, #8]
 8000b22:	2301      	movs	r3, #1
 8000b24:	9301      	str	r3, [sp, #4]
 8000b26:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <MPU6050_Master+0xa0>)
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	2237      	movs	r2, #55	; 0x37
 8000b2e:	21d0      	movs	r1, #208	; 0xd0
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f002 f823 	bl	8002b7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b36:	200a      	movs	r0, #10
 8000b38:	f001 fb96 	bl	8002268 <HAL_Delay>

	MPU6050_tx = 0b00100010; //
 8000b3c:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MPU6050_Master+0xa0>)
 8000b3e:	2222      	movs	r2, #34	; 0x22
 8000b40:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x6A, 1, &MPU6050_tx, 1, 100); //Master Enable
 8000b42:	2364      	movs	r3, #100	; 0x64
 8000b44:	9302      	str	r3, [sp, #8]
 8000b46:	2301      	movs	r3, #1
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MPU6050_Master+0xa0>)
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	226a      	movs	r2, #106	; 0x6a
 8000b52:	21d0      	movs	r1, #208	; 0xd0
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f002 f811 	bl	8002b7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b5a:	200a      	movs	r0, #10
 8000b5c:	f001 fb84 	bl	8002268 <HAL_Delay>

	MPU6050_tx = 0b00001101; //
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MPU6050_Master+0xa0>)
 8000b62:	220d      	movs	r2, #13
 8000b64:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x24, 1, &MPU6050_tx, 1, 100); //Master Clock to 400kHz
 8000b66:	2364      	movs	r3, #100	; 0x64
 8000b68:	9302      	str	r3, [sp, #8]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <MPU6050_Master+0xa0>)
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2301      	movs	r3, #1
 8000b74:	2224      	movs	r2, #36	; 0x24
 8000b76:	21d0      	movs	r1, #208	; 0xd0
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f001 ffff 	bl	8002b7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b7e:	200a      	movs	r0, #10
 8000b80:	f001 fb72 	bl	8002268 <HAL_Delay>

	MPU6050_tx = 0x00;
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <MPU6050_Master+0xa0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &MPU6050_tx, 1,
 8000b8a:	2364      	movs	r3, #100	; 0x64
 8000b8c:	9302      	str	r3, [sp, #8]
 8000b8e:	2301      	movs	r3, #1
 8000b90:	9301      	str	r3, [sp, #4]
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <MPU6050_Master+0xa0>)
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	2301      	movs	r3, #1
 8000b98:	226b      	movs	r2, #107	; 0x6b
 8000b9a:	21d0      	movs	r1, #208	; 0xd0
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f001 ffed 	bl	8002b7c <HAL_I2C_Mem_Write>
			100);
	HAL_Delay(10);
 8000ba2:	200a      	movs	r0, #10
 8000ba4:	f001 fb60 	bl	8002268 <HAL_Delay>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200000c6 	.word	0x200000c6

08000bb4 <HMC5883L_Setup>:

void HMC5883L_Setup(I2C_HandleTypeDef *I2Cx) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af04      	add	r7, sp, #16
 8000bba:	6078      	str	r0, [r7, #4]
	MPU6050_tx = 0b00011000; //Fill Slave0 DO
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <HMC5883L_Setup+0x7c>)
 8000bbe:	2218      	movs	r2, #24
 8000bc0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDRESS << 1, 0x00, 1, &MPU6050_tx, 1,
 8000bc2:	2364      	movs	r3, #100	; 0x64
 8000bc4:	9302      	str	r3, [sp, #8]
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HMC5883L_Setup+0x7c>)
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2301      	movs	r3, #1
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	213c      	movs	r1, #60	; 0x3c
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f001 ffd1 	bl	8002b7c <HAL_I2C_Mem_Write>
			100);
	HAL_Delay(10);
 8000bda:	200a      	movs	r0, #10
 8000bdc:	f001 fb44 	bl	8002268 <HAL_Delay>

	MPU6050_tx = 0b00100000; //Fill Slave0 DO
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <HMC5883L_Setup+0x7c>)
 8000be2:	2220      	movs	r2, #32
 8000be4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDRESS << 1, 0x01, 1, &MPU6050_tx, 1,
 8000be6:	2364      	movs	r3, #100	; 0x64
 8000be8:	9302      	str	r3, [sp, #8]
 8000bea:	2301      	movs	r3, #1
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <HMC5883L_Setup+0x7c>)
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	213c      	movs	r1, #60	; 0x3c
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f001 ffbf 	bl	8002b7c <HAL_I2C_Mem_Write>
			100);
	HAL_Delay(10);
 8000bfe:	200a      	movs	r0, #10
 8000c00:	f001 fb32 	bl	8002268 <HAL_Delay>

	MPU6050_tx = 0x00;
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HMC5883L_Setup+0x7c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDRESS << 1, 0x02, 1, &MPU6050_tx, 1,
 8000c0a:	2364      	movs	r3, #100	; 0x64
 8000c0c:	9302      	str	r3, [sp, #8]
 8000c0e:	2301      	movs	r3, #1
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <HMC5883L_Setup+0x7c>)
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2301      	movs	r3, #1
 8000c18:	2202      	movs	r2, #2
 8000c1a:	213c      	movs	r1, #60	; 0x3c
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f001 ffad 	bl	8002b7c <HAL_I2C_Mem_Write>
			100); //Mode: Continuous
	HAL_Delay(10);
 8000c22:	200a      	movs	r0, #10
 8000c24:	f001 fb20 	bl	8002268 <HAL_Delay>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200000c6 	.word	0x200000c6

08000c34 <MPU6050_Slave_Read>:

void MPU6050_Slave_Read(I2C_HandleTypeDef *I2Cx) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af04      	add	r7, sp, #16
 8000c3a:	6078      	str	r0, [r7, #4]
	MPU6050_tx = HMC5883L_ADDRESS | 0x80; //Access Slave into read mode
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <MPU6050_Slave_Read+0x7c>)
 8000c3e:	229e      	movs	r2, #158	; 0x9e
 8000c40:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x25, 1, &MPU6050_tx, 1, 100);
 8000c42:	2364      	movs	r3, #100	; 0x64
 8000c44:	9302      	str	r3, [sp, #8]
 8000c46:	2301      	movs	r3, #1
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MPU6050_Slave_Read+0x7c>)
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	2225      	movs	r2, #37	; 0x25
 8000c52:	21d0      	movs	r1, #208	; 0xd0
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f001 ff91 	bl	8002b7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c5a:	200a      	movs	r0, #10
 8000c5c:	f001 fb04 	bl	8002268 <HAL_Delay>

	MPU6050_tx = 0x03; //Slave REG for reading to take place
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <MPU6050_Slave_Read+0x7c>)
 8000c62:	2203      	movs	r2, #3
 8000c64:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x26, 1, &MPU6050_tx, 1, 100);
 8000c66:	2364      	movs	r3, #100	; 0x64
 8000c68:	9302      	str	r3, [sp, #8]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <MPU6050_Slave_Read+0x7c>)
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2301      	movs	r3, #1
 8000c74:	2226      	movs	r2, #38	; 0x26
 8000c76:	21d0      	movs	r1, #208	; 0xd0
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f001 ff7f 	bl	8002b7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c7e:	200a      	movs	r0, #10
 8000c80:	f001 faf2 	bl	8002268 <HAL_Delay>

	MPU6050_tx = 0x80 | 0x06; //Number of data bytes
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <MPU6050_Slave_Read+0x7c>)
 8000c86:	2286      	movs	r2, #134	; 0x86
 8000c88:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x27, 1, &MPU6050_tx, 1, 100);
 8000c8a:	2364      	movs	r3, #100	; 0x64
 8000c8c:	9302      	str	r3, [sp, #8]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	9301      	str	r3, [sp, #4]
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <MPU6050_Slave_Read+0x7c>)
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	2301      	movs	r3, #1
 8000c98:	2227      	movs	r2, #39	; 0x27
 8000c9a:	21d0      	movs	r1, #208	; 0xd0
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f001 ff6d 	bl	8002b7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000ca2:	200a      	movs	r0, #10
 8000ca4:	f001 fae0 	bl	8002268 <HAL_Delay>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000c6 	.word	0x200000c6

08000cb4 <MPU6050_Read_All>:
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, INT_STATUS_REG, 1, &MPU6050_rx, 1,
			100);
	return MPU6050_rx;
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af04      	add	r7, sp, #16
 8000cba:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, EXT_SENS_DATA_00, 1, MPU6050_rx_buf,
 8000cbc:	2364      	movs	r3, #100	; 0x64
 8000cbe:	9302      	str	r3, [sp, #8]
 8000cc0:	2306      	movs	r3, #6
 8000cc2:	9301      	str	r3, [sp, #4]
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <MPU6050_Read_All+0x28>)
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	2301      	movs	r3, #1
 8000cca:	2249      	movs	r2, #73	; 0x49
 8000ccc:	21d0      	movs	r1, #208	; 0xd0
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f002 f84e 	bl	8002d70 <HAL_I2C_Mem_Read>
			6, 100);
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200000c0 	.word	0x200000c0

08000ce0 <MPU6050_Parsing_NoOffest>:
//	DataStruct->Ax = DataStruct->Accel_X_RAW / MPU6050_Acc_LSB;
//	DataStruct->Ay = DataStruct->Accel_Y_RAW / MPU6050_Acc_LSB;
//	DataStruct->Az = DataStruct->Accel_Z_RAW / MPU6050_Acc_LSB;
//}

uint16_t MPU6050_Parsing_NoOffest(MPU6050_t *DataStruct) {
 8000ce0:	b5b0      	push	{r4, r5, r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
//	// Didn't Save Temp Value
//	DataStruct->Gyro_X_RAW = (MPU6050_rx_buf[8] << 8 | MPU6050_rx_buf[9]);
//	DataStruct->Gyro_Y_RAW = -(MPU6050_rx_buf[10] << 8 | MPU6050_rx_buf[11]);
//	DataStruct->Gyro_Z_RAW = -(MPU6050_rx_buf[12] << 8 | MPU6050_rx_buf[13]);

	DataStruct->Mag_X_RAW = (MPU6050_rx_buf[0] << 8 | MPU6050_rx_buf[1]);
 8000ce8:	4b47      	ldr	r3, [pc, #284]	; (8000e08 <MPU6050_Parsing_NoOffest+0x128>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	021b      	lsls	r3, r3, #8
 8000cee:	b21a      	sxth	r2, r3
 8000cf0:	4b45      	ldr	r3, [pc, #276]	; (8000e08 <MPU6050_Parsing_NoOffest+0x128>)
 8000cf2:	785b      	ldrb	r3, [r3, #1]
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	b21a      	sxth	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	801a      	strh	r2, [r3, #0]
	DataStruct->Mag_Z_RAW = -(MPU6050_rx_buf[2] << 8 | MPU6050_rx_buf[3]);
 8000cfe:	4b42      	ldr	r3, [pc, #264]	; (8000e08 <MPU6050_Parsing_NoOffest+0x128>)
 8000d00:	789b      	ldrb	r3, [r3, #2]
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	b21a      	sxth	r2, r3
 8000d06:	4b40      	ldr	r3, [pc, #256]	; (8000e08 <MPU6050_Parsing_NoOffest+0x128>)
 8000d08:	78db      	ldrb	r3, [r3, #3]
 8000d0a:	b21b      	sxth	r3, r3
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	425b      	negs	r3, r3
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	809a      	strh	r2, [r3, #4]
	DataStruct->Mag_Y_RAW = -(MPU6050_rx_buf[4] << 8 | MPU6050_rx_buf[5]);
 8000d1c:	4b3a      	ldr	r3, [pc, #232]	; (8000e08 <MPU6050_Parsing_NoOffest+0x128>)
 8000d1e:	791b      	ldrb	r3, [r3, #4]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	4b38      	ldr	r3, [pc, #224]	; (8000e08 <MPU6050_Parsing_NoOffest+0x128>)
 8000d26:	795b      	ldrb	r3, [r3, #5]
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	425b      	negs	r3, r3
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	b21a      	sxth	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	805a      	strh	r2, [r3, #2]
//	DataStruct->Gy = DataStruct->Gyro_Y_RAW / MPU6050_Gyro_LSB * D2R;
//	DataStruct->Gz = DataStruct->Gyro_Z_RAW / MPU6050_Gyro_LSB * D2R;
//	DataStruct->Ax = DataStruct->Accel_X_RAW / MPU6050_Acc_LSB;
//	DataStruct->Ay = DataStruct->Accel_Y_RAW / MPU6050_Acc_LSB;
//	DataStruct->Az = DataStruct->Accel_Z_RAW / MPU6050_Acc_LSB;
	Heading = atan2((double) DataStruct->Mag_Y_RAW,
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fb5f 	bl	8000404 <__aeabi_i2d>
 8000d46:	4604      	mov	r4, r0
 8000d48:	460d      	mov	r5, r1
			(double) DataStruct->Mag_X_RAW);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
	Heading = atan2((double) DataStruct->Mag_Y_RAW,
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fb57 	bl	8000404 <__aeabi_i2d>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	4629      	mov	r1, r5
 8000d5e:	f004 fd57 	bl	8005810 <atan2>
 8000d62:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if (Heading > 2 * PI) /* Due to declination check for >360 degree */
 8000d66:	a324      	add	r3, pc, #144	; (adr r3, 8000df8 <MPU6050_Parsing_NoOffest+0x118>)
 8000d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d70:	f7ff fe42 	bl	80009f8 <__aeabi_dcmpgt>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00a      	beq.n	8000d90 <MPU6050_Parsing_NoOffest+0xb0>
		Heading = Heading - 2 * PI;
 8000d7a:	a31f      	add	r3, pc, #124	; (adr r3, 8000df8 <MPU6050_Parsing_NoOffest+0x118>)
 8000d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d84:	f7ff f9f0 	bl	8000168 <__aeabi_dsub>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (Heading < 0) /* Check for sign */
 8000d90:	f04f 0200 	mov.w	r2, #0
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d9c:	f7ff fe0e 	bl	80009bc <__aeabi_dcmplt>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00a      	beq.n	8000dbc <MPU6050_Parsing_NoOffest+0xdc>
		Heading = Heading + 2 * PI;
 8000da6:	a314      	add	r3, pc, #80	; (adr r3, 8000df8 <MPU6050_Parsing_NoOffest+0x118>)
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000db0:	f7ff f9dc 	bl	800016c <__adddf3>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (Heading * 180 / PI);
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MPU6050_Parsing_NoOffest+0x12c>)
 8000dc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dc6:	f7ff fb87 	bl	80004d8 <__aeabi_dmul>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4610      	mov	r0, r2
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	a30b      	add	r3, pc, #44	; (adr r3, 8000e00 <MPU6050_Parsing_NoOffest+0x120>)
 8000dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd8:	f7ff fca8 	bl	800072c <__aeabi_ddiv>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	f7ff fe12 	bl	8000a0c <__aeabi_d2uiz>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b29b      	uxth	r3, r3
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bdb0      	pop	{r4, r5, r7, pc}
 8000df4:	f3af 8000 	nop.w
 8000df8:	54442eea 	.word	0x54442eea
 8000dfc:	401921fb 	.word	0x401921fb
 8000e00:	54442eea 	.word	0x54442eea
 8000e04:	400921fb 	.word	0x400921fb
 8000e08:	200000c0 	.word	0x200000c0
 8000e0c:	40668000 	.word	0x40668000

08000e10 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e16:	f001 f9c5 	bl	80021a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1a:	f000 f86d 	bl	8000ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1e:	f000 f915 	bl	800104c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e22:	f000 f8dd 	bl	8000fe0 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000e26:	f000 f8ad 	bl	8000f84 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_t MPU6050;

  MPU6050_Init(&hi2c2);
 8000e2a:	482b      	ldr	r0, [pc, #172]	; (8000ed8 <main+0xc8>)
 8000e2c:	f7ff fe0e 	bl	8000a4c <MPU6050_Init>
  // sprintf(str, "Success");
  // else
  // sprintf(str, "Failed");
  // HAL_UART_Transmit(&huart1, str, sizeof(str), 100);
  // HAL_Delay(1000);
  MPU6050_Bypass(&hi2c2);
 8000e30:	4829      	ldr	r0, [pc, #164]	; (8000ed8 <main+0xc8>)
 8000e32:	f7ff fe3f 	bl	8000ab4 <MPU6050_Bypass>
  HMC5883L_Setup(&hi2c2);
 8000e36:	4828      	ldr	r0, [pc, #160]	; (8000ed8 <main+0xc8>)
 8000e38:	f7ff febc 	bl	8000bb4 <HMC5883L_Setup>
  MPU6050_Master(&hi2c2);
 8000e3c:	4826      	ldr	r0, [pc, #152]	; (8000ed8 <main+0xc8>)
 8000e3e:	f7ff fe67 	bl	8000b10 <MPU6050_Master>
  MPU6050_Slave_Read(&hi2c2);
 8000e42:	4825      	ldr	r0, [pc, #148]	; (8000ed8 <main+0xc8>)
 8000e44:	f7ff fef6 	bl	8000c34 <MPU6050_Slave_Read>
  static uint16_t heading;
  static uint8_t str[30];

  uint8_t socNum = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	77fb      	strb	r3, [r7, #31]

  uint8_t mac[] = {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef}; // Mac address
 8000e4c:	4a23      	ldr	r2, [pc, #140]	; (8000edc <main+0xcc>)
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e56:	6018      	str	r0, [r3, #0]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	8019      	strh	r1, [r3, #0]
  uint8_t ip[] = {192, 168, 1, 15};                     // IP address
 8000e5c:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <main+0xd0>)
 8000e5e:	60fb      	str	r3, [r7, #12]
  uint8_t sn[] = {255, 255, 255, 0};                    // Subnet mask
 8000e60:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000e64:	60bb      	str	r3, [r7, #8]
  uint8_t gw[] = {192, 168, 1, 1};                      // Gateway address
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <main+0xd4>)
 8000e68:	607b      	str	r3, [r7, #4]

  initializeW5500(mac, ip, sn, gw); // configures the MAC address, IP address, subnet mask and gateway of the device or node.
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	f107 0208 	add.w	r2, r7, #8
 8000e70:	f107 010c 	add.w	r1, r7, #12
 8000e74:	f107 0010 	add.w	r0, r7, #16
 8000e78:	f000 ff52 	bl	8001d20 <initializeW5500>

  uint8_t dstip[4] = {192, 168, 1, 4}; // destination ip address
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <main+0xd8>)
 8000e7e:	603b      	str	r3, [r7, #0]

  while (socket(socNum, Sn_MR_UDP, SRC_PORT, FLAG) != socNum)
 8000e80:	bf00      	nop
 8000e82:	7ff8      	ldrb	r0, [r7, #31]
 8000e84:	2300      	movs	r3, #0
 8000e86:	f241 7271 	movw	r2, #6001	; 0x1771
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	f000 f92e 	bl	80010ec <socket>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	7ffb      	ldrb	r3, [r7, #31]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d1f3      	bne.n	8000e82 <main+0x72>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MPU6050_Read_All(&hi2c2);
 8000e9a:	480f      	ldr	r0, [pc, #60]	; (8000ed8 <main+0xc8>)
 8000e9c:	f7ff ff0a 	bl	8000cb4 <MPU6050_Read_All>
    HAL_Delay(20);
 8000ea0:	2014      	movs	r0, #20
 8000ea2:	f001 f9e1 	bl	8002268 <HAL_Delay>
    heading = MPU6050_Parsing_NoOffest(&MPU6050);
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff18 	bl	8000ce0 <MPU6050_Parsing_NoOffest>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <main+0xdc>)
 8000eb6:	801a      	strh	r2, [r3, #0]
    sprintf(str, "%d", heading);
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <main+0xdc>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <main+0xe0>)
 8000ec0:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <main+0xe4>)
 8000ec2:	f004 f82b 	bl	8004f1c <siprintf>
    Socket_sendUDP(socNum, str, dstip, DST_PORT); // sends message to a destination ip address and port
 8000ec6:	463a      	mov	r2, r7
 8000ec8:	7ff8      	ldrb	r0, [r7, #31]
 8000eca:	f241 3389 	movw	r3, #5001	; 0x1389
 8000ece:	4909      	ldr	r1, [pc, #36]	; (8000ef4 <main+0xe4>)
 8000ed0:	f000 ff74 	bl	8001dbc <Socket_sendUDP>
  {
 8000ed4:	e7e1      	b.n	8000e9a <main+0x8a>
 8000ed6:	bf00      	nop
 8000ed8:	200000c8 	.word	0x200000c8
 8000edc:	08005cfc 	.word	0x08005cfc
 8000ee0:	0f01a8c0 	.word	0x0f01a8c0
 8000ee4:	0101a8c0 	.word	0x0101a8c0
 8000ee8:	0401a8c0 	.word	0x0401a8c0
 8000eec:	20000174 	.word	0x20000174
 8000ef0:	08005cf8 	.word	0x08005cf8
 8000ef4:	20000178 	.word	0x20000178

08000ef8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b090      	sub	sp, #64	; 0x40
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0318 	add.w	r3, r7, #24
 8000f02:	2228      	movs	r2, #40	; 0x28
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f004 f800 	bl	8004f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f36:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 fd31 	bl	80039a8 <HAL_RCC_OscConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f4c:	f000 f8c8 	bl	80010e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f50:	230f      	movs	r3, #15
 8000f52:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f54:	2302      	movs	r3, #2
 8000f56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 ff9e 	bl	8003eac <HAL_RCC_ClockConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f76:	f000 f8b3 	bl	80010e0 <Error_Handler>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	3740      	adds	r7, #64	; 0x40
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <MX_I2C2_Init+0x50>)
 8000f8a:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <MX_I2C2_Init+0x54>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_I2C2_Init+0x50>)
 8000f90:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <MX_I2C2_Init+0x58>)
 8000f92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_I2C2_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_I2C2_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_I2C2_Init+0x50>)
 8000fa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fa6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <MX_I2C2_Init+0x50>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_I2C2_Init+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <MX_I2C2_Init+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_I2C2_Init+0x50>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <MX_I2C2_Init+0x50>)
 8000fc2:	f001 fc97 	bl	80028f4 <HAL_I2C_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fcc:	f000 f888 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200000c8 	.word	0x200000c8
 8000fd8:	40005800 	.word	0x40005800
 8000fdc:	00061a80 	.word	0x00061a80

08000fe0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <MX_SPI1_Init+0x64>)
 8000fe6:	4a18      	ldr	r2, [pc, #96]	; (8001048 <MX_SPI1_Init+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <MX_SPI1_Init+0x64>)
 8000fec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ff0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <MX_SPI1_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <MX_SPI1_Init+0x64>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_SPI1_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <MX_SPI1_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_SPI1_Init+0x64>)
 800100c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001010:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_SPI1_Init+0x64>)
 8001014:	2210      	movs	r2, #16
 8001016:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <MX_SPI1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_SPI1_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <MX_SPI1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_SPI1_Init+0x64>)
 800102c:	220a      	movs	r2, #10
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001030:	4804      	ldr	r0, [pc, #16]	; (8001044 <MX_SPI1_Init+0x64>)
 8001032:	f003 f8b5 	bl	80041a0 <HAL_SPI_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800103c:	f000 f850 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2000011c 	.word	0x2000011c
 8001048:	40013000 	.word	0x40013000

0800104c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001060:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <MX_GPIO_Init+0x8c>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <MX_GPIO_Init+0x8c>)
 8001066:	f043 0320 	orr.w	r3, r3, #32
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_GPIO_Init+0x8c>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0320 	and.w	r3, r3, #32
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_GPIO_Init+0x8c>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <MX_GPIO_Init+0x8c>)
 800107e:	f043 0304 	orr.w	r3, r3, #4
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_GPIO_Init+0x8c>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_GPIO_Init+0x8c>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <MX_GPIO_Init+0x8c>)
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_GPIO_Init+0x8c>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2110      	movs	r1, #16
 80010ac:	480b      	ldr	r0, [pc, #44]	; (80010dc <MX_GPIO_Init+0x90>)
 80010ae:	f001 fc09 	bl	80028c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010b2:	2310      	movs	r3, #16
 80010b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2302      	movs	r3, #2
 80010c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	4619      	mov	r1, r3
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_GPIO_Init+0x90>)
 80010ca:	f001 fa77 	bl	80025bc <HAL_GPIO_Init>
}
 80010ce:	bf00      	nop
 80010d0:	3720      	adds	r7, #32
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010800 	.word	0x40010800

080010e0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <Error_Handler+0x8>
	...

080010ec <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4604      	mov	r4, r0
 80010f4:	4608      	mov	r0, r1
 80010f6:	4611      	mov	r1, r2
 80010f8:	461a      	mov	r2, r3
 80010fa:	4623      	mov	r3, r4
 80010fc:	71fb      	strb	r3, [r7, #7]
 80010fe:	4603      	mov	r3, r0
 8001100:	71bb      	strb	r3, [r7, #6]
 8001102:	460b      	mov	r3, r1
 8001104:	80bb      	strh	r3, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b08      	cmp	r3, #8
 800110e:	d902      	bls.n	8001116 <socket+0x2a>
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	e0f2      	b.n	80012fc <socket+0x210>
	switch(protocol)
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d005      	beq.n	8001128 <socket+0x3c>
 800111c:	2b00      	cmp	r3, #0
 800111e:	dd11      	ble.n	8001144 <socket+0x58>
 8001120:	3b02      	subs	r3, #2
 8001122:	2b02      	cmp	r3, #2
 8001124:	d80e      	bhi.n	8001144 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8001126:	e011      	b.n	800114c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2204      	movs	r2, #4
 800112e:	4619      	mov	r1, r3
 8001130:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001134:	f000 fc50 	bl	80019d8 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d105      	bne.n	800114a <socket+0x5e>
 800113e:	f06f 0302 	mvn.w	r3, #2
 8001142:	e0db      	b.n	80012fc <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001144:	f06f 0304 	mvn.w	r3, #4
 8001148:	e0d8      	b.n	80012fc <socket+0x210>
	    break;
 800114a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <socket+0x70>
 8001156:	f06f 0305 	mvn.w	r3, #5
 800115a:	e0cf      	b.n	80012fc <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d025      	beq.n	80011ae <socket+0xc2>
	{
   	switch(protocol)
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d002      	beq.n	800116e <socket+0x82>
 8001168:	2b02      	cmp	r3, #2
 800116a:	d008      	beq.n	800117e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800116c:	e024      	b.n	80011b8 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001174:	2b00      	cmp	r3, #0
 8001176:	d11c      	bne.n	80011b2 <socket+0xc6>
 8001178:	f06f 0305 	mvn.w	r3, #5
 800117c:	e0be      	b.n	80012fc <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	f003 0320 	and.w	r3, r3, #32
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001188:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db02      	blt.n	8001196 <socket+0xaa>
 8001190:	f06f 0305 	mvn.w	r3, #5
 8001194:	e0b2      	b.n	80012fc <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	f003 0310 	and.w	r3, r3, #16
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00a      	beq.n	80011b6 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80011a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db06      	blt.n	80011b6 <socket+0xca>
 80011a8:	f06f 0305 	mvn.w	r3, #5
 80011ac:	e0a6      	b.n	80012fc <socket+0x210>
   	}
   }
 80011ae:	bf00      	nop
 80011b0:	e002      	b.n	80011b8 <socket+0xcc>
   	      break;
 80011b2:	bf00      	nop
 80011b4:	e000      	b.n	80011b8 <socket+0xcc>
   	      break;
 80011b6:	bf00      	nop
	close(sn);
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f8ac 	bl	8001318 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	3301      	adds	r3, #1
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4618      	mov	r0, r3
 80011ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011ce:	f023 030f 	bic.w	r3, r3, #15
 80011d2:	b25a      	sxtb	r2, r3
 80011d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011d8:	4313      	orrs	r3, r2
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4619      	mov	r1, r3
 80011e0:	f000 fbac 	bl	800193c <WIZCHIP_WRITE>
    #endif
	if(!port)
 80011e4:	88bb      	ldrh	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d110      	bne.n	800120c <socket+0x120>
	{
	   port = sock_any_port++;
 80011ea:	4b46      	ldr	r3, [pc, #280]	; (8001304 <socket+0x218>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	b291      	uxth	r1, r2
 80011f2:	4a44      	ldr	r2, [pc, #272]	; (8001304 <socket+0x218>)
 80011f4:	8011      	strh	r1, [r2, #0]
 80011f6:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80011f8:	4b42      	ldr	r3, [pc, #264]	; (8001304 <socket+0x218>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001200:	4293      	cmp	r3, r2
 8001202:	d103      	bne.n	800120c <socket+0x120>
 8001204:	4b3f      	ldr	r3, [pc, #252]	; (8001304 <socket+0x218>)
 8001206:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800120a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	3301      	adds	r3, #1
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001218:	461a      	mov	r2, r3
 800121a:	88bb      	ldrh	r3, [r7, #4]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	b29b      	uxth	r3, r3
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4619      	mov	r1, r3
 8001224:	4610      	mov	r0, r2
 8001226:	f000 fb89 	bl	800193c <WIZCHIP_WRITE>
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	3301      	adds	r3, #1
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001236:	461a      	mov	r2, r3
 8001238:	88bb      	ldrh	r3, [r7, #4]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4619      	mov	r1, r3
 800123e:	4610      	mov	r0, r2
 8001240:	f000 fb7c 	bl	800193c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	3301      	adds	r3, #1
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001250:	2101      	movs	r1, #1
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fb72 	bl	800193c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001258:	bf00      	nop
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	3301      	adds	r3, #1
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fb1c 	bl	80018a4 <WIZCHIP_READ>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f3      	bne.n	800125a <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2201      	movs	r2, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	b21b      	sxth	r3, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	b21a      	sxth	r2, r3
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <socket+0x21c>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	b21b      	sxth	r3, r3
 8001286:	4013      	ands	r3, r2
 8001288:	b21b      	sxth	r3, r3
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <socket+0x21c>)
 800128e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	f003 0201 	and.w	r2, r3, #1
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	b21a      	sxth	r2, r3
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <socket+0x21c>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <socket+0x21c>)
 80012ac:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2201      	movs	r2, #1
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <socket+0x220>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4013      	ands	r3, r2
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <socket+0x220>)
 80012ca:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4a10      	ldr	r2, [pc, #64]	; (8001310 <socket+0x224>)
 80012d0:	2100      	movs	r1, #0
 80012d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <socket+0x228>)
 80012da:	2100      	movs	r1, #0
 80012dc:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80012de:	bf00      	nop
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	3301      	adds	r3, #1
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 fad9 	bl	80018a4 <WIZCHIP_READ>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f3      	beq.n	80012e0 <socket+0x1f4>
   return (int8_t)sn;
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bd90      	pop	{r4, r7, pc}
 8001304:	20000000 	.word	0x20000000
 8001308:	20000196 	.word	0x20000196
 800130c:	20000198 	.word	0x20000198
 8001310:	2000019c 	.word	0x2000019c
 8001314:	200001ac 	.word	0x200001ac

08001318 <close>:

int8_t close(uint8_t sn)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b08      	cmp	r3, #8
 8001326:	d902      	bls.n	800132e <close+0x16>
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	e055      	b.n	80013da <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	3301      	adds	r3, #1
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800133a:	2110      	movs	r1, #16
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fafd 	bl	800193c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001342:	bf00      	nop
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	3301      	adds	r3, #1
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001350:	4618      	mov	r0, r3
 8001352:	f000 faa7 	bl	80018a4 <WIZCHIP_READ>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f3      	bne.n	8001344 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	3301      	adds	r3, #1
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001368:	211f      	movs	r1, #31
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fae6 	bl	800193c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	2201      	movs	r2, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	b21b      	sxth	r3, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	b21a      	sxth	r2, r3
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <close+0xcc>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4013      	ands	r3, r2
 8001386:	b21b      	sxth	r3, r3
 8001388:	b29a      	uxth	r2, r3
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <close+0xcc>)
 800138c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2201      	movs	r2, #1
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	b21b      	sxth	r3, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	b21a      	sxth	r2, r3
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <close+0xd0>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	4013      	ands	r3, r2
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <close+0xd0>)
 80013aa:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <close+0xd4>)
 80013b0:	2100      	movs	r1, #0
 80013b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <close+0xd8>)
 80013ba:	2100      	movs	r1, #0
 80013bc:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80013be:	bf00      	nop
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	3301      	adds	r3, #1
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fa69 	bl	80018a4 <WIZCHIP_READ>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f3      	bne.n	80013c0 <close+0xa8>
	return SOCK_OK;
 80013d8:	2301      	movs	r3, #1
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000196 	.word	0x20000196
 80013e8:	20000198 	.word	0x20000198
 80013ec:	2000019c 	.word	0x2000019c
 80013f0:	200001ac 	.word	0x200001ac

080013f4 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4603      	mov	r3, r0
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	4613      	mov	r3, r2
 8001404:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	2b08      	cmp	r3, #8
 8001412:	d902      	bls.n	800141a <sendto+0x26>
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	e11b      	b.n	8001652 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	3301      	adds	r3, #1
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fa3e 	bl	80018a4 <WIZCHIP_READ>
 8001428:	4603      	mov	r3, r0
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3b02      	subs	r3, #2
 8001430:	2b02      	cmp	r3, #2
 8001432:	d902      	bls.n	800143a <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8001434:	f06f 0304 	mvn.w	r3, #4
 8001438:	e10b      	b.n	8001652 <sendto+0x25e>
         break;
 800143a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800143c:	89bb      	ldrh	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <sendto+0x54>
 8001442:	f06f 030d 	mvn.w	r3, #13
 8001446:	e104      	b.n	8001652 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	3201      	adds	r2, #1
 8001456:	7812      	ldrb	r2, [r2, #0]
 8001458:	4413      	add	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	3202      	adds	r2, #2
 8001464:	7812      	ldrb	r2, [r2, #0]
 8001466:	4413      	add	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	3203      	adds	r2, #3
 8001472:	7812      	ldrb	r2, [r2, #0]
 8001474:	4413      	add	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10e      	bne.n	800149c <sendto+0xa8>
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	3301      	adds	r3, #1
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fa0c 	bl	80018a4 <WIZCHIP_READ>
 800148c:	4603      	mov	r3, r0
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	2b04      	cmp	r3, #4
 8001494:	d002      	beq.n	800149c <sendto+0xa8>
 8001496:	f06f 030b 	mvn.w	r3, #11
 800149a:	e0da      	b.n	8001652 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800149c:	8c3b      	ldrh	r3, [r7, #32]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10e      	bne.n	80014c0 <sendto+0xcc>
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	3301      	adds	r3, #1
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f9fa 	bl	80018a4 <WIZCHIP_READ>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d002      	beq.n	80014c0 <sendto+0xcc>
 80014ba:	f06f 030a 	mvn.w	r3, #10
 80014be:	e0c8      	b.n	8001652 <sendto+0x25e>
   tmp = getSn_SR(sn);
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	3301      	adds	r3, #1
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 f9e9 	bl	80018a4 <WIZCHIP_READ>
 80014d2:	4603      	mov	r3, r0
 80014d4:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
 80014d8:	2b42      	cmp	r3, #66	; 0x42
 80014da:	d008      	beq.n	80014ee <sendto+0xfa>
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
 80014de:	2b22      	cmp	r3, #34	; 0x22
 80014e0:	d005      	beq.n	80014ee <sendto+0xfa>
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	2b32      	cmp	r3, #50	; 0x32
 80014e6:	d002      	beq.n	80014ee <sendto+0xfa>
 80014e8:	f06f 0306 	mvn.w	r3, #6
 80014ec:	e0b1      	b.n	8001652 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	3301      	adds	r3, #1
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80014fa:	2204      	movs	r2, #4
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 faca 	bl	8001a98 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	3301      	adds	r3, #1
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001510:	461a      	mov	r2, r3
 8001512:	8c3b      	ldrh	r3, [r7, #32]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	b29b      	uxth	r3, r3
 8001518:	b2db      	uxtb	r3, r3
 800151a:	4619      	mov	r1, r3
 800151c:	4610      	mov	r0, r2
 800151e:	f000 fa0d 	bl	800193c <WIZCHIP_WRITE>
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	3301      	adds	r3, #1
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800152e:	461a      	mov	r2, r3
 8001530:	8c3b      	ldrh	r3, [r7, #32]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	4619      	mov	r1, r3
 8001536:	4610      	mov	r0, r2
 8001538:	f000 fa00 	bl	800193c <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	3301      	adds	r3, #1
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f9ab 	bl	80018a4 <WIZCHIP_READ>
 800154e:	4603      	mov	r3, r0
 8001550:	b29b      	uxth	r3, r3
 8001552:	029b      	lsls	r3, r3, #10
 8001554:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001556:	89ba      	ldrh	r2, [r7, #12]
 8001558:	8abb      	ldrh	r3, [r7, #20]
 800155a:	429a      	cmp	r2, r3
 800155c:	d901      	bls.n	8001562 <sendto+0x16e>
 800155e:	8abb      	ldrh	r3, [r7, #20]
 8001560:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	4618      	mov	r0, r3
 8001566:	f000 faf7 	bl	8001b58 <getSn_TX_FSR>
 800156a:	4603      	mov	r3, r0
 800156c:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	3301      	adds	r3, #1
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f992 	bl	80018a4 <WIZCHIP_READ>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <sendto+0x198>
 8001586:	f06f 0303 	mvn.w	r3, #3
 800158a:	e062      	b.n	8001652 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800158c:	4b33      	ldr	r3, [pc, #204]	; (800165c <sendto+0x268>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	fa42 f303 	asr.w	r3, r2, r3
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <sendto+0x1b8>
 80015a0:	89ba      	ldrh	r2, [r7, #12]
 80015a2:	8abb      	ldrh	r3, [r7, #20]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d901      	bls.n	80015ac <sendto+0x1b8>
 80015a8:	2300      	movs	r3, #0
 80015aa:	e052      	b.n	8001652 <sendto+0x25e>
      if(len <= freesize) break;
 80015ac:	89ba      	ldrh	r2, [r7, #12]
 80015ae:	8abb      	ldrh	r3, [r7, #20]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d900      	bls.n	80015b6 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80015b4:	e7d5      	b.n	8001562 <sendto+0x16e>
      if(len <= freesize) break;
 80015b6:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80015b8:	89ba      	ldrh	r2, [r7, #12]
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fb15 	bl	8001bee <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	3301      	adds	r3, #1
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80015d0:	2120      	movs	r1, #32
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f9b2 	bl	800193c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80015d8:	bf00      	nop
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	3301      	adds	r3, #1
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f95c 	bl	80018a4 <WIZCHIP_READ>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f3      	bne.n	80015da <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	3301      	adds	r3, #1
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f950 	bl	80018a4 <WIZCHIP_READ>
 8001604:	4603      	mov	r3, r0
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800160c:	7dfb      	ldrb	r3, [r7, #23]
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00c      	beq.n	8001630 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	3301      	adds	r3, #1
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001622:	2110      	movs	r1, #16
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f989 	bl	800193c <WIZCHIP_WRITE>
         break;
 800162a:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800162c:	89bb      	ldrh	r3, [r7, #12]
 800162e:	e010      	b.n	8001652 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8001630:	7dfb      	ldrb	r3, [r7, #23]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0db      	beq.n	80015f2 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	3301      	adds	r3, #1
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001646:	2108      	movs	r1, #8
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f977 	bl	800193c <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800164e:	f06f 030c 	mvn.w	r3, #12
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000196 	.word	0x20000196

08001660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_MspInit+0x40>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <HAL_MspInit+0x40>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6193      	str	r3, [r2, #24]
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_MspInit+0x40>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_MspInit+0x40>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_MspInit+0x40>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_MspInit+0x40>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	40021000 	.word	0x40021000

080016a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a16      	ldr	r2, [pc, #88]	; (8001718 <HAL_I2C_MspInit+0x74>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d124      	bne.n	800170e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_I2C_MspInit+0x78>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <HAL_I2C_MspInit+0x78>)
 80016ca:	f043 0308 	orr.w	r3, r3, #8
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_I2C_MspInit+0x78>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e2:	2312      	movs	r3, #18
 80016e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	f107 0310 	add.w	r3, r7, #16
 80016ee:	4619      	mov	r1, r3
 80016f0:	480b      	ldr	r0, [pc, #44]	; (8001720 <HAL_I2C_MspInit+0x7c>)
 80016f2:	f000 ff63 	bl	80025bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_I2C_MspInit+0x78>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a08      	ldr	r2, [pc, #32]	; (800171c <HAL_I2C_MspInit+0x78>)
 80016fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001700:	61d3      	str	r3, [r2, #28]
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_I2C_MspInit+0x78>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800170e:	bf00      	nop
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40005800 	.word	0x40005800
 800171c:	40021000 	.word	0x40021000
 8001720:	40010c00 	.word	0x40010c00

08001724 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a1f      	ldr	r2, [pc, #124]	; (80017bc <HAL_SPI_MspInit+0x98>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d137      	bne.n	80017b4 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <HAL_SPI_MspInit+0x9c>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <HAL_SPI_MspInit+0x9c>)
 800174a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_SPI_MspInit+0x9c>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <HAL_SPI_MspInit+0x9c>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a17      	ldr	r2, [pc, #92]	; (80017c0 <HAL_SPI_MspInit+0x9c>)
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_SPI_MspInit+0x9c>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001774:	23a0      	movs	r3, #160	; 0xa0
 8001776:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4619      	mov	r1, r3
 8001786:	480f      	ldr	r0, [pc, #60]	; (80017c4 <HAL_SPI_MspInit+0xa0>)
 8001788:	f000 ff18 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800178c:	2340      	movs	r3, #64	; 0x40
 800178e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	4619      	mov	r1, r3
 800179e:	4809      	ldr	r0, [pc, #36]	; (80017c4 <HAL_SPI_MspInit+0xa0>)
 80017a0:	f000 ff0c 	bl	80025bc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	2023      	movs	r0, #35	; 0x23
 80017aa:	f000 fe58 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017ae:	2023      	movs	r0, #35	; 0x23
 80017b0:	f000 fe71 	bl	8002496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017b4:	bf00      	nop
 80017b6:	3720      	adds	r7, #32
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40013000 	.word	0x40013000
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40010800 	.word	0x40010800

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <NMI_Handler+0x4>

080017ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <HardFault_Handler+0x4>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler+0x4>

080017da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180e:	f000 fd0f 	bl	8002230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <SPI1_IRQHandler+0x10>)
 800181e:	f003 f94f 	bl	8004ac0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000011c 	.word	0x2000011c

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f003 fb2c 	bl	8004eb8 <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20005000 	.word	0x20005000
 800188c:	00000400 	.word	0x00000400
 8001890:	200001b4 	.word	0x200001b4
 8001894:	200001d8 	.word	0x200001d8

08001898 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <WIZCHIP_READ+0x94>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <WIZCHIP_READ+0x94>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <WIZCHIP_READ+0x94>)
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <WIZCHIP_READ+0x24>
 80018c0:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <WIZCHIP_READ+0x94>)
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d114      	bne.n	80018f2 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <WIZCHIP_READ+0x94>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	0c12      	lsrs	r2, r2, #16
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	4610      	mov	r0, r2
 80018d4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <WIZCHIP_READ+0x94>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	0a12      	lsrs	r2, r2, #8
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	4610      	mov	r0, r2
 80018e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <WIZCHIP_READ+0x94>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	4610      	mov	r0, r2
 80018ee:	4798      	blx	r3
 80018f0:	e011      	b.n	8001916 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	0c1b      	lsrs	r3, r3, #16
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <WIZCHIP_READ+0x94>)
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	f107 020c 	add.w	r2, r7, #12
 8001910:	2103      	movs	r1, #3
 8001912:	4610      	mov	r0, r2
 8001914:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <WIZCHIP_READ+0x94>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4798      	blx	r3
 800191c:	4603      	mov	r3, r0
 800191e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <WIZCHIP_READ+0x94>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <WIZCHIP_READ+0x94>)
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	4798      	blx	r3
   return ret;
 800192c:	7bfb      	ldrb	r3, [r7, #15]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000008 	.word	0x20000008

0800193c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001948:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <WIZCHIP_WRITE+0x98>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800194e:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <WIZCHIP_WRITE+0x98>)
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800195c:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <WIZCHIP_WRITE+0x98>)
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	2b00      	cmp	r3, #0
 8001962:	d119      	bne.n	8001998 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <WIZCHIP_WRITE+0x98>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	0c12      	lsrs	r2, r2, #16
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	4610      	mov	r0, r2
 8001970:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <WIZCHIP_WRITE+0x98>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	0a12      	lsrs	r2, r2, #8
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	4610      	mov	r0, r2
 800197e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <WIZCHIP_WRITE+0x98>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	4610      	mov	r0, r2
 800198a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <WIZCHIP_WRITE+0x98>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	4610      	mov	r0, r2
 8001994:	4798      	blx	r3
 8001996:	e013      	b.n	80019c0 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	0c1b      	lsrs	r3, r3, #16
 800199c:	b2db      	uxtb	r3, r3
 800199e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <WIZCHIP_WRITE+0x98>)
 80019b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b6:	f107 020c 	add.w	r2, r7, #12
 80019ba:	2104      	movs	r1, #4
 80019bc:	4610      	mov	r0, r2
 80019be:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <WIZCHIP_WRITE+0x98>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80019c6:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <WIZCHIP_WRITE+0x98>)
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	4798      	blx	r3
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000008 	.word	0x20000008

080019d8 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	4613      	mov	r3, r2
 80019e4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80019e6:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <WIZCHIP_READ_BUF+0xbc>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	4798      	blx	r3
   WIZCHIP.CS._select();
 80019ec:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <WIZCHIP_READ_BUF+0xbc>)
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80019f2:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <WIZCHIP_READ_BUF+0xbc>)
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <WIZCHIP_READ_BUF+0x2a>
 80019fa:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <WIZCHIP_READ_BUF+0xbc>)
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d126      	bne.n	8001a50 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001a02:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <WIZCHIP_READ_BUF+0xbc>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	0c12      	lsrs	r2, r2, #16
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001a10:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <WIZCHIP_READ_BUF+0xbc>)
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	0a12      	lsrs	r2, r2, #8
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <WIZCHIP_READ_BUF+0xbc>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	4610      	mov	r0, r2
 8001a28:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	82fb      	strh	r3, [r7, #22]
 8001a2e:	e00a      	b.n	8001a46 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <WIZCHIP_READ_BUF+0xbc>)
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	8afa      	ldrh	r2, [r7, #22]
 8001a36:	68b9      	ldr	r1, [r7, #8]
 8001a38:	188c      	adds	r4, r1, r2
 8001a3a:	4798      	blx	r3
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001a40:	8afb      	ldrh	r3, [r7, #22]
 8001a42:	3301      	adds	r3, #1
 8001a44:	82fb      	strh	r3, [r7, #22]
 8001a46:	8afa      	ldrh	r2, [r7, #22]
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d3f0      	bcc.n	8001a30 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001a4e:	e017      	b.n	8001a80 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	0c1b      	lsrs	r3, r3, #16
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	0a1b      	lsrs	r3, r3, #8
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <WIZCHIP_READ_BUF+0xbc>)
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	f107 0210 	add.w	r2, r7, #16
 8001a6e:	2103      	movs	r1, #3
 8001a70:	4610      	mov	r0, r2
 8001a72:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001a74:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <WIZCHIP_READ_BUF+0xbc>)
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	88fa      	ldrh	r2, [r7, #6]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	68b8      	ldr	r0, [r7, #8]
 8001a7e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <WIZCHIP_READ_BUF+0xbc>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001a86:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <WIZCHIP_READ_BUF+0xbc>)
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	4798      	blx	r3
}
 8001a8c:	bf00      	nop
 8001a8e:	371c      	adds	r7, #28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd90      	pop	{r4, r7, pc}
 8001a94:	20000008 	.word	0x20000008

08001a98 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001aa6:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001aac:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f043 0304 	orr.w	r3, r3, #4
 8001ab8:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d126      	bne.n	8001b10 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001ac2:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	0c12      	lsrs	r2, r2, #16
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	4610      	mov	r0, r2
 8001ace:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001ad0:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	0a12      	lsrs	r2, r2, #8
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	4610      	mov	r0, r2
 8001adc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	82fb      	strh	r3, [r7, #22]
 8001aee:	e00a      	b.n	8001b06 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	8afa      	ldrh	r2, [r7, #22]
 8001af6:	68b9      	ldr	r1, [r7, #8]
 8001af8:	440a      	add	r2, r1
 8001afa:	7812      	ldrb	r2, [r2, #0]
 8001afc:	4610      	mov	r0, r2
 8001afe:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001b00:	8afb      	ldrh	r3, [r7, #22]
 8001b02:	3301      	adds	r3, #1
 8001b04:	82fb      	strh	r3, [r7, #22]
 8001b06:	8afa      	ldrh	r2, [r7, #22]
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d3f0      	bcc.n	8001af0 <WIZCHIP_WRITE_BUF+0x58>
 8001b0e:	e017      	b.n	8001b40 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	0c1b      	lsrs	r3, r3, #16
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	0a1b      	lsrs	r3, r3, #8
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	f107 0210 	add.w	r2, r7, #16
 8001b2e:	2103      	movs	r1, #3
 8001b30:	4610      	mov	r0, r2
 8001b32:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	88fa      	ldrh	r2, [r7, #6]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	68b8      	ldr	r0, [r7, #8]
 8001b3e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001b46:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <WIZCHIP_WRITE_BUF+0xbc>)
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	4798      	blx	r3
}
 8001b4c:	bf00      	nop
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000008 	.word	0x20000008

08001b58 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	81fb      	strh	r3, [r7, #14]
 8001b66:	2300      	movs	r3, #0
 8001b68:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	3301      	adds	r3, #1
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fe94 	bl	80018a4 <WIZCHIP_READ>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001b80:	89bb      	ldrh	r3, [r7, #12]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	b29c      	uxth	r4, r3
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fe86 	bl	80018a4 <WIZCHIP_READ>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	4423      	add	r3, r4
 8001b9e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001ba0:	89bb      	ldrh	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d01a      	beq.n	8001bdc <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	3301      	adds	r3, #1
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fe76 	bl	80018a4 <WIZCHIP_READ>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001bbc:	89fb      	ldrh	r3, [r7, #14]
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	b29c      	uxth	r4, r3
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fe68 	bl	80018a4 <WIZCHIP_READ>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	4423      	add	r3, r4
 8001bda:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001bdc:	89fa      	ldrh	r2, [r7, #14]
 8001bde:	89bb      	ldrh	r3, [r7, #12]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d1c2      	bne.n	8001b6a <getSn_TX_FSR+0x12>
   return val;
 8001be4:	89fb      	ldrh	r3, [r7, #14]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd90      	pop	{r4, r7, pc}

08001bee <wiz_send_data>:
   }while (val != val1);
   return val;
}

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001bee:	b590      	push	{r4, r7, lr}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	6039      	str	r1, [r7, #0]
 8001bf8:	71fb      	strb	r3, [r7, #7]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001c06:	88bb      	ldrh	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d048      	beq.n	8001c9e <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	3301      	adds	r3, #1
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fe43 	bl	80018a4 <WIZCHIP_READ>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	b29c      	uxth	r4, r3
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fe36 	bl	80018a4 <WIZCHIP_READ>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	4423      	add	r3, r4
 8001c3e:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001c40:	89fb      	ldrh	r3, [r7, #14]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	79fa      	ldrb	r2, [r7, #7]
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	3202      	adds	r2, #2
 8001c4a:	00d2      	lsls	r2, r2, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001c50:	88bb      	ldrh	r3, [r7, #4]
 8001c52:	461a      	mov	r2, r3
 8001c54:	6839      	ldr	r1, [r7, #0]
 8001c56:	68b8      	ldr	r0, [r7, #8]
 8001c58:	f7ff ff1e 	bl	8001a98 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001c5c:	89fa      	ldrh	r2, [r7, #14]
 8001c5e:	88bb      	ldrh	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	3301      	adds	r3, #1
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001c70:	461a      	mov	r2, r3
 8001c72:	89fb      	ldrh	r3, [r7, #14]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	f7ff fe5d 	bl	800193c <WIZCHIP_WRITE>
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	3301      	adds	r3, #1
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001c8e:	461a      	mov	r2, r3
 8001c90:	89fb      	ldrh	r3, [r7, #14]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	4619      	mov	r1, r3
 8001c96:	4610      	mov	r0, r2
 8001c98:	f7ff fe50 	bl	800193c <WIZCHIP_WRITE>
 8001c9c:	e000      	b.n	8001ca0 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001c9e:	bf00      	nop
}
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd90      	pop	{r4, r7, pc}
	...

08001ca8 <cs_sel>:
extern SPI_HandleTypeDef hspi1;

/**
 * @brief function to set cs pin low to start transmission
 */
static void cs_sel(void) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8001cac:	2200      	movs	r2, #0
 8001cae:	2110      	movs	r1, #16
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <cs_sel+0x14>)
 8001cb2:	f000 fe07 	bl	80028c4 <HAL_GPIO_WritePin>
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40010800 	.word	0x40010800

08001cc0 <cs_desel>:

/**
 * @brief function to set cs pin high to end transmission
 */
static void cs_desel(void) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2110      	movs	r1, #16
 8001cc8:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <cs_desel+0x14>)
 8001cca:	f000 fdfb 	bl	80028c4 <HAL_GPIO_WritePin>
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40010800 	.word	0x40010800

08001cd8 <spi_rb>:

/**
 * @brief function to read byte through spi
 */
uint8_t spi_rb(void) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 8001cde:	1df9      	adds	r1, r7, #7
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4804      	ldr	r0, [pc, #16]	; (8001cf8 <spi_rb+0x20>)
 8001ce8:	f002 fc21 	bl	800452e <HAL_SPI_Receive>
	return rbuf;
 8001cec:	79fb      	ldrb	r3, [r7, #7]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000011c 	.word	0x2000011c

08001cfc <spi_wb>:

/**
 * @brief function to write byte through spi
 */
void spi_wb(uint8_t b) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 8001d06:	1df9      	adds	r1, r7, #7
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4803      	ldr	r0, [pc, #12]	; (8001d1c <spi_wb+0x20>)
 8001d10:	f002 faca 	bl	80042a8 <HAL_SPI_Transmit>
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	2000011c 	.word	0x2000011c

08001d20 <initializeW5500>:
 * @param ip is the node's IP address
 * @param sn is the node's subnet mask
 * @param gw is the node's gateway address
 */
void initializeW5500(uint8_t mac[], uint8_t ip[], uint8_t sn[], uint8_t gw[])
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08c      	sub	sp, #48	; 0x30
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
	uint8_t bufSize[] = { 2, 2, 2, 2, 2, 2, 2, 2};//size of each socket number in kilobytes
 8001d2e:	4a1e      	ldr	r2, [pc, #120]	; (8001da8 <initializeW5500+0x88>)
 8001d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d38:	e883 0003 	stmia.w	r3, {r0, r1}

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);//passes call back function for pin high and low which needs to be called during the SPI transfer
 8001d3c:	491b      	ldr	r1, [pc, #108]	; (8001dac <initializeW5500+0x8c>)
 8001d3e:	481c      	ldr	r0, [pc, #112]	; (8001db0 <initializeW5500+0x90>)
 8001d40:	f000 f8a2 	bl	8001e88 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spi_rb, spi_wb);//passes the call back function for read byte and write byte which needs to be called during the SPI transfer
 8001d44:	491b      	ldr	r1, [pc, #108]	; (8001db4 <initializeW5500+0x94>)
 8001d46:	481c      	ldr	r0, [pc, #112]	; (8001db8 <initializeW5500+0x98>)
 8001d48:	f000 f8c2 	bl	8001ed0 <reg_wizchip_spi_cbfunc>

	wizchip_init(bufSize, bufSize);//initializes the transmit and receive buffer sizes for each socket
 8001d4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d54:	4611      	mov	r1, r2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 f932 	bl	8001fc0 <wizchip_init>
	wiz_NetInfo netInfo = {};
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
 8001d6c:	f8c3 2013 	str.w	r2, [r3, #19]

	memcpy(&netInfo.mac,mac,6);// Mac address
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	f107 0310 	add.w	r3, r7, #16
 8001d76:	6810      	ldr	r0, [r2, #0]
 8001d78:	6018      	str	r0, [r3, #0]
 8001d7a:	8892      	ldrh	r2, [r2, #4]
 8001d7c:	809a      	strh	r2, [r3, #4]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	681b      	ldr	r3, [r3, #0]
	memcpy(&netInfo.ip,ip,4);// IP address
 8001d82:	f8c7 3016 	str.w	r3, [r7, #22]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
	memcpy(&netInfo.sn,sn,4);// Subnet mask
 8001d8a:	f8c7 301a 	str.w	r3, [r7, #26]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
	memcpy(&netInfo.gw,gw,4);// Gateway address
 8001d92:	f8c7 301e 	str.w	r3, [r7, #30]

	wizchip_setnetinfo(&netInfo);//sets the configuration of the MAC address, IP address, subnet mask and gateway
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f99c 	bl	80020d8 <wizchip_setnetinfo>
	//wizchip_getnetinfo(&netInfo);
}
 8001da0:	bf00      	nop
 8001da2:	3730      	adds	r7, #48	; 0x30
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	08005d04 	.word	0x08005d04
 8001dac:	08001cc1 	.word	0x08001cc1
 8001db0:	08001ca9 	.word	0x08001ca9
 8001db4:	08001cfd 	.word	0x08001cfd
 8001db8:	08001cd9 	.word	0x08001cd9

08001dbc <Socket_sendUDP>:
 * @param message is the message that needs to be sent
 * @param dstip is the destination IP address
 * @param portNum is the destination port number
 */
void Socket_sendUDP(uint8_t socNum,uint8_t message[],uint8_t dstip[], uint16_t portNum)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4603      	mov	r3, r0
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	81bb      	strh	r3, [r7, #12]
	while(sendto(socNum, message, strlen(message), dstip, portNum)!=strlen(message));//sends message to a destination ip address and port
 8001dd0:	bf00      	nop
 8001dd2:	68b8      	ldr	r0, [r7, #8]
 8001dd4:	f7fe f9bc 	bl	8000150 <strlen>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	7bf8      	ldrb	r0, [r7, #15]
 8001dde:	89bb      	ldrh	r3, [r7, #12]
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	f7ff fb05 	bl	80013f4 <sendto>
 8001dea:	4604      	mov	r4, r0
 8001dec:	68b8      	ldr	r0, [r7, #8]
 8001dee:	f7fe f9af 	bl	8000150 <strlen>
 8001df2:	4603      	mov	r3, r0
 8001df4:	429c      	cmp	r4, r3
 8001df6:	d1ec      	bne.n	8001dd2 <Socket_sendUDP+0x16>
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd90      	pop	{r4, r7, pc}

08001e02 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr

08001e32 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	70fb      	strb	r3, [r7, #3]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	78fa      	ldrb	r2, [r7, #3]
 8001e5a:	701a      	strb	r2, [r3, #0]
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <reg_wizchip_cs_cbfunc+0x16>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d106      	bne.n	8001eac <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <reg_wizchip_cs_cbfunc+0x3c>)
 8001ea0:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <reg_wizchip_cs_cbfunc+0x40>)
 8001ea2:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <reg_wizchip_cs_cbfunc+0x3c>)
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <reg_wizchip_cs_cbfunc+0x44>)
 8001ea8:	619a      	str	r2, [r3, #24]
 8001eaa:	e006      	b.n	8001eba <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001eac:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <reg_wizchip_cs_cbfunc+0x3c>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001eb2:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <reg_wizchip_cs_cbfunc+0x3c>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	6193      	str	r3, [r2, #24]
   }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	08001e1b 	.word	0x08001e1b
 8001ecc:	08001e27 	.word	0x08001e27

08001ed0 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001eda:	bf00      	nop
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <reg_wizchip_spi_cbfunc+0x4c>)
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f9      	beq.n	8001edc <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <reg_wizchip_spi_cbfunc+0x24>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d106      	bne.n	8001f02 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <reg_wizchip_spi_cbfunc+0x4c>)
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <reg_wizchip_spi_cbfunc+0x50>)
 8001ef8:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <reg_wizchip_spi_cbfunc+0x4c>)
 8001efc:	4a09      	ldr	r2, [pc, #36]	; (8001f24 <reg_wizchip_spi_cbfunc+0x54>)
 8001efe:	621a      	str	r2, [r3, #32]
 8001f00:	e006      	b.n	8001f10 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001f02:	4a06      	ldr	r2, [pc, #24]	; (8001f1c <reg_wizchip_spi_cbfunc+0x4c>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001f08:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <reg_wizchip_spi_cbfunc+0x4c>)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6213      	str	r3, [r2, #32]
   }
}
 8001f0e:	bf00      	nop
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	08001e67 	.word	0x08001e67
 8001f24:	08001e75 	.word	0x08001e75

08001f28 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	2206      	movs	r2, #6
 8001f32:	4619      	mov	r1, r3
 8001f34:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001f38:	f7ff fd4e 	bl	80019d8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2204      	movs	r2, #4
 8001f42:	4619      	mov	r1, r3
 8001f44:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f48:	f7ff fd46 	bl	80019d8 <WIZCHIP_READ_BUF>
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	2204      	movs	r2, #4
 8001f52:	4619      	mov	r1, r3
 8001f54:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001f58:	f7ff fd3e 	bl	80019d8 <WIZCHIP_READ_BUF>
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	2204      	movs	r2, #4
 8001f62:	4619      	mov	r1, r3
 8001f64:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001f68:	f7ff fd36 	bl	80019d8 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001f6c:	2180      	movs	r1, #128	; 0x80
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7ff fce4 	bl	800193c <WIZCHIP_WRITE>
   getMR(); // for delay
 8001f74:	2000      	movs	r0, #0
 8001f76:	f7ff fc95 	bl	80018a4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2206      	movs	r2, #6
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001f84:	f7ff fd88 	bl	8001a98 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f94:	f7ff fd80 	bl	8001a98 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001fa4:	f7ff fd78 	bl	8001a98 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001fa8:	f107 030c 	add.w	r3, r7, #12
 8001fac:	2204      	movs	r2, #4
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001fb4:	f7ff fd70 	bl	8001a98 <WIZCHIP_WRITE_BUF>
}
 8001fb8:	bf00      	nop
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001fce:	f7ff ffab 	bl	8001f28 <wizchip_sw_reset>
   if(txsize)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d03b      	beq.n	8002050 <wizchip_init+0x90>
   {
      tmp = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	e015      	b.n	800200e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	781a      	ldrb	r2, [r3, #0]
 8001fec:	7bbb      	ldrb	r3, [r7, #14]
 8001fee:	4413      	add	r3, r2
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001ff4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ff8:	2b10      	cmp	r3, #16
 8001ffa:	dd02      	ble.n	8002002 <wizchip_init+0x42>
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8002000:	e066      	b.n	80020d0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	3301      	adds	r3, #1
 800200a:	b2db      	uxtb	r3, r3
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002012:	2b07      	cmp	r3, #7
 8002014:	dde5      	ble.n	8001fe2 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002016:	2300      	movs	r3, #0
 8002018:	73fb      	strb	r3, [r7, #15]
 800201a:	e015      	b.n	8002048 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800201c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	3301      	adds	r3, #1
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800202a:	4618      	mov	r0, r3
 800202c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	4619      	mov	r1, r3
 8002038:	f7ff fc80 	bl	800193c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800203c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	3301      	adds	r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204c:	2b07      	cmp	r3, #7
 800204e:	dde5      	ble.n	800201c <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d03b      	beq.n	80020ce <wizchip_init+0x10e>
   {
      tmp = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800205a:	2300      	movs	r3, #0
 800205c:	73fb      	strb	r3, [r7, #15]
 800205e:	e015      	b.n	800208c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8002060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	4413      	add	r3, r2
 8002068:	781a      	ldrb	r2, [r3, #0]
 800206a:	7bbb      	ldrb	r3, [r7, #14]
 800206c:	4413      	add	r3, r2
 800206e:	b2db      	uxtb	r3, r3
 8002070:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002072:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002076:	2b10      	cmp	r3, #16
 8002078:	dd02      	ble.n	8002080 <wizchip_init+0xc0>
 800207a:	f04f 33ff 	mov.w	r3, #4294967295
 800207e:	e027      	b.n	80020d0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	3301      	adds	r3, #1
 8002088:	b2db      	uxtb	r3, r3
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002090:	2b07      	cmp	r3, #7
 8002092:	dde5      	ble.n	8002060 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002094:	2300      	movs	r3, #0
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	e015      	b.n	80020c6 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800209a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	3301      	adds	r3, #1
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80020a8:	4618      	mov	r0, r3
 80020aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	4413      	add	r3, r2
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7ff fc41 	bl	800193c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80020ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	73fb      	strb	r3, [r7, #15]
 80020c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ca:	2b07      	cmp	r3, #7
 80020cc:	dde5      	ble.n	800209a <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2206      	movs	r2, #6
 80020e4:	4619      	mov	r1, r3
 80020e6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80020ea:	f7ff fcd5 	bl	8001a98 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	330e      	adds	r3, #14
 80020f2:	2204      	movs	r2, #4
 80020f4:	4619      	mov	r1, r3
 80020f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020fa:	f7ff fccd 	bl	8001a98 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	330a      	adds	r3, #10
 8002102:	2204      	movs	r2, #4
 8002104:	4619      	mov	r1, r3
 8002106:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800210a:	f7ff fcc5 	bl	8001a98 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3306      	adds	r3, #6
 8002112:	2204      	movs	r2, #4
 8002114:	4619      	mov	r1, r3
 8002116:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800211a:	f7ff fcbd 	bl	8001a98 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	7c9a      	ldrb	r2, [r3, #18]
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <wizchip_setnetinfo+0x78>)
 8002124:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	7cda      	ldrb	r2, [r3, #19]
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <wizchip_setnetinfo+0x78>)
 800212c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	7d1a      	ldrb	r2, [r3, #20]
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <wizchip_setnetinfo+0x78>)
 8002134:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7d5a      	ldrb	r2, [r3, #21]
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <wizchip_setnetinfo+0x78>)
 800213c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	7d9a      	ldrb	r2, [r3, #22]
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <wizchip_setnetinfo+0x7c>)
 8002144:	701a      	strb	r2, [r3, #0]
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200001b8 	.word	0x200001b8
 8002154:	200001bc 	.word	0x200001bc

08002158 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002158:	f7ff fb9e 	bl	8001898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800215c:	480b      	ldr	r0, [pc, #44]	; (800218c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800215e:	490c      	ldr	r1, [pc, #48]	; (8002190 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002160:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002164:	e002      	b.n	800216c <LoopCopyDataInit>

08002166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216a:	3304      	adds	r3, #4

0800216c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800216c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002170:	d3f9      	bcc.n	8002166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002172:	4a09      	ldr	r2, [pc, #36]	; (8002198 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002174:	4c09      	ldr	r4, [pc, #36]	; (800219c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002178:	e001      	b.n	800217e <LoopFillZerobss>

0800217a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800217c:	3204      	adds	r2, #4

0800217e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002180:	d3fb      	bcc.n	800217a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002182:	f002 fe9f 	bl	8004ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002186:	f7fe fe43 	bl	8000e10 <main>
  bx lr
 800218a:	4770      	bx	lr
  ldr r0, =_sdata
 800218c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002190:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002194:	08005de8 	.word	0x08005de8
  ldr r2, =_sbss
 8002198:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800219c:	200001d4 	.word	0x200001d4

080021a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021a0:	e7fe      	b.n	80021a0 <ADC1_2_IRQHandler>
	...

080021a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <HAL_Init+0x28>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a07      	ldr	r2, [pc, #28]	; (80021cc <HAL_Init+0x28>)
 80021ae:	f043 0310 	orr.w	r3, r3, #16
 80021b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b4:	2003      	movs	r0, #3
 80021b6:	f000 f947 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ba:	200f      	movs	r0, #15
 80021bc:	f000 f808 	bl	80021d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c0:	f7ff fa4e 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40022000 	.word	0x40022000

080021d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_InitTick+0x54>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_InitTick+0x58>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f95f 	bl	80024b2 <HAL_SYSTICK_Config>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00e      	b.n	800221c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b0f      	cmp	r3, #15
 8002202:	d80a      	bhi.n	800221a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002204:	2200      	movs	r2, #0
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f000 f927 	bl	800245e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002210:	4a06      	ldr	r2, [pc, #24]	; (800222c <HAL_InitTick+0x5c>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e000      	b.n	800221c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000004 	.word	0x20000004
 8002228:	20000038 	.word	0x20000038
 800222c:	20000034 	.word	0x20000034

08002230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_IncTick+0x1c>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_IncTick+0x20>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4413      	add	r3, r2
 8002240:	4a03      	ldr	r2, [pc, #12]	; (8002250 <HAL_IncTick+0x20>)
 8002242:	6013      	str	r3, [r2, #0]
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	20000038 	.word	0x20000038
 8002250:	200001c0 	.word	0x200001c0

08002254 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return uwTick;
 8002258:	4b02      	ldr	r3, [pc, #8]	; (8002264 <HAL_GetTick+0x10>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	200001c0 	.word	0x200001c0

08002268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff fff0 	bl	8002254 <HAL_GetTick>
 8002274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d005      	beq.n	800228e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_Delay+0x44>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800228e:	bf00      	nop
 8002290:	f7ff ffe0 	bl	8002254 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	429a      	cmp	r2, r3
 800229e:	d8f7      	bhi.n	8002290 <HAL_Delay+0x28>
  {
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000038 	.word	0x20000038

080022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db0b      	blt.n	800233e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4906      	ldr	r1, [pc, #24]	; (8002348 <__NVIC_EnableIRQ+0x34>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2001      	movs	r0, #1
 8002336:	fa00 f202 	lsl.w	r2, r0, r2
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	e000e100 	.word	0xe000e100

0800234c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	2b00      	cmp	r3, #0
 800235e:	db0a      	blt.n	8002376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	490c      	ldr	r1, [pc, #48]	; (8002398 <__NVIC_SetPriority+0x4c>)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	0112      	lsls	r2, r2, #4
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	440b      	add	r3, r1
 8002370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002374:	e00a      	b.n	800238c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4908      	ldr	r1, [pc, #32]	; (800239c <__NVIC_SetPriority+0x50>)
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	3b04      	subs	r3, #4
 8002384:	0112      	lsls	r2, r2, #4
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	440b      	add	r3, r1
 800238a:	761a      	strb	r2, [r3, #24]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000e100 	.word	0xe000e100
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f1c3 0307 	rsb	r3, r3, #7
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	bf28      	it	cs
 80023be:	2304      	movcs	r3, #4
 80023c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d902      	bls.n	80023d0 <NVIC_EncodePriority+0x30>
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3b03      	subs	r3, #3
 80023ce:	e000      	b.n	80023d2 <NVIC_EncodePriority+0x32>
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	401a      	ands	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	43d9      	mvns	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	4313      	orrs	r3, r2
         );
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002414:	d301      	bcc.n	800241a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002416:	2301      	movs	r3, #1
 8002418:	e00f      	b.n	800243a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <SysTick_Config+0x40>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002422:	210f      	movs	r1, #15
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f7ff ff90 	bl	800234c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <SysTick_Config+0x40>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <SysTick_Config+0x40>)
 8002434:	2207      	movs	r2, #7
 8002436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	e000e010 	.word	0xe000e010

08002448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ff2d 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002470:	f7ff ff42 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 8002474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f7ff ff90 	bl	80023a0 <NVIC_EncodePriority>
 8002480:	4602      	mov	r2, r0
 8002482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff5f 	bl	800234c <__NVIC_SetPriority>
}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff35 	bl	8002314 <__NVIC_EnableIRQ>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ffa2 	bl	8002404 <SysTick_Config>
 80024c0:	4603      	mov	r3, r0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d005      	beq.n	80024f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2204      	movs	r2, #4
 80024e8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
 80024ee:	e051      	b.n	8002594 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 020e 	bic.w	r2, r2, #14
 80024fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a22      	ldr	r2, [pc, #136]	; (80025a0 <HAL_DMA_Abort_IT+0xd4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d029      	beq.n	800256e <HAL_DMA_Abort_IT+0xa2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a21      	ldr	r2, [pc, #132]	; (80025a4 <HAL_DMA_Abort_IT+0xd8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d022      	beq.n	800256a <HAL_DMA_Abort_IT+0x9e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a1f      	ldr	r2, [pc, #124]	; (80025a8 <HAL_DMA_Abort_IT+0xdc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01a      	beq.n	8002564 <HAL_DMA_Abort_IT+0x98>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a1e      	ldr	r2, [pc, #120]	; (80025ac <HAL_DMA_Abort_IT+0xe0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d012      	beq.n	800255e <HAL_DMA_Abort_IT+0x92>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1c      	ldr	r2, [pc, #112]	; (80025b0 <HAL_DMA_Abort_IT+0xe4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00a      	beq.n	8002558 <HAL_DMA_Abort_IT+0x8c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1b      	ldr	r2, [pc, #108]	; (80025b4 <HAL_DMA_Abort_IT+0xe8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d102      	bne.n	8002552 <HAL_DMA_Abort_IT+0x86>
 800254c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002550:	e00e      	b.n	8002570 <HAL_DMA_Abort_IT+0xa4>
 8002552:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002556:	e00b      	b.n	8002570 <HAL_DMA_Abort_IT+0xa4>
 8002558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800255c:	e008      	b.n	8002570 <HAL_DMA_Abort_IT+0xa4>
 800255e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002562:	e005      	b.n	8002570 <HAL_DMA_Abort_IT+0xa4>
 8002564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002568:	e002      	b.n	8002570 <HAL_DMA_Abort_IT+0xa4>
 800256a:	2310      	movs	r3, #16
 800256c:	e000      	b.n	8002570 <HAL_DMA_Abort_IT+0xa4>
 800256e:	2301      	movs	r3, #1
 8002570:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <HAL_DMA_Abort_IT+0xec>)
 8002572:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
    } 
  }
  return status;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40020008 	.word	0x40020008
 80025a4:	4002001c 	.word	0x4002001c
 80025a8:	40020030 	.word	0x40020030
 80025ac:	40020044 	.word	0x40020044
 80025b0:	40020058 	.word	0x40020058
 80025b4:	4002006c 	.word	0x4002006c
 80025b8:	40020000 	.word	0x40020000

080025bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025bc:	b480      	push	{r7}
 80025be:	b08b      	sub	sp, #44	; 0x2c
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025c6:	2300      	movs	r3, #0
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ce:	e169      	b.n	80028a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025d0:	2201      	movs	r2, #1
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	f040 8158 	bne.w	800289e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4a9a      	ldr	r2, [pc, #616]	; (800285c <HAL_GPIO_Init+0x2a0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d05e      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
 80025f8:	4a98      	ldr	r2, [pc, #608]	; (800285c <HAL_GPIO_Init+0x2a0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d875      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 80025fe:	4a98      	ldr	r2, [pc, #608]	; (8002860 <HAL_GPIO_Init+0x2a4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d058      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
 8002604:	4a96      	ldr	r2, [pc, #600]	; (8002860 <HAL_GPIO_Init+0x2a4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d86f      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 800260a:	4a96      	ldr	r2, [pc, #600]	; (8002864 <HAL_GPIO_Init+0x2a8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d052      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
 8002610:	4a94      	ldr	r2, [pc, #592]	; (8002864 <HAL_GPIO_Init+0x2a8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d869      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 8002616:	4a94      	ldr	r2, [pc, #592]	; (8002868 <HAL_GPIO_Init+0x2ac>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d04c      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
 800261c:	4a92      	ldr	r2, [pc, #584]	; (8002868 <HAL_GPIO_Init+0x2ac>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d863      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 8002622:	4a92      	ldr	r2, [pc, #584]	; (800286c <HAL_GPIO_Init+0x2b0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d046      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
 8002628:	4a90      	ldr	r2, [pc, #576]	; (800286c <HAL_GPIO_Init+0x2b0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d85d      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 800262e:	2b12      	cmp	r3, #18
 8002630:	d82a      	bhi.n	8002688 <HAL_GPIO_Init+0xcc>
 8002632:	2b12      	cmp	r3, #18
 8002634:	d859      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 8002636:	a201      	add	r2, pc, #4	; (adr r2, 800263c <HAL_GPIO_Init+0x80>)
 8002638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263c:	080026b7 	.word	0x080026b7
 8002640:	08002691 	.word	0x08002691
 8002644:	080026a3 	.word	0x080026a3
 8002648:	080026e5 	.word	0x080026e5
 800264c:	080026eb 	.word	0x080026eb
 8002650:	080026eb 	.word	0x080026eb
 8002654:	080026eb 	.word	0x080026eb
 8002658:	080026eb 	.word	0x080026eb
 800265c:	080026eb 	.word	0x080026eb
 8002660:	080026eb 	.word	0x080026eb
 8002664:	080026eb 	.word	0x080026eb
 8002668:	080026eb 	.word	0x080026eb
 800266c:	080026eb 	.word	0x080026eb
 8002670:	080026eb 	.word	0x080026eb
 8002674:	080026eb 	.word	0x080026eb
 8002678:	080026eb 	.word	0x080026eb
 800267c:	080026eb 	.word	0x080026eb
 8002680:	08002699 	.word	0x08002699
 8002684:	080026ad 	.word	0x080026ad
 8002688:	4a79      	ldr	r2, [pc, #484]	; (8002870 <HAL_GPIO_Init+0x2b4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d013      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800268e:	e02c      	b.n	80026ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	623b      	str	r3, [r7, #32]
          break;
 8002696:	e029      	b.n	80026ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	3304      	adds	r3, #4
 800269e:	623b      	str	r3, [r7, #32]
          break;
 80026a0:	e024      	b.n	80026ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	3308      	adds	r3, #8
 80026a8:	623b      	str	r3, [r7, #32]
          break;
 80026aa:	e01f      	b.n	80026ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	330c      	adds	r3, #12
 80026b2:	623b      	str	r3, [r7, #32]
          break;
 80026b4:	e01a      	b.n	80026ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d102      	bne.n	80026c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026be:	2304      	movs	r3, #4
 80026c0:	623b      	str	r3, [r7, #32]
          break;
 80026c2:	e013      	b.n	80026ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d105      	bne.n	80026d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026cc:	2308      	movs	r3, #8
 80026ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	611a      	str	r2, [r3, #16]
          break;
 80026d6:	e009      	b.n	80026ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026d8:	2308      	movs	r3, #8
 80026da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	615a      	str	r2, [r3, #20]
          break;
 80026e2:	e003      	b.n	80026ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026e4:	2300      	movs	r3, #0
 80026e6:	623b      	str	r3, [r7, #32]
          break;
 80026e8:	e000      	b.n	80026ec <HAL_GPIO_Init+0x130>
          break;
 80026ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2bff      	cmp	r3, #255	; 0xff
 80026f0:	d801      	bhi.n	80026f6 <HAL_GPIO_Init+0x13a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	e001      	b.n	80026fa <HAL_GPIO_Init+0x13e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3304      	adds	r3, #4
 80026fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2bff      	cmp	r3, #255	; 0xff
 8002700:	d802      	bhi.n	8002708 <HAL_GPIO_Init+0x14c>
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	e002      	b.n	800270e <HAL_GPIO_Init+0x152>
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	3b08      	subs	r3, #8
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	210f      	movs	r1, #15
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	fa01 f303 	lsl.w	r3, r1, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	401a      	ands	r2, r3
 8002720:	6a39      	ldr	r1, [r7, #32]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	fa01 f303 	lsl.w	r3, r1, r3
 8002728:	431a      	orrs	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 80b1 	beq.w	800289e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800273c:	4b4d      	ldr	r3, [pc, #308]	; (8002874 <HAL_GPIO_Init+0x2b8>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	4a4c      	ldr	r2, [pc, #304]	; (8002874 <HAL_GPIO_Init+0x2b8>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6193      	str	r3, [r2, #24]
 8002748:	4b4a      	ldr	r3, [pc, #296]	; (8002874 <HAL_GPIO_Init+0x2b8>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002754:	4a48      	ldr	r2, [pc, #288]	; (8002878 <HAL_GPIO_Init+0x2bc>)
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	089b      	lsrs	r3, r3, #2
 800275a:	3302      	adds	r3, #2
 800275c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002760:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	220f      	movs	r2, #15
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4013      	ands	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a40      	ldr	r2, [pc, #256]	; (800287c <HAL_GPIO_Init+0x2c0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d013      	beq.n	80027a8 <HAL_GPIO_Init+0x1ec>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a3f      	ldr	r2, [pc, #252]	; (8002880 <HAL_GPIO_Init+0x2c4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d00d      	beq.n	80027a4 <HAL_GPIO_Init+0x1e8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a3e      	ldr	r2, [pc, #248]	; (8002884 <HAL_GPIO_Init+0x2c8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d007      	beq.n	80027a0 <HAL_GPIO_Init+0x1e4>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a3d      	ldr	r2, [pc, #244]	; (8002888 <HAL_GPIO_Init+0x2cc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d101      	bne.n	800279c <HAL_GPIO_Init+0x1e0>
 8002798:	2303      	movs	r3, #3
 800279a:	e006      	b.n	80027aa <HAL_GPIO_Init+0x1ee>
 800279c:	2304      	movs	r3, #4
 800279e:	e004      	b.n	80027aa <HAL_GPIO_Init+0x1ee>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e002      	b.n	80027aa <HAL_GPIO_Init+0x1ee>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_GPIO_Init+0x1ee>
 80027a8:	2300      	movs	r3, #0
 80027aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ac:	f002 0203 	and.w	r2, r2, #3
 80027b0:	0092      	lsls	r2, r2, #2
 80027b2:	4093      	lsls	r3, r2
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027ba:	492f      	ldr	r1, [pc, #188]	; (8002878 <HAL_GPIO_Init+0x2bc>)
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d006      	beq.n	80027e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027d4:	4b2d      	ldr	r3, [pc, #180]	; (800288c <HAL_GPIO_Init+0x2d0>)
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	492c      	ldr	r1, [pc, #176]	; (800288c <HAL_GPIO_Init+0x2d0>)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]
 80027e0:	e006      	b.n	80027f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027e2:	4b2a      	ldr	r3, [pc, #168]	; (800288c <HAL_GPIO_Init+0x2d0>)
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	4928      	ldr	r1, [pc, #160]	; (800288c <HAL_GPIO_Init+0x2d0>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d006      	beq.n	800280a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027fc:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_GPIO_Init+0x2d0>)
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	4922      	ldr	r1, [pc, #136]	; (800288c <HAL_GPIO_Init+0x2d0>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	60cb      	str	r3, [r1, #12]
 8002808:	e006      	b.n	8002818 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_GPIO_Init+0x2d0>)
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	43db      	mvns	r3, r3
 8002812:	491e      	ldr	r1, [pc, #120]	; (800288c <HAL_GPIO_Init+0x2d0>)
 8002814:	4013      	ands	r3, r2
 8002816:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d006      	beq.n	8002832 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_GPIO_Init+0x2d0>)
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	4918      	ldr	r1, [pc, #96]	; (800288c <HAL_GPIO_Init+0x2d0>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002832:	4b16      	ldr	r3, [pc, #88]	; (800288c <HAL_GPIO_Init+0x2d0>)
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	43db      	mvns	r3, r3
 800283a:	4914      	ldr	r1, [pc, #80]	; (800288c <HAL_GPIO_Init+0x2d0>)
 800283c:	4013      	ands	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d021      	beq.n	8002890 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_GPIO_Init+0x2d0>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	490e      	ldr	r1, [pc, #56]	; (800288c <HAL_GPIO_Init+0x2d0>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]
 8002858:	e021      	b.n	800289e <HAL_GPIO_Init+0x2e2>
 800285a:	bf00      	nop
 800285c:	10320000 	.word	0x10320000
 8002860:	10310000 	.word	0x10310000
 8002864:	10220000 	.word	0x10220000
 8002868:	10210000 	.word	0x10210000
 800286c:	10120000 	.word	0x10120000
 8002870:	10110000 	.word	0x10110000
 8002874:	40021000 	.word	0x40021000
 8002878:	40010000 	.word	0x40010000
 800287c:	40010800 	.word	0x40010800
 8002880:	40010c00 	.word	0x40010c00
 8002884:	40011000 	.word	0x40011000
 8002888:	40011400 	.word	0x40011400
 800288c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_GPIO_Init+0x304>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	43db      	mvns	r3, r3
 8002898:	4909      	ldr	r1, [pc, #36]	; (80028c0 <HAL_GPIO_Init+0x304>)
 800289a:	4013      	ands	r3, r2
 800289c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	3301      	adds	r3, #1
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f47f ae8e 	bne.w	80025d0 <HAL_GPIO_Init+0x14>
  }
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop
 80028b8:	372c      	adds	r7, #44	; 0x2c
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	40010400 	.word	0x40010400

080028c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
 80028d0:	4613      	mov	r3, r2
 80028d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028d4:	787b      	ldrb	r3, [r7, #1]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028e0:	e003      	b.n	80028ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028e2:	887b      	ldrh	r3, [r7, #2]
 80028e4:	041a      	lsls	r2, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	611a      	str	r2, [r3, #16]
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e12b      	b.n	8002b5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe fec2 	bl	80016a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2224      	movs	r2, #36	; 0x24
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002946:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002956:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002958:	f001 fbf0 	bl	800413c <HAL_RCC_GetPCLK1Freq>
 800295c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	4a81      	ldr	r2, [pc, #516]	; (8002b68 <HAL_I2C_Init+0x274>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d807      	bhi.n	8002978 <HAL_I2C_Init+0x84>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4a80      	ldr	r2, [pc, #512]	; (8002b6c <HAL_I2C_Init+0x278>)
 800296c:	4293      	cmp	r3, r2
 800296e:	bf94      	ite	ls
 8002970:	2301      	movls	r3, #1
 8002972:	2300      	movhi	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	e006      	b.n	8002986 <HAL_I2C_Init+0x92>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4a7d      	ldr	r2, [pc, #500]	; (8002b70 <HAL_I2C_Init+0x27c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	bf94      	ite	ls
 8002980:	2301      	movls	r3, #1
 8002982:	2300      	movhi	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e0e7      	b.n	8002b5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4a78      	ldr	r2, [pc, #480]	; (8002b74 <HAL_I2C_Init+0x280>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	0c9b      	lsrs	r3, r3, #18
 8002998:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4a6a      	ldr	r2, [pc, #424]	; (8002b68 <HAL_I2C_Init+0x274>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d802      	bhi.n	80029c8 <HAL_I2C_Init+0xd4>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	3301      	adds	r3, #1
 80029c6:	e009      	b.n	80029dc <HAL_I2C_Init+0xe8>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	4a69      	ldr	r2, [pc, #420]	; (8002b78 <HAL_I2C_Init+0x284>)
 80029d4:	fba2 2303 	umull	r2, r3, r2, r3
 80029d8:	099b      	lsrs	r3, r3, #6
 80029da:	3301      	adds	r3, #1
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	495c      	ldr	r1, [pc, #368]	; (8002b68 <HAL_I2C_Init+0x274>)
 80029f8:	428b      	cmp	r3, r1
 80029fa:	d819      	bhi.n	8002a30 <HAL_I2C_Init+0x13c>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1e59      	subs	r1, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a0a:	1c59      	adds	r1, r3, #1
 8002a0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a10:	400b      	ands	r3, r1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_I2C_Init+0x138>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1e59      	subs	r1, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a24:	3301      	adds	r3, #1
 8002a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a2a:	e051      	b.n	8002ad0 <HAL_I2C_Init+0x1dc>
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	e04f      	b.n	8002ad0 <HAL_I2C_Init+0x1dc>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d111      	bne.n	8002a5c <HAL_I2C_Init+0x168>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e58      	subs	r0, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	440b      	add	r3, r1
 8002a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	e012      	b.n	8002a82 <HAL_I2C_Init+0x18e>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1e58      	subs	r0, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	0099      	lsls	r1, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bf0c      	ite	eq
 8002a7c:	2301      	moveq	r3, #1
 8002a7e:	2300      	movne	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_I2C_Init+0x196>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e022      	b.n	8002ad0 <HAL_I2C_Init+0x1dc>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10e      	bne.n	8002ab0 <HAL_I2C_Init+0x1bc>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1e58      	subs	r0, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6859      	ldr	r1, [r3, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	440b      	add	r3, r1
 8002aa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aae:	e00f      	b.n	8002ad0 <HAL_I2C_Init+0x1dc>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1e58      	subs	r0, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	0099      	lsls	r1, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002acc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	6809      	ldr	r1, [r1, #0]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69da      	ldr	r2, [r3, #28]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002afe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6911      	ldr	r1, [r2, #16]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68d2      	ldr	r2, [r2, #12]
 8002b0a:	4311      	orrs	r1, r2
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	430b      	orrs	r3, r1
 8002b12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	000186a0 	.word	0x000186a0
 8002b6c:	001e847f 	.word	0x001e847f
 8002b70:	003d08ff 	.word	0x003d08ff
 8002b74:	431bde83 	.word	0x431bde83
 8002b78:	10624dd3 	.word	0x10624dd3

08002b7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	4608      	mov	r0, r1
 8002b86:	4611      	mov	r1, r2
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	817b      	strh	r3, [r7, #10]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	813b      	strh	r3, [r7, #8]
 8002b92:	4613      	mov	r3, r2
 8002b94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b96:	f7ff fb5d 	bl	8002254 <HAL_GetTick>
 8002b9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	f040 80d9 	bne.w	8002d5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	2319      	movs	r3, #25
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	496d      	ldr	r1, [pc, #436]	; (8002d68 <HAL_I2C_Mem_Write+0x1ec>)
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fcc1 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e0cc      	b.n	8002d5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_I2C_Mem_Write+0x56>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e0c5      	b.n	8002d5e <HAL_I2C_Mem_Write+0x1e2>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d007      	beq.n	8002bf8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2221      	movs	r2, #33	; 0x21
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2240      	movs	r2, #64	; 0x40
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a3a      	ldr	r2, [r7, #32]
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4a4d      	ldr	r2, [pc, #308]	; (8002d6c <HAL_I2C_Mem_Write+0x1f0>)
 8002c38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c3a:	88f8      	ldrh	r0, [r7, #6]
 8002c3c:	893a      	ldrh	r2, [r7, #8]
 8002c3e:	8979      	ldrh	r1, [r7, #10]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	4603      	mov	r3, r0
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 faf8 	bl	8003240 <I2C_RequestMemoryWrite>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d052      	beq.n	8002cfc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e081      	b.n	8002d5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fd86 	bl	8003770 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00d      	beq.n	8002c86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d107      	bne.n	8002c82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e06b      	b.n	8002d5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d11b      	bne.n	8002cfc <HAL_I2C_Mem_Write+0x180>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d017      	beq.n	8002cfc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	781a      	ldrb	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1aa      	bne.n	8002c5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fd79 	bl	8003800 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00d      	beq.n	8002d30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d107      	bne.n	8002d2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e016      	b.n	8002d5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e000      	b.n	8002d5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
  }
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	00100002 	.word	0x00100002
 8002d6c:	ffff0000 	.word	0xffff0000

08002d70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08c      	sub	sp, #48	; 0x30
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	4608      	mov	r0, r1
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	817b      	strh	r3, [r7, #10]
 8002d82:	460b      	mov	r3, r1
 8002d84:	813b      	strh	r3, [r7, #8]
 8002d86:	4613      	mov	r3, r2
 8002d88:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d8e:	f7ff fa61 	bl	8002254 <HAL_GetTick>
 8002d92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	f040 8244 	bne.w	800322a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2319      	movs	r3, #25
 8002da8:	2201      	movs	r2, #1
 8002daa:	4982      	ldr	r1, [pc, #520]	; (8002fb4 <HAL_I2C_Mem_Read+0x244>)
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 fbc5 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
 8002dba:	e237      	b.n	800322c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_I2C_Mem_Read+0x5a>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e230      	b.n	800322c <HAL_I2C_Mem_Read+0x4bc>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d007      	beq.n	8002df0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2222      	movs	r2, #34	; 0x22
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2240      	movs	r2, #64	; 0x40
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a62      	ldr	r2, [pc, #392]	; (8002fb8 <HAL_I2C_Mem_Read+0x248>)
 8002e30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e32:	88f8      	ldrh	r0, [r7, #6]
 8002e34:	893a      	ldrh	r2, [r7, #8]
 8002e36:	8979      	ldrh	r1, [r7, #10]
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	4603      	mov	r3, r0
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fa92 	bl	800336c <I2C_RequestMemoryRead>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e1ec      	b.n	800322c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d113      	bne.n	8002e82 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	61fb      	str	r3, [r7, #28]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	e1c0      	b.n	8003204 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d11e      	bne.n	8002ec8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e9a:	b672      	cpsid	i
}
 8002e9c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ec4:	b662      	cpsie	i
}
 8002ec6:	e035      	b.n	8002f34 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d11e      	bne.n	8002f0e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ede:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee0:	b672      	cpsid	i
}
 8002ee2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f0a:	b662      	cpsie	i
}
 8002f0c:	e012      	b.n	8002f34 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f1c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f34:	e166      	b.n	8003204 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	f200 811f 	bhi.w	800317e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d123      	bne.n	8002f90 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fc9f 	bl	8003890 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e167      	b.n	800322c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f8e:	e139      	b.n	8003204 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d152      	bne.n	800303e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	4906      	ldr	r1, [pc, #24]	; (8002fbc <HAL_I2C_Mem_Read+0x24c>)
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 faca 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d008      	beq.n	8002fc0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e13c      	b.n	800322c <HAL_I2C_Mem_Read+0x4bc>
 8002fb2:	bf00      	nop
 8002fb4:	00100002 	.word	0x00100002
 8002fb8:	ffff0000 	.word	0xffff0000
 8002fbc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002fc0:	b672      	cpsid	i
}
 8002fc2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003006:	b662      	cpsie	i
}
 8003008:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800303c:	e0e2      	b.n	8003204 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003044:	2200      	movs	r2, #0
 8003046:	497b      	ldr	r1, [pc, #492]	; (8003234 <HAL_I2C_Mem_Read+0x4c4>)
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fa77 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0e9      	b.n	800322c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003066:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003068:	b672      	cpsid	i
}
 800306a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800309e:	4b66      	ldr	r3, [pc, #408]	; (8003238 <HAL_I2C_Mem_Read+0x4c8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	08db      	lsrs	r3, r3, #3
 80030a4:	4a65      	ldr	r2, [pc, #404]	; (800323c <HAL_I2C_Mem_Read+0x4cc>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	0a1a      	lsrs	r2, r3, #8
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00da      	lsls	r2, r3, #3
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d118      	bne.n	80030f6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f043 0220 	orr.w	r2, r3, #32
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80030e6:	b662      	cpsie	i
}
 80030e8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e09a      	b.n	800322c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b04      	cmp	r3, #4
 8003102:	d1d9      	bne.n	80030b8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003112:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691a      	ldr	r2, [r3, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003146:	b662      	cpsie	i
}
 8003148:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800317c:	e042      	b.n	8003204 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003180:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fb84 	bl	8003890 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e04c      	b.n	800322c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d118      	bne.n	8003204 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	2b00      	cmp	r3, #0
 800320a:	f47f ae94 	bne.w	8002f36 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	e000      	b.n	800322c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800322a:	2302      	movs	r3, #2
  }
}
 800322c:	4618      	mov	r0, r3
 800322e:	3728      	adds	r7, #40	; 0x28
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	00010004 	.word	0x00010004
 8003238:	20000004 	.word	0x20000004
 800323c:	14f8b589 	.word	0x14f8b589

08003240 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	4608      	mov	r0, r1
 800324a:	4611      	mov	r1, r2
 800324c:	461a      	mov	r2, r3
 800324e:	4603      	mov	r3, r0
 8003250:	817b      	strh	r3, [r7, #10]
 8003252:	460b      	mov	r3, r1
 8003254:	813b      	strh	r3, [r7, #8]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003268:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	2200      	movs	r2, #0
 8003272:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f960 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003290:	d103      	bne.n	800329a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003298:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e05f      	b.n	800335e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800329e:	897b      	ldrh	r3, [r7, #10]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	461a      	mov	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	6a3a      	ldr	r2, [r7, #32]
 80032b2:	492d      	ldr	r1, [pc, #180]	; (8003368 <I2C_RequestMemoryWrite+0x128>)
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f9bb 	bl	8003630 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e04c      	b.n	800335e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032dc:	6a39      	ldr	r1, [r7, #32]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fa46 	bl	8003770 <I2C_WaitOnTXEFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00d      	beq.n	8003306 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d107      	bne.n	8003302 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003300:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e02b      	b.n	800335e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d105      	bne.n	8003318 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800330c:	893b      	ldrh	r3, [r7, #8]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	611a      	str	r2, [r3, #16]
 8003316:	e021      	b.n	800335c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003318:	893b      	ldrh	r3, [r7, #8]
 800331a:	0a1b      	lsrs	r3, r3, #8
 800331c:	b29b      	uxth	r3, r3
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003328:	6a39      	ldr	r1, [r7, #32]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fa20 	bl	8003770 <I2C_WaitOnTXEFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	2b04      	cmp	r3, #4
 800333c:	d107      	bne.n	800334e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800334c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e005      	b.n	800335e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003352:	893b      	ldrh	r3, [r7, #8]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	00010002 	.word	0x00010002

0800336c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af02      	add	r7, sp, #8
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	4608      	mov	r0, r1
 8003376:	4611      	mov	r1, r2
 8003378:	461a      	mov	r2, r3
 800337a:	4603      	mov	r3, r0
 800337c:	817b      	strh	r3, [r7, #10]
 800337e:	460b      	mov	r3, r1
 8003380:	813b      	strh	r3, [r7, #8]
 8003382:	4613      	mov	r3, r2
 8003384:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003394:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f8c2 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00d      	beq.n	80033da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033cc:	d103      	bne.n	80033d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e0aa      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033da:	897b      	ldrh	r3, [r7, #10]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	6a3a      	ldr	r2, [r7, #32]
 80033ee:	4952      	ldr	r1, [pc, #328]	; (8003538 <I2C_RequestMemoryRead+0x1cc>)
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f91d 	bl	8003630 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e097      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003418:	6a39      	ldr	r1, [r7, #32]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f9a8 	bl	8003770 <I2C_WaitOnTXEFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	2b04      	cmp	r3, #4
 800342c:	d107      	bne.n	800343e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e076      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d105      	bne.n	8003454 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003448:	893b      	ldrh	r3, [r7, #8]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	611a      	str	r2, [r3, #16]
 8003452:	e021      	b.n	8003498 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003454:	893b      	ldrh	r3, [r7, #8]
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	b29b      	uxth	r3, r3
 800345a:	b2da      	uxtb	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003464:	6a39      	ldr	r1, [r7, #32]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f982 	bl	8003770 <I2C_WaitOnTXEFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00d      	beq.n	800348e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	2b04      	cmp	r3, #4
 8003478:	d107      	bne.n	800348a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003488:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e050      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800348e:	893b      	ldrh	r3, [r7, #8]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349a:	6a39      	ldr	r1, [r7, #32]
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f967 	bl	8003770 <I2C_WaitOnTXEFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00d      	beq.n	80034c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d107      	bne.n	80034c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e035      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	2200      	movs	r2, #0
 80034dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f82b 	bl	800353c <I2C_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00d      	beq.n	8003508 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034fa:	d103      	bne.n	8003504 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e013      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003508:	897b      	ldrh	r3, [r7, #10]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	b2da      	uxtb	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	6a3a      	ldr	r2, [r7, #32]
 800351c:	4906      	ldr	r1, [pc, #24]	; (8003538 <I2C_RequestMemoryRead+0x1cc>)
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f886 	bl	8003630 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	00010002 	.word	0x00010002

0800353c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800354c:	e048      	b.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d044      	beq.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003556:	f7fe fe7d 	bl	8002254 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d302      	bcc.n	800356c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d139      	bne.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	0c1b      	lsrs	r3, r3, #16
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d10d      	bne.n	8003592 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	43da      	mvns	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	e00c      	b.n	80035ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	43da      	mvns	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4013      	ands	r3, r2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d116      	bne.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f043 0220 	orr.w	r2, r3, #32
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e023      	b.n	8003628 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	0c1b      	lsrs	r3, r3, #16
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d10d      	bne.n	8003606 <I2C_WaitOnFlagUntilTimeout+0xca>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	43da      	mvns	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4013      	ands	r3, r2
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	e00c      	b.n	8003620 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	43da      	mvns	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	4013      	ands	r3, r2
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	429a      	cmp	r2, r3
 8003624:	d093      	beq.n	800354e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800363e:	e071      	b.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364e:	d123      	bne.n	8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003668:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	f043 0204 	orr.w	r2, r3, #4
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e067      	b.n	8003768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369e:	d041      	beq.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a0:	f7fe fdd8 	bl	8002254 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d302      	bcc.n	80036b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d136      	bne.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	0c1b      	lsrs	r3, r3, #16
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d10c      	bne.n	80036da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	43da      	mvns	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4013      	ands	r3, r2
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bf14      	ite	ne
 80036d2:	2301      	movne	r3, #1
 80036d4:	2300      	moveq	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	e00b      	b.n	80036f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	43da      	mvns	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4013      	ands	r3, r2
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf14      	ite	ne
 80036ec:	2301      	movne	r3, #1
 80036ee:	2300      	moveq	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d016      	beq.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	f043 0220 	orr.w	r2, r3, #32
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e021      	b.n	8003768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	0c1b      	lsrs	r3, r3, #16
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b01      	cmp	r3, #1
 800372c:	d10c      	bne.n	8003748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	43da      	mvns	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4013      	ands	r3, r2
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e00b      	b.n	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	43da      	mvns	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4013      	ands	r3, r2
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	bf14      	ite	ne
 800375a:	2301      	movne	r3, #1
 800375c:	2300      	moveq	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	f47f af6d 	bne.w	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800377c:	e034      	b.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f8e3 	bl	800394a <I2C_IsAcknowledgeFailed>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e034      	b.n	80037f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d028      	beq.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003796:	f7fe fd5d 	bl	8002254 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d11d      	bne.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b6:	2b80      	cmp	r3, #128	; 0x80
 80037b8:	d016      	beq.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e007      	b.n	80037f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f2:	2b80      	cmp	r3, #128	; 0x80
 80037f4:	d1c3      	bne.n	800377e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800380c:	e034      	b.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f89b 	bl	800394a <I2C_IsAcknowledgeFailed>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e034      	b.n	8003888 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d028      	beq.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003826:	f7fe fd15 	bl	8002254 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	429a      	cmp	r2, r3
 8003834:	d302      	bcc.n	800383c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d11d      	bne.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b04      	cmp	r3, #4
 8003848:	d016      	beq.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	f043 0220 	orr.w	r2, r3, #32
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e007      	b.n	8003888 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b04      	cmp	r3, #4
 8003884:	d1c3      	bne.n	800380e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800389c:	e049      	b.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d119      	bne.n	80038e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0210 	mvn.w	r2, #16
 80038b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e030      	b.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e0:	f7fe fcb8 	bl	8002254 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d302      	bcc.n	80038f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d11d      	bne.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d016      	beq.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f043 0220 	orr.w	r2, r3, #32
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e007      	b.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b40      	cmp	r3, #64	; 0x40
 800393e:	d1ae      	bne.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003960:	d11b      	bne.n	800399a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800396a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f043 0204 	orr.w	r2, r3, #4
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
	...

080039a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e272      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 8087 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039c8:	4b92      	ldr	r3, [pc, #584]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 030c 	and.w	r3, r3, #12
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d00c      	beq.n	80039ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039d4:	4b8f      	ldr	r3, [pc, #572]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 030c 	and.w	r3, r3, #12
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d112      	bne.n	8003a06 <HAL_RCC_OscConfig+0x5e>
 80039e0:	4b8c      	ldr	r3, [pc, #560]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ec:	d10b      	bne.n	8003a06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ee:	4b89      	ldr	r3, [pc, #548]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d06c      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x12c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d168      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e24c      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0e:	d106      	bne.n	8003a1e <HAL_RCC_OscConfig+0x76>
 8003a10:	4b80      	ldr	r3, [pc, #512]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a7f      	ldr	r2, [pc, #508]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	e02e      	b.n	8003a7c <HAL_RCC_OscConfig+0xd4>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10c      	bne.n	8003a40 <HAL_RCC_OscConfig+0x98>
 8003a26:	4b7b      	ldr	r3, [pc, #492]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a7a      	ldr	r2, [pc, #488]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4b78      	ldr	r3, [pc, #480]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a77      	ldr	r2, [pc, #476]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e01d      	b.n	8003a7c <HAL_RCC_OscConfig+0xd4>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0xbc>
 8003a4a:	4b72      	ldr	r3, [pc, #456]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a71      	ldr	r2, [pc, #452]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b6f      	ldr	r3, [pc, #444]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a6e      	ldr	r2, [pc, #440]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	e00b      	b.n	8003a7c <HAL_RCC_OscConfig+0xd4>
 8003a64:	4b6b      	ldr	r3, [pc, #428]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a6a      	ldr	r2, [pc, #424]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	4b68      	ldr	r3, [pc, #416]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a67      	ldr	r2, [pc, #412]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d013      	beq.n	8003aac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fe fbe6 	bl	8002254 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7fe fbe2 	bl	8002254 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	; 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e200      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	4b5d      	ldr	r3, [pc, #372]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0xe4>
 8003aaa:	e014      	b.n	8003ad6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fe fbd2 	bl	8002254 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab4:	f7fe fbce 	bl	8002254 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e1ec      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac6:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x10c>
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d063      	beq.n	8003baa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ae2:	4b4c      	ldr	r3, [pc, #304]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00b      	beq.n	8003b06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003aee:	4b49      	ldr	r3, [pc, #292]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d11c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x18c>
 8003afa:	4b46      	ldr	r3, [pc, #280]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d116      	bne.n	8003b34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	4b43      	ldr	r3, [pc, #268]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_RCC_OscConfig+0x176>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d001      	beq.n	8003b1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e1c0      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1e:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4939      	ldr	r1, [pc, #228]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b32:	e03a      	b.n	8003baa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b3c:	4b36      	ldr	r3, [pc, #216]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b42:	f7fe fb87 	bl	8002254 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b4a:	f7fe fb83 	bl	8002254 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e1a1      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5c:	4b2d      	ldr	r3, [pc, #180]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b68:	4b2a      	ldr	r3, [pc, #168]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4927      	ldr	r1, [pc, #156]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	600b      	str	r3, [r1, #0]
 8003b7c:	e015      	b.n	8003baa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7e:	4b26      	ldr	r3, [pc, #152]	; (8003c18 <HAL_RCC_OscConfig+0x270>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7fe fb66 	bl	8002254 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b8c:	f7fe fb62 	bl	8002254 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e180      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d03a      	beq.n	8003c2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d019      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bbe:	4b17      	ldr	r3, [pc, #92]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc4:	f7fe fb46 	bl	8002254 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bcc:	f7fe fb42 	bl	8002254 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e160      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bde:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <HAL_RCC_OscConfig+0x26c>)
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bea:	2001      	movs	r0, #1
 8003bec:	f000 faba 	bl	8004164 <RCC_Delay>
 8003bf0:	e01c      	b.n	8003c2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf2:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf8:	f7fe fb2c 	bl	8002254 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bfe:	e00f      	b.n	8003c20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c00:	f7fe fb28 	bl	8002254 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d908      	bls.n	8003c20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e146      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4f8>
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000
 8003c18:	42420000 	.word	0x42420000
 8003c1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c20:	4b92      	ldr	r3, [pc, #584]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e9      	bne.n	8003c00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80a6 	beq.w	8003d86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c3e:	4b8b      	ldr	r3, [pc, #556]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10d      	bne.n	8003c66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4a:	4b88      	ldr	r3, [pc, #544]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	4a87      	ldr	r2, [pc, #540]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c54:	61d3      	str	r3, [r2, #28]
 8003c56:	4b85      	ldr	r3, [pc, #532]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	60bb      	str	r3, [r7, #8]
 8003c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c62:	2301      	movs	r3, #1
 8003c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c66:	4b82      	ldr	r3, [pc, #520]	; (8003e70 <HAL_RCC_OscConfig+0x4c8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d118      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c72:	4b7f      	ldr	r3, [pc, #508]	; (8003e70 <HAL_RCC_OscConfig+0x4c8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a7e      	ldr	r2, [pc, #504]	; (8003e70 <HAL_RCC_OscConfig+0x4c8>)
 8003c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c7e:	f7fe fae9 	bl	8002254 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c86:	f7fe fae5 	bl	8002254 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b64      	cmp	r3, #100	; 0x64
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e103      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c98:	4b75      	ldr	r3, [pc, #468]	; (8003e70 <HAL_RCC_OscConfig+0x4c8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0f0      	beq.n	8003c86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d106      	bne.n	8003cba <HAL_RCC_OscConfig+0x312>
 8003cac:	4b6f      	ldr	r3, [pc, #444]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	4a6e      	ldr	r2, [pc, #440]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	6213      	str	r3, [r2, #32]
 8003cb8:	e02d      	b.n	8003d16 <HAL_RCC_OscConfig+0x36e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10c      	bne.n	8003cdc <HAL_RCC_OscConfig+0x334>
 8003cc2:	4b6a      	ldr	r3, [pc, #424]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	4a69      	ldr	r2, [pc, #420]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	6213      	str	r3, [r2, #32]
 8003cce:	4b67      	ldr	r3, [pc, #412]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	4a66      	ldr	r2, [pc, #408]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003cd4:	f023 0304 	bic.w	r3, r3, #4
 8003cd8:	6213      	str	r3, [r2, #32]
 8003cda:	e01c      	b.n	8003d16 <HAL_RCC_OscConfig+0x36e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b05      	cmp	r3, #5
 8003ce2:	d10c      	bne.n	8003cfe <HAL_RCC_OscConfig+0x356>
 8003ce4:	4b61      	ldr	r3, [pc, #388]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	4a60      	ldr	r2, [pc, #384]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003cea:	f043 0304 	orr.w	r3, r3, #4
 8003cee:	6213      	str	r3, [r2, #32]
 8003cf0:	4b5e      	ldr	r3, [pc, #376]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	4a5d      	ldr	r2, [pc, #372]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	6213      	str	r3, [r2, #32]
 8003cfc:	e00b      	b.n	8003d16 <HAL_RCC_OscConfig+0x36e>
 8003cfe:	4b5b      	ldr	r3, [pc, #364]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	4a5a      	ldr	r2, [pc, #360]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003d04:	f023 0301 	bic.w	r3, r3, #1
 8003d08:	6213      	str	r3, [r2, #32]
 8003d0a:	4b58      	ldr	r3, [pc, #352]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	4a57      	ldr	r2, [pc, #348]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003d10:	f023 0304 	bic.w	r3, r3, #4
 8003d14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d015      	beq.n	8003d4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1e:	f7fe fa99 	bl	8002254 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d24:	e00a      	b.n	8003d3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d26:	f7fe fa95 	bl	8002254 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e0b1      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3c:	4b4b      	ldr	r3, [pc, #300]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0ee      	beq.n	8003d26 <HAL_RCC_OscConfig+0x37e>
 8003d48:	e014      	b.n	8003d74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4a:	f7fe fa83 	bl	8002254 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d50:	e00a      	b.n	8003d68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fe fa7f 	bl	8002254 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e09b      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d68:	4b40      	ldr	r3, [pc, #256]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1ee      	bne.n	8003d52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d105      	bne.n	8003d86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7a:	4b3c      	ldr	r3, [pc, #240]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	4a3b      	ldr	r2, [pc, #236]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8087 	beq.w	8003e9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d90:	4b36      	ldr	r3, [pc, #216]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d061      	beq.n	8003e60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d146      	bne.n	8003e32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da4:	4b33      	ldr	r3, [pc, #204]	; (8003e74 <HAL_RCC_OscConfig+0x4cc>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003daa:	f7fe fa53 	bl	8002254 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db2:	f7fe fa4f 	bl	8002254 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e06d      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc4:	4b29      	ldr	r3, [pc, #164]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f0      	bne.n	8003db2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd8:	d108      	bne.n	8003dec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dda:	4b24      	ldr	r3, [pc, #144]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	4921      	ldr	r1, [pc, #132]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dec:	4b1f      	ldr	r3, [pc, #124]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a19      	ldr	r1, [r3, #32]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	491b      	ldr	r1, [pc, #108]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e04:	4b1b      	ldr	r3, [pc, #108]	; (8003e74 <HAL_RCC_OscConfig+0x4cc>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0a:	f7fe fa23 	bl	8002254 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e12:	f7fe fa1f 	bl	8002254 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e03d      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCC_OscConfig+0x46a>
 8003e30:	e035      	b.n	8003e9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e32:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <HAL_RCC_OscConfig+0x4cc>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e38:	f7fe fa0c 	bl	8002254 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e40:	f7fe fa08 	bl	8002254 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e026      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e52:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <HAL_RCC_OscConfig+0x4c4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0x498>
 8003e5e:	e01e      	b.n	8003e9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d107      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e019      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4f8>
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40007000 	.word	0x40007000
 8003e74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_RCC_OscConfig+0x500>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d106      	bne.n	8003e9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d001      	beq.n	8003e9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40021000 	.word	0x40021000

08003eac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0d0      	b.n	8004062 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec0:	4b6a      	ldr	r3, [pc, #424]	; (800406c <HAL_RCC_ClockConfig+0x1c0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d910      	bls.n	8003ef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ece:	4b67      	ldr	r3, [pc, #412]	; (800406c <HAL_RCC_ClockConfig+0x1c0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 0207 	bic.w	r2, r3, #7
 8003ed6:	4965      	ldr	r1, [pc, #404]	; (800406c <HAL_RCC_ClockConfig+0x1c0>)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ede:	4b63      	ldr	r3, [pc, #396]	; (800406c <HAL_RCC_ClockConfig+0x1c0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0b8      	b.n	8004062 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d020      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f08:	4b59      	ldr	r3, [pc, #356]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4a58      	ldr	r2, [pc, #352]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f20:	4b53      	ldr	r3, [pc, #332]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	4a52      	ldr	r2, [pc, #328]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003f26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f2c:	4b50      	ldr	r3, [pc, #320]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	494d      	ldr	r1, [pc, #308]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d040      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d107      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f52:	4b47      	ldr	r3, [pc, #284]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d115      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e07f      	b.n	8004062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d107      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6a:	4b41      	ldr	r3, [pc, #260]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d109      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e073      	b.n	8004062 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7a:	4b3d      	ldr	r3, [pc, #244]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e06b      	b.n	8004062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f8a:	4b39      	ldr	r3, [pc, #228]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f023 0203 	bic.w	r2, r3, #3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	4936      	ldr	r1, [pc, #216]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f9c:	f7fe f95a 	bl	8002254 <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa2:	e00a      	b.n	8003fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa4:	f7fe f956 	bl	8002254 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e053      	b.n	8004062 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fba:	4b2d      	ldr	r3, [pc, #180]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f003 020c 	and.w	r2, r3, #12
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d1eb      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fcc:	4b27      	ldr	r3, [pc, #156]	; (800406c <HAL_RCC_ClockConfig+0x1c0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d210      	bcs.n	8003ffc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fda:	4b24      	ldr	r3, [pc, #144]	; (800406c <HAL_RCC_ClockConfig+0x1c0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 0207 	bic.w	r2, r3, #7
 8003fe2:	4922      	ldr	r1, [pc, #136]	; (800406c <HAL_RCC_ClockConfig+0x1c0>)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fea:	4b20      	ldr	r3, [pc, #128]	; (800406c <HAL_RCC_ClockConfig+0x1c0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e032      	b.n	8004062 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004008:	4b19      	ldr	r3, [pc, #100]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4916      	ldr	r1, [pc, #88]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004026:	4b12      	ldr	r3, [pc, #72]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	490e      	ldr	r1, [pc, #56]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8004036:	4313      	orrs	r3, r2
 8004038:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800403a:	f000 f821 	bl	8004080 <HAL_RCC_GetSysClockFreq>
 800403e:	4602      	mov	r2, r0
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_RCC_ClockConfig+0x1c4>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	091b      	lsrs	r3, r3, #4
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	490a      	ldr	r1, [pc, #40]	; (8004074 <HAL_RCC_ClockConfig+0x1c8>)
 800404c:	5ccb      	ldrb	r3, [r1, r3]
 800404e:	fa22 f303 	lsr.w	r3, r2, r3
 8004052:	4a09      	ldr	r2, [pc, #36]	; (8004078 <HAL_RCC_ClockConfig+0x1cc>)
 8004054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004056:	4b09      	ldr	r3, [pc, #36]	; (800407c <HAL_RCC_ClockConfig+0x1d0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe f8b8 	bl	80021d0 <HAL_InitTick>

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40022000 	.word	0x40022000
 8004070:	40021000 	.word	0x40021000
 8004074:	08005d0c 	.word	0x08005d0c
 8004078:	20000004 	.word	0x20000004
 800407c:	20000034 	.word	0x20000034

08004080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	2300      	movs	r3, #0
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800409a:	4b1e      	ldr	r3, [pc, #120]	; (8004114 <HAL_RCC_GetSysClockFreq+0x94>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d002      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x30>
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d003      	beq.n	80040b6 <HAL_RCC_GetSysClockFreq+0x36>
 80040ae:	e027      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040b0:	4b19      	ldr	r3, [pc, #100]	; (8004118 <HAL_RCC_GetSysClockFreq+0x98>)
 80040b2:	613b      	str	r3, [r7, #16]
      break;
 80040b4:	e027      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	0c9b      	lsrs	r3, r3, #18
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	4a17      	ldr	r2, [pc, #92]	; (800411c <HAL_RCC_GetSysClockFreq+0x9c>)
 80040c0:	5cd3      	ldrb	r3, [r2, r3]
 80040c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d010      	beq.n	80040f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040ce:	4b11      	ldr	r3, [pc, #68]	; (8004114 <HAL_RCC_GetSysClockFreq+0x94>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	0c5b      	lsrs	r3, r3, #17
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	4a11      	ldr	r2, [pc, #68]	; (8004120 <HAL_RCC_GetSysClockFreq+0xa0>)
 80040da:	5cd3      	ldrb	r3, [r2, r3]
 80040dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a0d      	ldr	r2, [pc, #52]	; (8004118 <HAL_RCC_GetSysClockFreq+0x98>)
 80040e2:	fb03 f202 	mul.w	r2, r3, r2
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	e004      	b.n	80040fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a0c      	ldr	r2, [pc, #48]	; (8004124 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040f4:	fb02 f303 	mul.w	r3, r2, r3
 80040f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	613b      	str	r3, [r7, #16]
      break;
 80040fe:	e002      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004100:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_RCC_GetSysClockFreq+0x98>)
 8004102:	613b      	str	r3, [r7, #16]
      break;
 8004104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004106:	693b      	ldr	r3, [r7, #16]
}
 8004108:	4618      	mov	r0, r3
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	007a1200 	.word	0x007a1200
 800411c:	08005d24 	.word	0x08005d24
 8004120:	08005d34 	.word	0x08005d34
 8004124:	003d0900 	.word	0x003d0900

08004128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800412c:	4b02      	ldr	r3, [pc, #8]	; (8004138 <HAL_RCC_GetHCLKFreq+0x10>)
 800412e:	681b      	ldr	r3, [r3, #0]
}
 8004130:	4618      	mov	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr
 8004138:	20000004 	.word	0x20000004

0800413c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004140:	f7ff fff2 	bl	8004128 <HAL_RCC_GetHCLKFreq>
 8004144:	4602      	mov	r2, r0
 8004146:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	0a1b      	lsrs	r3, r3, #8
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	4903      	ldr	r1, [pc, #12]	; (8004160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004152:	5ccb      	ldrb	r3, [r1, r3]
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004158:	4618      	mov	r0, r3
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40021000 	.word	0x40021000
 8004160:	08005d1c 	.word	0x08005d1c

08004164 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <RCC_Delay+0x34>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a0a      	ldr	r2, [pc, #40]	; (800419c <RCC_Delay+0x38>)
 8004172:	fba2 2303 	umull	r2, r3, r2, r3
 8004176:	0a5b      	lsrs	r3, r3, #9
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004180:	bf00      	nop
  }
  while (Delay --);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1e5a      	subs	r2, r3, #1
 8004186:	60fa      	str	r2, [r7, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f9      	bne.n	8004180 <RCC_Delay+0x1c>
}
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr
 8004198:	20000004 	.word	0x20000004
 800419c:	10624dd3 	.word	0x10624dd3

080041a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e076      	b.n	80042a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d108      	bne.n	80041cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c2:	d009      	beq.n	80041d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	61da      	str	r2, [r3, #28]
 80041ca:	e005      	b.n	80041d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fd fa96 	bl	8001724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800420e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425c:	ea42 0103 	orr.w	r1, r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004264:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	0c1a      	lsrs	r2, r3, #16
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f002 0204 	and.w	r2, r2, #4
 800427e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69da      	ldr	r2, [r3, #28]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800428e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_SPI_Transmit+0x22>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e12d      	b.n	8004526 <HAL_SPI_Transmit+0x27e>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042d2:	f7fd ffbf 	bl	8002254 <HAL_GetTick>
 80042d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042d8:	88fb      	ldrh	r3, [r7, #6]
 80042da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d002      	beq.n	80042ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042e8:	2302      	movs	r3, #2
 80042ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042ec:	e116      	b.n	800451c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <HAL_SPI_Transmit+0x52>
 80042f4:	88fb      	ldrh	r3, [r7, #6]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d102      	bne.n	8004300 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042fe:	e10d      	b.n	800451c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2203      	movs	r2, #3
 8004304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	88fa      	ldrh	r2, [r7, #6]
 8004318:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	88fa      	ldrh	r2, [r7, #6]
 800431e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004346:	d10f      	bne.n	8004368 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004356:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004366:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	d007      	beq.n	8004386 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004384:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800438e:	d14f      	bne.n	8004430 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <HAL_SPI_Transmit+0xf6>
 8004398:	8afb      	ldrh	r3, [r7, #22]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d142      	bne.n	8004424 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	881a      	ldrh	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	1c9a      	adds	r2, r3, #2
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043c2:	e02f      	b.n	8004424 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d112      	bne.n	80043f8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	881a      	ldrh	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	1c9a      	adds	r2, r3, #2
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	3b01      	subs	r3, #1
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80043f6:	e015      	b.n	8004424 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043f8:	f7fd ff2c 	bl	8002254 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d803      	bhi.n	8004410 <HAL_SPI_Transmit+0x168>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440e:	d102      	bne.n	8004416 <HAL_SPI_Transmit+0x16e>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004422:	e07b      	b.n	800451c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1ca      	bne.n	80043c4 <HAL_SPI_Transmit+0x11c>
 800442e:	e050      	b.n	80044d2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_SPI_Transmit+0x196>
 8004438:	8afb      	ldrh	r3, [r7, #22]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d144      	bne.n	80044c8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	330c      	adds	r3, #12
 8004448:	7812      	ldrb	r2, [r2, #0]
 800444a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004464:	e030      	b.n	80044c8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b02      	cmp	r3, #2
 8004472:	d113      	bne.n	800449c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	330c      	adds	r3, #12
 800447e:	7812      	ldrb	r2, [r2, #0]
 8004480:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	86da      	strh	r2, [r3, #54]	; 0x36
 800449a:	e015      	b.n	80044c8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800449c:	f7fd feda 	bl	8002254 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d803      	bhi.n	80044b4 <HAL_SPI_Transmit+0x20c>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b2:	d102      	bne.n	80044ba <HAL_SPI_Transmit+0x212>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80044c6:	e029      	b.n	800451c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1c9      	bne.n	8004466 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	6839      	ldr	r1, [r7, #0]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fcd0 	bl	8004e7c <SPI_EndRxTxTransaction>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10a      	bne.n	8004506 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044f0:	2300      	movs	r3, #0
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	77fb      	strb	r3, [r7, #31]
 8004512:	e003      	b.n	800451c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004524:	7ffb      	ldrb	r3, [r7, #31]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b088      	sub	sp, #32
 8004532:	af02      	add	r7, sp, #8
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	603b      	str	r3, [r7, #0]
 800453a:	4613      	mov	r3, r2
 800453c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b01      	cmp	r3, #1
 800454c:	d002      	beq.n	8004554 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800454e:	2302      	movs	r3, #2
 8004550:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004552:	e0fb      	b.n	800474c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800455c:	d112      	bne.n	8004584 <HAL_SPI_Receive+0x56>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10e      	bne.n	8004584 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2204      	movs	r2, #4
 800456a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800456e:	88fa      	ldrh	r2, [r7, #6]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	4613      	mov	r3, r2
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f8ef 	bl	800475e <HAL_SPI_TransmitReceive>
 8004580:	4603      	mov	r3, r0
 8004582:	e0e8      	b.n	8004756 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_SPI_Receive+0x64>
 800458e:	2302      	movs	r3, #2
 8004590:	e0e1      	b.n	8004756 <HAL_SPI_Receive+0x228>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800459a:	f7fd fe5b 	bl	8002254 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_SPI_Receive+0x7e>
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045b0:	e0cc      	b.n	800474c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2204      	movs	r2, #4
 80045b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	88fa      	ldrh	r2, [r7, #6]
 80045ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	88fa      	ldrh	r2, [r7, #6]
 80045d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f8:	d10f      	bne.n	800461a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004608:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004618:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004624:	2b40      	cmp	r3, #64	; 0x40
 8004626:	d007      	beq.n	8004638 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004636:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d16a      	bne.n	8004716 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004640:	e032      	b.n	80046a8 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b01      	cmp	r3, #1
 800464e:	d115      	bne.n	800467c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f103 020c 	add.w	r2, r3, #12
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	7812      	ldrb	r2, [r2, #0]
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004670:	b29b      	uxth	r3, r3
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	87da      	strh	r2, [r3, #62]	; 0x3e
 800467a:	e015      	b.n	80046a8 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800467c:	f7fd fdea 	bl	8002254 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d803      	bhi.n	8004694 <HAL_SPI_Receive+0x166>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004692:	d102      	bne.n	800469a <HAL_SPI_Receive+0x16c>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80046a6:	e051      	b.n	800474c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1c7      	bne.n	8004642 <HAL_SPI_Receive+0x114>
 80046b2:	e035      	b.n	8004720 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d113      	bne.n	80046ea <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	b292      	uxth	r2, r2
 80046ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	1c9a      	adds	r2, r3, #2
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046e8:	e015      	b.n	8004716 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ea:	f7fd fdb3 	bl	8002254 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d803      	bhi.n	8004702 <HAL_SPI_Receive+0x1d4>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004700:	d102      	bne.n	8004708 <HAL_SPI_Receive+0x1da>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004714:	e01a      	b.n	800474c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1c9      	bne.n	80046b4 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	6839      	ldr	r1, [r7, #0]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 fb57 	bl	8004dd8 <SPI_EndRxTransaction>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	75fb      	strb	r3, [r7, #23]
 8004742:	e003      	b.n	800474c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004754:	7dfb      	ldrb	r3, [r7, #23]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b08c      	sub	sp, #48	; 0x30
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	607a      	str	r2, [r7, #4]
 800476a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800476c:	2301      	movs	r3, #1
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_SPI_TransmitReceive+0x26>
 8004780:	2302      	movs	r3, #2
 8004782:	e198      	b.n	8004ab6 <HAL_SPI_TransmitReceive+0x358>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800478c:	f7fd fd62 	bl	8002254 <HAL_GetTick>
 8004790:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80047a2:	887b      	ldrh	r3, [r7, #2]
 80047a4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d00f      	beq.n	80047ce <HAL_SPI_TransmitReceive+0x70>
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047b4:	d107      	bne.n	80047c6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d103      	bne.n	80047c6 <HAL_SPI_TransmitReceive+0x68>
 80047be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d003      	beq.n	80047ce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80047c6:	2302      	movs	r3, #2
 80047c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047cc:	e16d      	b.n	8004aaa <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_SPI_TransmitReceive+0x82>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_SPI_TransmitReceive+0x82>
 80047da:	887b      	ldrh	r3, [r7, #2]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d103      	bne.n	80047e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047e6:	e160      	b.n	8004aaa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d003      	beq.n	80047fc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2205      	movs	r2, #5
 80047f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	887a      	ldrh	r2, [r7, #2]
 800480c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	887a      	ldrh	r2, [r7, #2]
 8004812:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	887a      	ldrh	r2, [r7, #2]
 800481e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	887a      	ldrh	r2, [r7, #2]
 8004824:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d007      	beq.n	8004850 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800484e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004858:	d17c      	bne.n	8004954 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <HAL_SPI_TransmitReceive+0x10a>
 8004862:	8b7b      	ldrh	r3, [r7, #26]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d16a      	bne.n	800493e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	881a      	ldrh	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	1c9a      	adds	r2, r3, #2
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800488c:	e057      	b.n	800493e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b02      	cmp	r3, #2
 800489a:	d11b      	bne.n	80048d4 <HAL_SPI_TransmitReceive+0x176>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d016      	beq.n	80048d4 <HAL_SPI_TransmitReceive+0x176>
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d113      	bne.n	80048d4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	881a      	ldrh	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	1c9a      	adds	r2, r3, #2
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d119      	bne.n	8004916 <HAL_SPI_TransmitReceive+0x1b8>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d014      	beq.n	8004916 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	b292      	uxth	r2, r2
 80048f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	1c9a      	adds	r2, r3, #2
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004908:	b29b      	uxth	r3, r3
 800490a:	3b01      	subs	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004912:	2301      	movs	r3, #1
 8004914:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004916:	f7fd fc9d 	bl	8002254 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004922:	429a      	cmp	r2, r3
 8004924:	d80b      	bhi.n	800493e <HAL_SPI_TransmitReceive+0x1e0>
 8004926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d007      	beq.n	800493e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800493c:	e0b5      	b.n	8004aaa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1a2      	bne.n	800488e <HAL_SPI_TransmitReceive+0x130>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d19d      	bne.n	800488e <HAL_SPI_TransmitReceive+0x130>
 8004952:	e080      	b.n	8004a56 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <HAL_SPI_TransmitReceive+0x204>
 800495c:	8b7b      	ldrh	r3, [r7, #26]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d16f      	bne.n	8004a42 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	330c      	adds	r3, #12
 800496c:	7812      	ldrb	r2, [r2, #0]
 800496e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004988:	e05b      	b.n	8004a42 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b02      	cmp	r3, #2
 8004996:	d11c      	bne.n	80049d2 <HAL_SPI_TransmitReceive+0x274>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d017      	beq.n	80049d2 <HAL_SPI_TransmitReceive+0x274>
 80049a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d114      	bne.n	80049d2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	330c      	adds	r3, #12
 80049b2:	7812      	ldrb	r2, [r2, #0]
 80049b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d119      	bne.n	8004a14 <HAL_SPI_TransmitReceive+0x2b6>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d014      	beq.n	8004a14 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a10:	2301      	movs	r3, #1
 8004a12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a14:	f7fd fc1e 	bl	8002254 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d803      	bhi.n	8004a2c <HAL_SPI_TransmitReceive+0x2ce>
 8004a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2a:	d102      	bne.n	8004a32 <HAL_SPI_TransmitReceive+0x2d4>
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d107      	bne.n	8004a42 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004a40:	e033      	b.n	8004aaa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d19e      	bne.n	800498a <HAL_SPI_TransmitReceive+0x22c>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d199      	bne.n	800498a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 fa0e 	bl	8004e7c <SPI_EndRxTxTransaction>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d006      	beq.n	8004a74 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a72:	e01a      	b.n	8004aaa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa0:	e003      	b.n	8004aaa <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ab2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3730      	adds	r7, #48	; 0x30
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	099b      	lsrs	r3, r3, #6
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10f      	bne.n	8004b04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	099b      	lsrs	r3, r3, #6
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d004      	beq.n	8004b04 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	4798      	blx	r3
    return;
 8004b02:	e0be      	b.n	8004c82 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	085b      	lsrs	r3, r3, #1
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <HAL_SPI_IRQHandler+0x66>
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	09db      	lsrs	r3, r3, #7
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d004      	beq.n	8004b26 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4798      	blx	r3
    return;
 8004b24:	e0ad      	b.n	8004c82 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <HAL_SPI_IRQHandler+0x80>
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	099b      	lsrs	r3, r3, #6
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 80a1 	beq.w	8004c82 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 809a 	beq.w	8004c82 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	099b      	lsrs	r3, r3, #6
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d023      	beq.n	8004ba2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d011      	beq.n	8004b8a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6a:	f043 0204 	orr.w	r2, r3, #4
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	e00b      	b.n	8004ba2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	693b      	ldr	r3, [r7, #16]
        return;
 8004ba0:	e06f      	b.n	8004c82 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d014      	beq.n	8004bd8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb2:	f043 0201 	orr.w	r2, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d04f      	beq.n	8004c80 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bee:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d104      	bne.n	8004c0c <HAL_SPI_IRQHandler+0x14c>
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d034      	beq.n	8004c76 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0203 	bic.w	r2, r2, #3
 8004c1a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d011      	beq.n	8004c48 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c28:	4a17      	ldr	r2, [pc, #92]	; (8004c88 <HAL_SPI_IRQHandler+0x1c8>)
 8004c2a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fd fc4b 	bl	80024cc <HAL_DMA_Abort_IT>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d016      	beq.n	8004c7e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c54:	4a0c      	ldr	r2, [pc, #48]	; (8004c88 <HAL_SPI_IRQHandler+0x1c8>)
 8004c56:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fd fc35 	bl	80024cc <HAL_DMA_Abort_IT>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004c74:	e003      	b.n	8004c7e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f808 	bl	8004c8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004c7c:	e000      	b.n	8004c80 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004c7e:	bf00      	nop
    return;
 8004c80:	bf00      	nop
  }
}
 8004c82:	3720      	adds	r7, #32
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	08004c9f 	.word	0x08004c9f

08004c8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr

08004c9e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f7ff ffe7 	bl	8004c8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cd8:	f7fd fabc 	bl	8002254 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ce8:	f7fd fab4 	bl	8002254 <HAL_GetTick>
 8004cec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cee:	4b39      	ldr	r3, [pc, #228]	; (8004dd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	015b      	lsls	r3, r3, #5
 8004cf4:	0d1b      	lsrs	r3, r3, #20
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	fb02 f303 	mul.w	r3, r2, r3
 8004cfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cfe:	e054      	b.n	8004daa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d06:	d050      	beq.n	8004daa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d08:	f7fd faa4 	bl	8002254 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	69fa      	ldr	r2, [r7, #28]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d902      	bls.n	8004d1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d13d      	bne.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d36:	d111      	bne.n	8004d5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d40:	d004      	beq.n	8004d4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4a:	d107      	bne.n	8004d5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d64:	d10f      	bne.n	8004d86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e017      	b.n	8004dca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4013      	ands	r3, r2
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	bf0c      	ite	eq
 8004dba:	2301      	moveq	r3, #1
 8004dbc:	2300      	movne	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d19b      	bne.n	8004d00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3720      	adds	r7, #32
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000004 	.word	0x20000004

08004dd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dec:	d111      	bne.n	8004e12 <SPI_EndRxTransaction+0x3a>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df6:	d004      	beq.n	8004e02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e00:	d107      	bne.n	8004e12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e10:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e1a:	d117      	bne.n	8004e4c <SPI_EndRxTransaction+0x74>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e24:	d112      	bne.n	8004e4c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2101      	movs	r1, #1
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff ff49 	bl	8004cc8 <SPI_WaitFlagStateUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01a      	beq.n	8004e72 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e40:	f043 0220 	orr.w	r2, r3, #32
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e013      	b.n	8004e74 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2200      	movs	r2, #0
 8004e54:	2180      	movs	r1, #128	; 0x80
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f7ff ff36 	bl	8004cc8 <SPI_WaitFlagStateUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d007      	beq.n	8004e72 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	f043 0220 	orr.w	r2, r3, #32
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e000      	b.n	8004e74 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2180      	movs	r1, #128	; 0x80
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7ff ff18 	bl	8004cc8 <SPI_WaitFlagStateUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d007      	beq.n	8004eae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	f043 0220 	orr.w	r2, r3, #32
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e000      	b.n	8004eb0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <__errno>:
 8004eb8:	4b01      	ldr	r3, [pc, #4]	; (8004ec0 <__errno+0x8>)
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	2000003c 	.word	0x2000003c

08004ec4 <__libc_init_array>:
 8004ec4:	b570      	push	{r4, r5, r6, lr}
 8004ec6:	2600      	movs	r6, #0
 8004ec8:	4d0c      	ldr	r5, [pc, #48]	; (8004efc <__libc_init_array+0x38>)
 8004eca:	4c0d      	ldr	r4, [pc, #52]	; (8004f00 <__libc_init_array+0x3c>)
 8004ecc:	1b64      	subs	r4, r4, r5
 8004ece:	10a4      	asrs	r4, r4, #2
 8004ed0:	42a6      	cmp	r6, r4
 8004ed2:	d109      	bne.n	8004ee8 <__libc_init_array+0x24>
 8004ed4:	f000 ff02 	bl	8005cdc <_init>
 8004ed8:	2600      	movs	r6, #0
 8004eda:	4d0a      	ldr	r5, [pc, #40]	; (8004f04 <__libc_init_array+0x40>)
 8004edc:	4c0a      	ldr	r4, [pc, #40]	; (8004f08 <__libc_init_array+0x44>)
 8004ede:	1b64      	subs	r4, r4, r5
 8004ee0:	10a4      	asrs	r4, r4, #2
 8004ee2:	42a6      	cmp	r6, r4
 8004ee4:	d105      	bne.n	8004ef2 <__libc_init_array+0x2e>
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
 8004ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eec:	4798      	blx	r3
 8004eee:	3601      	adds	r6, #1
 8004ef0:	e7ee      	b.n	8004ed0 <__libc_init_array+0xc>
 8004ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef6:	4798      	blx	r3
 8004ef8:	3601      	adds	r6, #1
 8004efa:	e7f2      	b.n	8004ee2 <__libc_init_array+0x1e>
 8004efc:	08005de0 	.word	0x08005de0
 8004f00:	08005de0 	.word	0x08005de0
 8004f04:	08005de0 	.word	0x08005de0
 8004f08:	08005de4 	.word	0x08005de4

08004f0c <memset>:
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	4402      	add	r2, r0
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d100      	bne.n	8004f16 <memset+0xa>
 8004f14:	4770      	bx	lr
 8004f16:	f803 1b01 	strb.w	r1, [r3], #1
 8004f1a:	e7f9      	b.n	8004f10 <memset+0x4>

08004f1c <siprintf>:
 8004f1c:	b40e      	push	{r1, r2, r3}
 8004f1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f22:	b500      	push	{lr}
 8004f24:	b09c      	sub	sp, #112	; 0x70
 8004f26:	ab1d      	add	r3, sp, #116	; 0x74
 8004f28:	9002      	str	r0, [sp, #8]
 8004f2a:	9006      	str	r0, [sp, #24]
 8004f2c:	9107      	str	r1, [sp, #28]
 8004f2e:	9104      	str	r1, [sp, #16]
 8004f30:	4808      	ldr	r0, [pc, #32]	; (8004f54 <siprintf+0x38>)
 8004f32:	4909      	ldr	r1, [pc, #36]	; (8004f58 <siprintf+0x3c>)
 8004f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f38:	9105      	str	r1, [sp, #20]
 8004f3a:	6800      	ldr	r0, [r0, #0]
 8004f3c:	a902      	add	r1, sp, #8
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	f000 f868 	bl	8005014 <_svfiprintf_r>
 8004f44:	2200      	movs	r2, #0
 8004f46:	9b02      	ldr	r3, [sp, #8]
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	b01c      	add	sp, #112	; 0x70
 8004f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f50:	b003      	add	sp, #12
 8004f52:	4770      	bx	lr
 8004f54:	2000003c 	.word	0x2000003c
 8004f58:	ffff0208 	.word	0xffff0208

08004f5c <__ssputs_r>:
 8004f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f60:	688e      	ldr	r6, [r1, #8]
 8004f62:	4682      	mov	sl, r0
 8004f64:	429e      	cmp	r6, r3
 8004f66:	460c      	mov	r4, r1
 8004f68:	4690      	mov	r8, r2
 8004f6a:	461f      	mov	r7, r3
 8004f6c:	d838      	bhi.n	8004fe0 <__ssputs_r+0x84>
 8004f6e:	898a      	ldrh	r2, [r1, #12]
 8004f70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f74:	d032      	beq.n	8004fdc <__ssputs_r+0x80>
 8004f76:	6825      	ldr	r5, [r4, #0]
 8004f78:	6909      	ldr	r1, [r1, #16]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	eba5 0901 	sub.w	r9, r5, r1
 8004f80:	6965      	ldr	r5, [r4, #20]
 8004f82:	444b      	add	r3, r9
 8004f84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f8c:	106d      	asrs	r5, r5, #1
 8004f8e:	429d      	cmp	r5, r3
 8004f90:	bf38      	it	cc
 8004f92:	461d      	movcc	r5, r3
 8004f94:	0553      	lsls	r3, r2, #21
 8004f96:	d531      	bpl.n	8004ffc <__ssputs_r+0xa0>
 8004f98:	4629      	mov	r1, r5
 8004f9a:	f000 fb6f 	bl	800567c <_malloc_r>
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	b950      	cbnz	r0, 8004fb8 <__ssputs_r+0x5c>
 8004fa2:	230c      	movs	r3, #12
 8004fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa8:	f8ca 3000 	str.w	r3, [sl]
 8004fac:	89a3      	ldrh	r3, [r4, #12]
 8004fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb2:	81a3      	strh	r3, [r4, #12]
 8004fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb8:	464a      	mov	r2, r9
 8004fba:	6921      	ldr	r1, [r4, #16]
 8004fbc:	f000 face 	bl	800555c <memcpy>
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fca:	81a3      	strh	r3, [r4, #12]
 8004fcc:	6126      	str	r6, [r4, #16]
 8004fce:	444e      	add	r6, r9
 8004fd0:	6026      	str	r6, [r4, #0]
 8004fd2:	463e      	mov	r6, r7
 8004fd4:	6165      	str	r5, [r4, #20]
 8004fd6:	eba5 0509 	sub.w	r5, r5, r9
 8004fda:	60a5      	str	r5, [r4, #8]
 8004fdc:	42be      	cmp	r6, r7
 8004fde:	d900      	bls.n	8004fe2 <__ssputs_r+0x86>
 8004fe0:	463e      	mov	r6, r7
 8004fe2:	4632      	mov	r2, r6
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	6820      	ldr	r0, [r4, #0]
 8004fe8:	f000 fac6 	bl	8005578 <memmove>
 8004fec:	68a3      	ldr	r3, [r4, #8]
 8004fee:	2000      	movs	r0, #0
 8004ff0:	1b9b      	subs	r3, r3, r6
 8004ff2:	60a3      	str	r3, [r4, #8]
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	4433      	add	r3, r6
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	e7db      	b.n	8004fb4 <__ssputs_r+0x58>
 8004ffc:	462a      	mov	r2, r5
 8004ffe:	f000 fbb1 	bl	8005764 <_realloc_r>
 8005002:	4606      	mov	r6, r0
 8005004:	2800      	cmp	r0, #0
 8005006:	d1e1      	bne.n	8004fcc <__ssputs_r+0x70>
 8005008:	4650      	mov	r0, sl
 800500a:	6921      	ldr	r1, [r4, #16]
 800500c:	f000 face 	bl	80055ac <_free_r>
 8005010:	e7c7      	b.n	8004fa2 <__ssputs_r+0x46>
	...

08005014 <_svfiprintf_r>:
 8005014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005018:	4698      	mov	r8, r3
 800501a:	898b      	ldrh	r3, [r1, #12]
 800501c:	4607      	mov	r7, r0
 800501e:	061b      	lsls	r3, r3, #24
 8005020:	460d      	mov	r5, r1
 8005022:	4614      	mov	r4, r2
 8005024:	b09d      	sub	sp, #116	; 0x74
 8005026:	d50e      	bpl.n	8005046 <_svfiprintf_r+0x32>
 8005028:	690b      	ldr	r3, [r1, #16]
 800502a:	b963      	cbnz	r3, 8005046 <_svfiprintf_r+0x32>
 800502c:	2140      	movs	r1, #64	; 0x40
 800502e:	f000 fb25 	bl	800567c <_malloc_r>
 8005032:	6028      	str	r0, [r5, #0]
 8005034:	6128      	str	r0, [r5, #16]
 8005036:	b920      	cbnz	r0, 8005042 <_svfiprintf_r+0x2e>
 8005038:	230c      	movs	r3, #12
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
 8005040:	e0d1      	b.n	80051e6 <_svfiprintf_r+0x1d2>
 8005042:	2340      	movs	r3, #64	; 0x40
 8005044:	616b      	str	r3, [r5, #20]
 8005046:	2300      	movs	r3, #0
 8005048:	9309      	str	r3, [sp, #36]	; 0x24
 800504a:	2320      	movs	r3, #32
 800504c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005050:	2330      	movs	r3, #48	; 0x30
 8005052:	f04f 0901 	mov.w	r9, #1
 8005056:	f8cd 800c 	str.w	r8, [sp, #12]
 800505a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005200 <_svfiprintf_r+0x1ec>
 800505e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005062:	4623      	mov	r3, r4
 8005064:	469a      	mov	sl, r3
 8005066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800506a:	b10a      	cbz	r2, 8005070 <_svfiprintf_r+0x5c>
 800506c:	2a25      	cmp	r2, #37	; 0x25
 800506e:	d1f9      	bne.n	8005064 <_svfiprintf_r+0x50>
 8005070:	ebba 0b04 	subs.w	fp, sl, r4
 8005074:	d00b      	beq.n	800508e <_svfiprintf_r+0x7a>
 8005076:	465b      	mov	r3, fp
 8005078:	4622      	mov	r2, r4
 800507a:	4629      	mov	r1, r5
 800507c:	4638      	mov	r0, r7
 800507e:	f7ff ff6d 	bl	8004f5c <__ssputs_r>
 8005082:	3001      	adds	r0, #1
 8005084:	f000 80aa 	beq.w	80051dc <_svfiprintf_r+0x1c8>
 8005088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800508a:	445a      	add	r2, fp
 800508c:	9209      	str	r2, [sp, #36]	; 0x24
 800508e:	f89a 3000 	ldrb.w	r3, [sl]
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 80a2 	beq.w	80051dc <_svfiprintf_r+0x1c8>
 8005098:	2300      	movs	r3, #0
 800509a:	f04f 32ff 	mov.w	r2, #4294967295
 800509e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050a2:	f10a 0a01 	add.w	sl, sl, #1
 80050a6:	9304      	str	r3, [sp, #16]
 80050a8:	9307      	str	r3, [sp, #28]
 80050aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050ae:	931a      	str	r3, [sp, #104]	; 0x68
 80050b0:	4654      	mov	r4, sl
 80050b2:	2205      	movs	r2, #5
 80050b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050b8:	4851      	ldr	r0, [pc, #324]	; (8005200 <_svfiprintf_r+0x1ec>)
 80050ba:	f000 fa41 	bl	8005540 <memchr>
 80050be:	9a04      	ldr	r2, [sp, #16]
 80050c0:	b9d8      	cbnz	r0, 80050fa <_svfiprintf_r+0xe6>
 80050c2:	06d0      	lsls	r0, r2, #27
 80050c4:	bf44      	itt	mi
 80050c6:	2320      	movmi	r3, #32
 80050c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050cc:	0711      	lsls	r1, r2, #28
 80050ce:	bf44      	itt	mi
 80050d0:	232b      	movmi	r3, #43	; 0x2b
 80050d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050d6:	f89a 3000 	ldrb.w	r3, [sl]
 80050da:	2b2a      	cmp	r3, #42	; 0x2a
 80050dc:	d015      	beq.n	800510a <_svfiprintf_r+0xf6>
 80050de:	4654      	mov	r4, sl
 80050e0:	2000      	movs	r0, #0
 80050e2:	f04f 0c0a 	mov.w	ip, #10
 80050e6:	9a07      	ldr	r2, [sp, #28]
 80050e8:	4621      	mov	r1, r4
 80050ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050ee:	3b30      	subs	r3, #48	; 0x30
 80050f0:	2b09      	cmp	r3, #9
 80050f2:	d94e      	bls.n	8005192 <_svfiprintf_r+0x17e>
 80050f4:	b1b0      	cbz	r0, 8005124 <_svfiprintf_r+0x110>
 80050f6:	9207      	str	r2, [sp, #28]
 80050f8:	e014      	b.n	8005124 <_svfiprintf_r+0x110>
 80050fa:	eba0 0308 	sub.w	r3, r0, r8
 80050fe:	fa09 f303 	lsl.w	r3, r9, r3
 8005102:	4313      	orrs	r3, r2
 8005104:	46a2      	mov	sl, r4
 8005106:	9304      	str	r3, [sp, #16]
 8005108:	e7d2      	b.n	80050b0 <_svfiprintf_r+0x9c>
 800510a:	9b03      	ldr	r3, [sp, #12]
 800510c:	1d19      	adds	r1, r3, #4
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	9103      	str	r1, [sp, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	bfbb      	ittet	lt
 8005116:	425b      	neglt	r3, r3
 8005118:	f042 0202 	orrlt.w	r2, r2, #2
 800511c:	9307      	strge	r3, [sp, #28]
 800511e:	9307      	strlt	r3, [sp, #28]
 8005120:	bfb8      	it	lt
 8005122:	9204      	strlt	r2, [sp, #16]
 8005124:	7823      	ldrb	r3, [r4, #0]
 8005126:	2b2e      	cmp	r3, #46	; 0x2e
 8005128:	d10c      	bne.n	8005144 <_svfiprintf_r+0x130>
 800512a:	7863      	ldrb	r3, [r4, #1]
 800512c:	2b2a      	cmp	r3, #42	; 0x2a
 800512e:	d135      	bne.n	800519c <_svfiprintf_r+0x188>
 8005130:	9b03      	ldr	r3, [sp, #12]
 8005132:	3402      	adds	r4, #2
 8005134:	1d1a      	adds	r2, r3, #4
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	9203      	str	r2, [sp, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	bfb8      	it	lt
 800513e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005142:	9305      	str	r3, [sp, #20]
 8005144:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005204 <_svfiprintf_r+0x1f0>
 8005148:	2203      	movs	r2, #3
 800514a:	4650      	mov	r0, sl
 800514c:	7821      	ldrb	r1, [r4, #0]
 800514e:	f000 f9f7 	bl	8005540 <memchr>
 8005152:	b140      	cbz	r0, 8005166 <_svfiprintf_r+0x152>
 8005154:	2340      	movs	r3, #64	; 0x40
 8005156:	eba0 000a 	sub.w	r0, r0, sl
 800515a:	fa03 f000 	lsl.w	r0, r3, r0
 800515e:	9b04      	ldr	r3, [sp, #16]
 8005160:	3401      	adds	r4, #1
 8005162:	4303      	orrs	r3, r0
 8005164:	9304      	str	r3, [sp, #16]
 8005166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800516a:	2206      	movs	r2, #6
 800516c:	4826      	ldr	r0, [pc, #152]	; (8005208 <_svfiprintf_r+0x1f4>)
 800516e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005172:	f000 f9e5 	bl	8005540 <memchr>
 8005176:	2800      	cmp	r0, #0
 8005178:	d038      	beq.n	80051ec <_svfiprintf_r+0x1d8>
 800517a:	4b24      	ldr	r3, [pc, #144]	; (800520c <_svfiprintf_r+0x1f8>)
 800517c:	bb1b      	cbnz	r3, 80051c6 <_svfiprintf_r+0x1b2>
 800517e:	9b03      	ldr	r3, [sp, #12]
 8005180:	3307      	adds	r3, #7
 8005182:	f023 0307 	bic.w	r3, r3, #7
 8005186:	3308      	adds	r3, #8
 8005188:	9303      	str	r3, [sp, #12]
 800518a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800518c:	4433      	add	r3, r6
 800518e:	9309      	str	r3, [sp, #36]	; 0x24
 8005190:	e767      	b.n	8005062 <_svfiprintf_r+0x4e>
 8005192:	460c      	mov	r4, r1
 8005194:	2001      	movs	r0, #1
 8005196:	fb0c 3202 	mla	r2, ip, r2, r3
 800519a:	e7a5      	b.n	80050e8 <_svfiprintf_r+0xd4>
 800519c:	2300      	movs	r3, #0
 800519e:	f04f 0c0a 	mov.w	ip, #10
 80051a2:	4619      	mov	r1, r3
 80051a4:	3401      	adds	r4, #1
 80051a6:	9305      	str	r3, [sp, #20]
 80051a8:	4620      	mov	r0, r4
 80051aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051ae:	3a30      	subs	r2, #48	; 0x30
 80051b0:	2a09      	cmp	r2, #9
 80051b2:	d903      	bls.n	80051bc <_svfiprintf_r+0x1a8>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0c5      	beq.n	8005144 <_svfiprintf_r+0x130>
 80051b8:	9105      	str	r1, [sp, #20]
 80051ba:	e7c3      	b.n	8005144 <_svfiprintf_r+0x130>
 80051bc:	4604      	mov	r4, r0
 80051be:	2301      	movs	r3, #1
 80051c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80051c4:	e7f0      	b.n	80051a8 <_svfiprintf_r+0x194>
 80051c6:	ab03      	add	r3, sp, #12
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	462a      	mov	r2, r5
 80051cc:	4638      	mov	r0, r7
 80051ce:	4b10      	ldr	r3, [pc, #64]	; (8005210 <_svfiprintf_r+0x1fc>)
 80051d0:	a904      	add	r1, sp, #16
 80051d2:	f3af 8000 	nop.w
 80051d6:	1c42      	adds	r2, r0, #1
 80051d8:	4606      	mov	r6, r0
 80051da:	d1d6      	bne.n	800518a <_svfiprintf_r+0x176>
 80051dc:	89ab      	ldrh	r3, [r5, #12]
 80051de:	065b      	lsls	r3, r3, #25
 80051e0:	f53f af2c 	bmi.w	800503c <_svfiprintf_r+0x28>
 80051e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051e6:	b01d      	add	sp, #116	; 0x74
 80051e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ec:	ab03      	add	r3, sp, #12
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	462a      	mov	r2, r5
 80051f2:	4638      	mov	r0, r7
 80051f4:	4b06      	ldr	r3, [pc, #24]	; (8005210 <_svfiprintf_r+0x1fc>)
 80051f6:	a904      	add	r1, sp, #16
 80051f8:	f000 f87c 	bl	80052f4 <_printf_i>
 80051fc:	e7eb      	b.n	80051d6 <_svfiprintf_r+0x1c2>
 80051fe:	bf00      	nop
 8005200:	08005d36 	.word	0x08005d36
 8005204:	08005d3c 	.word	0x08005d3c
 8005208:	08005d40 	.word	0x08005d40
 800520c:	00000000 	.word	0x00000000
 8005210:	08004f5d 	.word	0x08004f5d

08005214 <_printf_common>:
 8005214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005218:	4616      	mov	r6, r2
 800521a:	4699      	mov	r9, r3
 800521c:	688a      	ldr	r2, [r1, #8]
 800521e:	690b      	ldr	r3, [r1, #16]
 8005220:	4607      	mov	r7, r0
 8005222:	4293      	cmp	r3, r2
 8005224:	bfb8      	it	lt
 8005226:	4613      	movlt	r3, r2
 8005228:	6033      	str	r3, [r6, #0]
 800522a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800522e:	460c      	mov	r4, r1
 8005230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005234:	b10a      	cbz	r2, 800523a <_printf_common+0x26>
 8005236:	3301      	adds	r3, #1
 8005238:	6033      	str	r3, [r6, #0]
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	0699      	lsls	r1, r3, #26
 800523e:	bf42      	ittt	mi
 8005240:	6833      	ldrmi	r3, [r6, #0]
 8005242:	3302      	addmi	r3, #2
 8005244:	6033      	strmi	r3, [r6, #0]
 8005246:	6825      	ldr	r5, [r4, #0]
 8005248:	f015 0506 	ands.w	r5, r5, #6
 800524c:	d106      	bne.n	800525c <_printf_common+0x48>
 800524e:	f104 0a19 	add.w	sl, r4, #25
 8005252:	68e3      	ldr	r3, [r4, #12]
 8005254:	6832      	ldr	r2, [r6, #0]
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	42ab      	cmp	r3, r5
 800525a:	dc28      	bgt.n	80052ae <_printf_common+0x9a>
 800525c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005260:	1e13      	subs	r3, r2, #0
 8005262:	6822      	ldr	r2, [r4, #0]
 8005264:	bf18      	it	ne
 8005266:	2301      	movne	r3, #1
 8005268:	0692      	lsls	r2, r2, #26
 800526a:	d42d      	bmi.n	80052c8 <_printf_common+0xb4>
 800526c:	4649      	mov	r1, r9
 800526e:	4638      	mov	r0, r7
 8005270:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005274:	47c0      	blx	r8
 8005276:	3001      	adds	r0, #1
 8005278:	d020      	beq.n	80052bc <_printf_common+0xa8>
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	68e5      	ldr	r5, [r4, #12]
 800527e:	f003 0306 	and.w	r3, r3, #6
 8005282:	2b04      	cmp	r3, #4
 8005284:	bf18      	it	ne
 8005286:	2500      	movne	r5, #0
 8005288:	6832      	ldr	r2, [r6, #0]
 800528a:	f04f 0600 	mov.w	r6, #0
 800528e:	68a3      	ldr	r3, [r4, #8]
 8005290:	bf08      	it	eq
 8005292:	1aad      	subeq	r5, r5, r2
 8005294:	6922      	ldr	r2, [r4, #16]
 8005296:	bf08      	it	eq
 8005298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800529c:	4293      	cmp	r3, r2
 800529e:	bfc4      	itt	gt
 80052a0:	1a9b      	subgt	r3, r3, r2
 80052a2:	18ed      	addgt	r5, r5, r3
 80052a4:	341a      	adds	r4, #26
 80052a6:	42b5      	cmp	r5, r6
 80052a8:	d11a      	bne.n	80052e0 <_printf_common+0xcc>
 80052aa:	2000      	movs	r0, #0
 80052ac:	e008      	b.n	80052c0 <_printf_common+0xac>
 80052ae:	2301      	movs	r3, #1
 80052b0:	4652      	mov	r2, sl
 80052b2:	4649      	mov	r1, r9
 80052b4:	4638      	mov	r0, r7
 80052b6:	47c0      	blx	r8
 80052b8:	3001      	adds	r0, #1
 80052ba:	d103      	bne.n	80052c4 <_printf_common+0xb0>
 80052bc:	f04f 30ff 	mov.w	r0, #4294967295
 80052c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c4:	3501      	adds	r5, #1
 80052c6:	e7c4      	b.n	8005252 <_printf_common+0x3e>
 80052c8:	2030      	movs	r0, #48	; 0x30
 80052ca:	18e1      	adds	r1, r4, r3
 80052cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052d6:	4422      	add	r2, r4
 80052d8:	3302      	adds	r3, #2
 80052da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052de:	e7c5      	b.n	800526c <_printf_common+0x58>
 80052e0:	2301      	movs	r3, #1
 80052e2:	4622      	mov	r2, r4
 80052e4:	4649      	mov	r1, r9
 80052e6:	4638      	mov	r0, r7
 80052e8:	47c0      	blx	r8
 80052ea:	3001      	adds	r0, #1
 80052ec:	d0e6      	beq.n	80052bc <_printf_common+0xa8>
 80052ee:	3601      	adds	r6, #1
 80052f0:	e7d9      	b.n	80052a6 <_printf_common+0x92>
	...

080052f4 <_printf_i>:
 80052f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052f8:	7e0f      	ldrb	r7, [r1, #24]
 80052fa:	4691      	mov	r9, r2
 80052fc:	2f78      	cmp	r7, #120	; 0x78
 80052fe:	4680      	mov	r8, r0
 8005300:	460c      	mov	r4, r1
 8005302:	469a      	mov	sl, r3
 8005304:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005306:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800530a:	d807      	bhi.n	800531c <_printf_i+0x28>
 800530c:	2f62      	cmp	r7, #98	; 0x62
 800530e:	d80a      	bhi.n	8005326 <_printf_i+0x32>
 8005310:	2f00      	cmp	r7, #0
 8005312:	f000 80d9 	beq.w	80054c8 <_printf_i+0x1d4>
 8005316:	2f58      	cmp	r7, #88	; 0x58
 8005318:	f000 80a4 	beq.w	8005464 <_printf_i+0x170>
 800531c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005324:	e03a      	b.n	800539c <_printf_i+0xa8>
 8005326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800532a:	2b15      	cmp	r3, #21
 800532c:	d8f6      	bhi.n	800531c <_printf_i+0x28>
 800532e:	a101      	add	r1, pc, #4	; (adr r1, 8005334 <_printf_i+0x40>)
 8005330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005334:	0800538d 	.word	0x0800538d
 8005338:	080053a1 	.word	0x080053a1
 800533c:	0800531d 	.word	0x0800531d
 8005340:	0800531d 	.word	0x0800531d
 8005344:	0800531d 	.word	0x0800531d
 8005348:	0800531d 	.word	0x0800531d
 800534c:	080053a1 	.word	0x080053a1
 8005350:	0800531d 	.word	0x0800531d
 8005354:	0800531d 	.word	0x0800531d
 8005358:	0800531d 	.word	0x0800531d
 800535c:	0800531d 	.word	0x0800531d
 8005360:	080054af 	.word	0x080054af
 8005364:	080053d1 	.word	0x080053d1
 8005368:	08005491 	.word	0x08005491
 800536c:	0800531d 	.word	0x0800531d
 8005370:	0800531d 	.word	0x0800531d
 8005374:	080054d1 	.word	0x080054d1
 8005378:	0800531d 	.word	0x0800531d
 800537c:	080053d1 	.word	0x080053d1
 8005380:	0800531d 	.word	0x0800531d
 8005384:	0800531d 	.word	0x0800531d
 8005388:	08005499 	.word	0x08005499
 800538c:	682b      	ldr	r3, [r5, #0]
 800538e:	1d1a      	adds	r2, r3, #4
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	602a      	str	r2, [r5, #0]
 8005394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800539c:	2301      	movs	r3, #1
 800539e:	e0a4      	b.n	80054ea <_printf_i+0x1f6>
 80053a0:	6820      	ldr	r0, [r4, #0]
 80053a2:	6829      	ldr	r1, [r5, #0]
 80053a4:	0606      	lsls	r6, r0, #24
 80053a6:	f101 0304 	add.w	r3, r1, #4
 80053aa:	d50a      	bpl.n	80053c2 <_printf_i+0xce>
 80053ac:	680e      	ldr	r6, [r1, #0]
 80053ae:	602b      	str	r3, [r5, #0]
 80053b0:	2e00      	cmp	r6, #0
 80053b2:	da03      	bge.n	80053bc <_printf_i+0xc8>
 80053b4:	232d      	movs	r3, #45	; 0x2d
 80053b6:	4276      	negs	r6, r6
 80053b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053bc:	230a      	movs	r3, #10
 80053be:	485e      	ldr	r0, [pc, #376]	; (8005538 <_printf_i+0x244>)
 80053c0:	e019      	b.n	80053f6 <_printf_i+0x102>
 80053c2:	680e      	ldr	r6, [r1, #0]
 80053c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053c8:	602b      	str	r3, [r5, #0]
 80053ca:	bf18      	it	ne
 80053cc:	b236      	sxthne	r6, r6
 80053ce:	e7ef      	b.n	80053b0 <_printf_i+0xbc>
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	6820      	ldr	r0, [r4, #0]
 80053d4:	1d19      	adds	r1, r3, #4
 80053d6:	6029      	str	r1, [r5, #0]
 80053d8:	0601      	lsls	r1, r0, #24
 80053da:	d501      	bpl.n	80053e0 <_printf_i+0xec>
 80053dc:	681e      	ldr	r6, [r3, #0]
 80053de:	e002      	b.n	80053e6 <_printf_i+0xf2>
 80053e0:	0646      	lsls	r6, r0, #25
 80053e2:	d5fb      	bpl.n	80053dc <_printf_i+0xe8>
 80053e4:	881e      	ldrh	r6, [r3, #0]
 80053e6:	2f6f      	cmp	r7, #111	; 0x6f
 80053e8:	bf0c      	ite	eq
 80053ea:	2308      	moveq	r3, #8
 80053ec:	230a      	movne	r3, #10
 80053ee:	4852      	ldr	r0, [pc, #328]	; (8005538 <_printf_i+0x244>)
 80053f0:	2100      	movs	r1, #0
 80053f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053f6:	6865      	ldr	r5, [r4, #4]
 80053f8:	2d00      	cmp	r5, #0
 80053fa:	bfa8      	it	ge
 80053fc:	6821      	ldrge	r1, [r4, #0]
 80053fe:	60a5      	str	r5, [r4, #8]
 8005400:	bfa4      	itt	ge
 8005402:	f021 0104 	bicge.w	r1, r1, #4
 8005406:	6021      	strge	r1, [r4, #0]
 8005408:	b90e      	cbnz	r6, 800540e <_printf_i+0x11a>
 800540a:	2d00      	cmp	r5, #0
 800540c:	d04d      	beq.n	80054aa <_printf_i+0x1b6>
 800540e:	4615      	mov	r5, r2
 8005410:	fbb6 f1f3 	udiv	r1, r6, r3
 8005414:	fb03 6711 	mls	r7, r3, r1, r6
 8005418:	5dc7      	ldrb	r7, [r0, r7]
 800541a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800541e:	4637      	mov	r7, r6
 8005420:	42bb      	cmp	r3, r7
 8005422:	460e      	mov	r6, r1
 8005424:	d9f4      	bls.n	8005410 <_printf_i+0x11c>
 8005426:	2b08      	cmp	r3, #8
 8005428:	d10b      	bne.n	8005442 <_printf_i+0x14e>
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	07de      	lsls	r6, r3, #31
 800542e:	d508      	bpl.n	8005442 <_printf_i+0x14e>
 8005430:	6923      	ldr	r3, [r4, #16]
 8005432:	6861      	ldr	r1, [r4, #4]
 8005434:	4299      	cmp	r1, r3
 8005436:	bfde      	ittt	le
 8005438:	2330      	movle	r3, #48	; 0x30
 800543a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800543e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005442:	1b52      	subs	r2, r2, r5
 8005444:	6122      	str	r2, [r4, #16]
 8005446:	464b      	mov	r3, r9
 8005448:	4621      	mov	r1, r4
 800544a:	4640      	mov	r0, r8
 800544c:	f8cd a000 	str.w	sl, [sp]
 8005450:	aa03      	add	r2, sp, #12
 8005452:	f7ff fedf 	bl	8005214 <_printf_common>
 8005456:	3001      	adds	r0, #1
 8005458:	d14c      	bne.n	80054f4 <_printf_i+0x200>
 800545a:	f04f 30ff 	mov.w	r0, #4294967295
 800545e:	b004      	add	sp, #16
 8005460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005464:	4834      	ldr	r0, [pc, #208]	; (8005538 <_printf_i+0x244>)
 8005466:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800546a:	6829      	ldr	r1, [r5, #0]
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005472:	6029      	str	r1, [r5, #0]
 8005474:	061d      	lsls	r5, r3, #24
 8005476:	d514      	bpl.n	80054a2 <_printf_i+0x1ae>
 8005478:	07df      	lsls	r7, r3, #31
 800547a:	bf44      	itt	mi
 800547c:	f043 0320 	orrmi.w	r3, r3, #32
 8005480:	6023      	strmi	r3, [r4, #0]
 8005482:	b91e      	cbnz	r6, 800548c <_printf_i+0x198>
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	f023 0320 	bic.w	r3, r3, #32
 800548a:	6023      	str	r3, [r4, #0]
 800548c:	2310      	movs	r3, #16
 800548e:	e7af      	b.n	80053f0 <_printf_i+0xfc>
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	f043 0320 	orr.w	r3, r3, #32
 8005496:	6023      	str	r3, [r4, #0]
 8005498:	2378      	movs	r3, #120	; 0x78
 800549a:	4828      	ldr	r0, [pc, #160]	; (800553c <_printf_i+0x248>)
 800549c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054a0:	e7e3      	b.n	800546a <_printf_i+0x176>
 80054a2:	0659      	lsls	r1, r3, #25
 80054a4:	bf48      	it	mi
 80054a6:	b2b6      	uxthmi	r6, r6
 80054a8:	e7e6      	b.n	8005478 <_printf_i+0x184>
 80054aa:	4615      	mov	r5, r2
 80054ac:	e7bb      	b.n	8005426 <_printf_i+0x132>
 80054ae:	682b      	ldr	r3, [r5, #0]
 80054b0:	6826      	ldr	r6, [r4, #0]
 80054b2:	1d18      	adds	r0, r3, #4
 80054b4:	6961      	ldr	r1, [r4, #20]
 80054b6:	6028      	str	r0, [r5, #0]
 80054b8:	0635      	lsls	r5, r6, #24
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	d501      	bpl.n	80054c2 <_printf_i+0x1ce>
 80054be:	6019      	str	r1, [r3, #0]
 80054c0:	e002      	b.n	80054c8 <_printf_i+0x1d4>
 80054c2:	0670      	lsls	r0, r6, #25
 80054c4:	d5fb      	bpl.n	80054be <_printf_i+0x1ca>
 80054c6:	8019      	strh	r1, [r3, #0]
 80054c8:	2300      	movs	r3, #0
 80054ca:	4615      	mov	r5, r2
 80054cc:	6123      	str	r3, [r4, #16]
 80054ce:	e7ba      	b.n	8005446 <_printf_i+0x152>
 80054d0:	682b      	ldr	r3, [r5, #0]
 80054d2:	2100      	movs	r1, #0
 80054d4:	1d1a      	adds	r2, r3, #4
 80054d6:	602a      	str	r2, [r5, #0]
 80054d8:	681d      	ldr	r5, [r3, #0]
 80054da:	6862      	ldr	r2, [r4, #4]
 80054dc:	4628      	mov	r0, r5
 80054de:	f000 f82f 	bl	8005540 <memchr>
 80054e2:	b108      	cbz	r0, 80054e8 <_printf_i+0x1f4>
 80054e4:	1b40      	subs	r0, r0, r5
 80054e6:	6060      	str	r0, [r4, #4]
 80054e8:	6863      	ldr	r3, [r4, #4]
 80054ea:	6123      	str	r3, [r4, #16]
 80054ec:	2300      	movs	r3, #0
 80054ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054f2:	e7a8      	b.n	8005446 <_printf_i+0x152>
 80054f4:	462a      	mov	r2, r5
 80054f6:	4649      	mov	r1, r9
 80054f8:	4640      	mov	r0, r8
 80054fa:	6923      	ldr	r3, [r4, #16]
 80054fc:	47d0      	blx	sl
 80054fe:	3001      	adds	r0, #1
 8005500:	d0ab      	beq.n	800545a <_printf_i+0x166>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	079b      	lsls	r3, r3, #30
 8005506:	d413      	bmi.n	8005530 <_printf_i+0x23c>
 8005508:	68e0      	ldr	r0, [r4, #12]
 800550a:	9b03      	ldr	r3, [sp, #12]
 800550c:	4298      	cmp	r0, r3
 800550e:	bfb8      	it	lt
 8005510:	4618      	movlt	r0, r3
 8005512:	e7a4      	b.n	800545e <_printf_i+0x16a>
 8005514:	2301      	movs	r3, #1
 8005516:	4632      	mov	r2, r6
 8005518:	4649      	mov	r1, r9
 800551a:	4640      	mov	r0, r8
 800551c:	47d0      	blx	sl
 800551e:	3001      	adds	r0, #1
 8005520:	d09b      	beq.n	800545a <_printf_i+0x166>
 8005522:	3501      	adds	r5, #1
 8005524:	68e3      	ldr	r3, [r4, #12]
 8005526:	9903      	ldr	r1, [sp, #12]
 8005528:	1a5b      	subs	r3, r3, r1
 800552a:	42ab      	cmp	r3, r5
 800552c:	dcf2      	bgt.n	8005514 <_printf_i+0x220>
 800552e:	e7eb      	b.n	8005508 <_printf_i+0x214>
 8005530:	2500      	movs	r5, #0
 8005532:	f104 0619 	add.w	r6, r4, #25
 8005536:	e7f5      	b.n	8005524 <_printf_i+0x230>
 8005538:	08005d47 	.word	0x08005d47
 800553c:	08005d58 	.word	0x08005d58

08005540 <memchr>:
 8005540:	4603      	mov	r3, r0
 8005542:	b510      	push	{r4, lr}
 8005544:	b2c9      	uxtb	r1, r1
 8005546:	4402      	add	r2, r0
 8005548:	4293      	cmp	r3, r2
 800554a:	4618      	mov	r0, r3
 800554c:	d101      	bne.n	8005552 <memchr+0x12>
 800554e:	2000      	movs	r0, #0
 8005550:	e003      	b.n	800555a <memchr+0x1a>
 8005552:	7804      	ldrb	r4, [r0, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	428c      	cmp	r4, r1
 8005558:	d1f6      	bne.n	8005548 <memchr+0x8>
 800555a:	bd10      	pop	{r4, pc}

0800555c <memcpy>:
 800555c:	440a      	add	r2, r1
 800555e:	4291      	cmp	r1, r2
 8005560:	f100 33ff 	add.w	r3, r0, #4294967295
 8005564:	d100      	bne.n	8005568 <memcpy+0xc>
 8005566:	4770      	bx	lr
 8005568:	b510      	push	{r4, lr}
 800556a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800556e:	4291      	cmp	r1, r2
 8005570:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005574:	d1f9      	bne.n	800556a <memcpy+0xe>
 8005576:	bd10      	pop	{r4, pc}

08005578 <memmove>:
 8005578:	4288      	cmp	r0, r1
 800557a:	b510      	push	{r4, lr}
 800557c:	eb01 0402 	add.w	r4, r1, r2
 8005580:	d902      	bls.n	8005588 <memmove+0x10>
 8005582:	4284      	cmp	r4, r0
 8005584:	4623      	mov	r3, r4
 8005586:	d807      	bhi.n	8005598 <memmove+0x20>
 8005588:	1e43      	subs	r3, r0, #1
 800558a:	42a1      	cmp	r1, r4
 800558c:	d008      	beq.n	80055a0 <memmove+0x28>
 800558e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005592:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005596:	e7f8      	b.n	800558a <memmove+0x12>
 8005598:	4601      	mov	r1, r0
 800559a:	4402      	add	r2, r0
 800559c:	428a      	cmp	r2, r1
 800559e:	d100      	bne.n	80055a2 <memmove+0x2a>
 80055a0:	bd10      	pop	{r4, pc}
 80055a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055aa:	e7f7      	b.n	800559c <memmove+0x24>

080055ac <_free_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	4605      	mov	r5, r0
 80055b0:	2900      	cmp	r1, #0
 80055b2:	d040      	beq.n	8005636 <_free_r+0x8a>
 80055b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055b8:	1f0c      	subs	r4, r1, #4
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bfb8      	it	lt
 80055be:	18e4      	addlt	r4, r4, r3
 80055c0:	f000 f910 	bl	80057e4 <__malloc_lock>
 80055c4:	4a1c      	ldr	r2, [pc, #112]	; (8005638 <_free_r+0x8c>)
 80055c6:	6813      	ldr	r3, [r2, #0]
 80055c8:	b933      	cbnz	r3, 80055d8 <_free_r+0x2c>
 80055ca:	6063      	str	r3, [r4, #4]
 80055cc:	6014      	str	r4, [r2, #0]
 80055ce:	4628      	mov	r0, r5
 80055d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055d4:	f000 b90c 	b.w	80057f0 <__malloc_unlock>
 80055d8:	42a3      	cmp	r3, r4
 80055da:	d908      	bls.n	80055ee <_free_r+0x42>
 80055dc:	6820      	ldr	r0, [r4, #0]
 80055de:	1821      	adds	r1, r4, r0
 80055e0:	428b      	cmp	r3, r1
 80055e2:	bf01      	itttt	eq
 80055e4:	6819      	ldreq	r1, [r3, #0]
 80055e6:	685b      	ldreq	r3, [r3, #4]
 80055e8:	1809      	addeq	r1, r1, r0
 80055ea:	6021      	streq	r1, [r4, #0]
 80055ec:	e7ed      	b.n	80055ca <_free_r+0x1e>
 80055ee:	461a      	mov	r2, r3
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	b10b      	cbz	r3, 80055f8 <_free_r+0x4c>
 80055f4:	42a3      	cmp	r3, r4
 80055f6:	d9fa      	bls.n	80055ee <_free_r+0x42>
 80055f8:	6811      	ldr	r1, [r2, #0]
 80055fa:	1850      	adds	r0, r2, r1
 80055fc:	42a0      	cmp	r0, r4
 80055fe:	d10b      	bne.n	8005618 <_free_r+0x6c>
 8005600:	6820      	ldr	r0, [r4, #0]
 8005602:	4401      	add	r1, r0
 8005604:	1850      	adds	r0, r2, r1
 8005606:	4283      	cmp	r3, r0
 8005608:	6011      	str	r1, [r2, #0]
 800560a:	d1e0      	bne.n	80055ce <_free_r+0x22>
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4401      	add	r1, r0
 8005612:	6011      	str	r1, [r2, #0]
 8005614:	6053      	str	r3, [r2, #4]
 8005616:	e7da      	b.n	80055ce <_free_r+0x22>
 8005618:	d902      	bls.n	8005620 <_free_r+0x74>
 800561a:	230c      	movs	r3, #12
 800561c:	602b      	str	r3, [r5, #0]
 800561e:	e7d6      	b.n	80055ce <_free_r+0x22>
 8005620:	6820      	ldr	r0, [r4, #0]
 8005622:	1821      	adds	r1, r4, r0
 8005624:	428b      	cmp	r3, r1
 8005626:	bf01      	itttt	eq
 8005628:	6819      	ldreq	r1, [r3, #0]
 800562a:	685b      	ldreq	r3, [r3, #4]
 800562c:	1809      	addeq	r1, r1, r0
 800562e:	6021      	streq	r1, [r4, #0]
 8005630:	6063      	str	r3, [r4, #4]
 8005632:	6054      	str	r4, [r2, #4]
 8005634:	e7cb      	b.n	80055ce <_free_r+0x22>
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	200001c4 	.word	0x200001c4

0800563c <sbrk_aligned>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	4e0e      	ldr	r6, [pc, #56]	; (8005678 <sbrk_aligned+0x3c>)
 8005640:	460c      	mov	r4, r1
 8005642:	6831      	ldr	r1, [r6, #0]
 8005644:	4605      	mov	r5, r0
 8005646:	b911      	cbnz	r1, 800564e <sbrk_aligned+0x12>
 8005648:	f000 f8bc 	bl	80057c4 <_sbrk_r>
 800564c:	6030      	str	r0, [r6, #0]
 800564e:	4621      	mov	r1, r4
 8005650:	4628      	mov	r0, r5
 8005652:	f000 f8b7 	bl	80057c4 <_sbrk_r>
 8005656:	1c43      	adds	r3, r0, #1
 8005658:	d00a      	beq.n	8005670 <sbrk_aligned+0x34>
 800565a:	1cc4      	adds	r4, r0, #3
 800565c:	f024 0403 	bic.w	r4, r4, #3
 8005660:	42a0      	cmp	r0, r4
 8005662:	d007      	beq.n	8005674 <sbrk_aligned+0x38>
 8005664:	1a21      	subs	r1, r4, r0
 8005666:	4628      	mov	r0, r5
 8005668:	f000 f8ac 	bl	80057c4 <_sbrk_r>
 800566c:	3001      	adds	r0, #1
 800566e:	d101      	bne.n	8005674 <sbrk_aligned+0x38>
 8005670:	f04f 34ff 	mov.w	r4, #4294967295
 8005674:	4620      	mov	r0, r4
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	200001c8 	.word	0x200001c8

0800567c <_malloc_r>:
 800567c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005680:	1ccd      	adds	r5, r1, #3
 8005682:	f025 0503 	bic.w	r5, r5, #3
 8005686:	3508      	adds	r5, #8
 8005688:	2d0c      	cmp	r5, #12
 800568a:	bf38      	it	cc
 800568c:	250c      	movcc	r5, #12
 800568e:	2d00      	cmp	r5, #0
 8005690:	4607      	mov	r7, r0
 8005692:	db01      	blt.n	8005698 <_malloc_r+0x1c>
 8005694:	42a9      	cmp	r1, r5
 8005696:	d905      	bls.n	80056a4 <_malloc_r+0x28>
 8005698:	230c      	movs	r3, #12
 800569a:	2600      	movs	r6, #0
 800569c:	603b      	str	r3, [r7, #0]
 800569e:	4630      	mov	r0, r6
 80056a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056a4:	4e2e      	ldr	r6, [pc, #184]	; (8005760 <_malloc_r+0xe4>)
 80056a6:	f000 f89d 	bl	80057e4 <__malloc_lock>
 80056aa:	6833      	ldr	r3, [r6, #0]
 80056ac:	461c      	mov	r4, r3
 80056ae:	bb34      	cbnz	r4, 80056fe <_malloc_r+0x82>
 80056b0:	4629      	mov	r1, r5
 80056b2:	4638      	mov	r0, r7
 80056b4:	f7ff ffc2 	bl	800563c <sbrk_aligned>
 80056b8:	1c43      	adds	r3, r0, #1
 80056ba:	4604      	mov	r4, r0
 80056bc:	d14d      	bne.n	800575a <_malloc_r+0xde>
 80056be:	6834      	ldr	r4, [r6, #0]
 80056c0:	4626      	mov	r6, r4
 80056c2:	2e00      	cmp	r6, #0
 80056c4:	d140      	bne.n	8005748 <_malloc_r+0xcc>
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	4631      	mov	r1, r6
 80056ca:	4638      	mov	r0, r7
 80056cc:	eb04 0803 	add.w	r8, r4, r3
 80056d0:	f000 f878 	bl	80057c4 <_sbrk_r>
 80056d4:	4580      	cmp	r8, r0
 80056d6:	d13a      	bne.n	800574e <_malloc_r+0xd2>
 80056d8:	6821      	ldr	r1, [r4, #0]
 80056da:	3503      	adds	r5, #3
 80056dc:	1a6d      	subs	r5, r5, r1
 80056de:	f025 0503 	bic.w	r5, r5, #3
 80056e2:	3508      	adds	r5, #8
 80056e4:	2d0c      	cmp	r5, #12
 80056e6:	bf38      	it	cc
 80056e8:	250c      	movcc	r5, #12
 80056ea:	4638      	mov	r0, r7
 80056ec:	4629      	mov	r1, r5
 80056ee:	f7ff ffa5 	bl	800563c <sbrk_aligned>
 80056f2:	3001      	adds	r0, #1
 80056f4:	d02b      	beq.n	800574e <_malloc_r+0xd2>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	442b      	add	r3, r5
 80056fa:	6023      	str	r3, [r4, #0]
 80056fc:	e00e      	b.n	800571c <_malloc_r+0xa0>
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	1b52      	subs	r2, r2, r5
 8005702:	d41e      	bmi.n	8005742 <_malloc_r+0xc6>
 8005704:	2a0b      	cmp	r2, #11
 8005706:	d916      	bls.n	8005736 <_malloc_r+0xba>
 8005708:	1961      	adds	r1, r4, r5
 800570a:	42a3      	cmp	r3, r4
 800570c:	6025      	str	r5, [r4, #0]
 800570e:	bf18      	it	ne
 8005710:	6059      	strne	r1, [r3, #4]
 8005712:	6863      	ldr	r3, [r4, #4]
 8005714:	bf08      	it	eq
 8005716:	6031      	streq	r1, [r6, #0]
 8005718:	5162      	str	r2, [r4, r5]
 800571a:	604b      	str	r3, [r1, #4]
 800571c:	4638      	mov	r0, r7
 800571e:	f104 060b 	add.w	r6, r4, #11
 8005722:	f000 f865 	bl	80057f0 <__malloc_unlock>
 8005726:	f026 0607 	bic.w	r6, r6, #7
 800572a:	1d23      	adds	r3, r4, #4
 800572c:	1af2      	subs	r2, r6, r3
 800572e:	d0b6      	beq.n	800569e <_malloc_r+0x22>
 8005730:	1b9b      	subs	r3, r3, r6
 8005732:	50a3      	str	r3, [r4, r2]
 8005734:	e7b3      	b.n	800569e <_malloc_r+0x22>
 8005736:	6862      	ldr	r2, [r4, #4]
 8005738:	42a3      	cmp	r3, r4
 800573a:	bf0c      	ite	eq
 800573c:	6032      	streq	r2, [r6, #0]
 800573e:	605a      	strne	r2, [r3, #4]
 8005740:	e7ec      	b.n	800571c <_malloc_r+0xa0>
 8005742:	4623      	mov	r3, r4
 8005744:	6864      	ldr	r4, [r4, #4]
 8005746:	e7b2      	b.n	80056ae <_malloc_r+0x32>
 8005748:	4634      	mov	r4, r6
 800574a:	6876      	ldr	r6, [r6, #4]
 800574c:	e7b9      	b.n	80056c2 <_malloc_r+0x46>
 800574e:	230c      	movs	r3, #12
 8005750:	4638      	mov	r0, r7
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	f000 f84c 	bl	80057f0 <__malloc_unlock>
 8005758:	e7a1      	b.n	800569e <_malloc_r+0x22>
 800575a:	6025      	str	r5, [r4, #0]
 800575c:	e7de      	b.n	800571c <_malloc_r+0xa0>
 800575e:	bf00      	nop
 8005760:	200001c4 	.word	0x200001c4

08005764 <_realloc_r>:
 8005764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005768:	4680      	mov	r8, r0
 800576a:	4614      	mov	r4, r2
 800576c:	460e      	mov	r6, r1
 800576e:	b921      	cbnz	r1, 800577a <_realloc_r+0x16>
 8005770:	4611      	mov	r1, r2
 8005772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005776:	f7ff bf81 	b.w	800567c <_malloc_r>
 800577a:	b92a      	cbnz	r2, 8005788 <_realloc_r+0x24>
 800577c:	f7ff ff16 	bl	80055ac <_free_r>
 8005780:	4625      	mov	r5, r4
 8005782:	4628      	mov	r0, r5
 8005784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005788:	f000 f838 	bl	80057fc <_malloc_usable_size_r>
 800578c:	4284      	cmp	r4, r0
 800578e:	4607      	mov	r7, r0
 8005790:	d802      	bhi.n	8005798 <_realloc_r+0x34>
 8005792:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005796:	d812      	bhi.n	80057be <_realloc_r+0x5a>
 8005798:	4621      	mov	r1, r4
 800579a:	4640      	mov	r0, r8
 800579c:	f7ff ff6e 	bl	800567c <_malloc_r>
 80057a0:	4605      	mov	r5, r0
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d0ed      	beq.n	8005782 <_realloc_r+0x1e>
 80057a6:	42bc      	cmp	r4, r7
 80057a8:	4622      	mov	r2, r4
 80057aa:	4631      	mov	r1, r6
 80057ac:	bf28      	it	cs
 80057ae:	463a      	movcs	r2, r7
 80057b0:	f7ff fed4 	bl	800555c <memcpy>
 80057b4:	4631      	mov	r1, r6
 80057b6:	4640      	mov	r0, r8
 80057b8:	f7ff fef8 	bl	80055ac <_free_r>
 80057bc:	e7e1      	b.n	8005782 <_realloc_r+0x1e>
 80057be:	4635      	mov	r5, r6
 80057c0:	e7df      	b.n	8005782 <_realloc_r+0x1e>
	...

080057c4 <_sbrk_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	2300      	movs	r3, #0
 80057c8:	4d05      	ldr	r5, [pc, #20]	; (80057e0 <_sbrk_r+0x1c>)
 80057ca:	4604      	mov	r4, r0
 80057cc:	4608      	mov	r0, r1
 80057ce:	602b      	str	r3, [r5, #0]
 80057d0:	f7fc f82c 	bl	800182c <_sbrk>
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	d102      	bne.n	80057de <_sbrk_r+0x1a>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	b103      	cbz	r3, 80057de <_sbrk_r+0x1a>
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	bd38      	pop	{r3, r4, r5, pc}
 80057e0:	200001cc 	.word	0x200001cc

080057e4 <__malloc_lock>:
 80057e4:	4801      	ldr	r0, [pc, #4]	; (80057ec <__malloc_lock+0x8>)
 80057e6:	f000 b811 	b.w	800580c <__retarget_lock_acquire_recursive>
 80057ea:	bf00      	nop
 80057ec:	200001d0 	.word	0x200001d0

080057f0 <__malloc_unlock>:
 80057f0:	4801      	ldr	r0, [pc, #4]	; (80057f8 <__malloc_unlock+0x8>)
 80057f2:	f000 b80c 	b.w	800580e <__retarget_lock_release_recursive>
 80057f6:	bf00      	nop
 80057f8:	200001d0 	.word	0x200001d0

080057fc <_malloc_usable_size_r>:
 80057fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005800:	1f18      	subs	r0, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	bfbc      	itt	lt
 8005806:	580b      	ldrlt	r3, [r1, r0]
 8005808:	18c0      	addlt	r0, r0, r3
 800580a:	4770      	bx	lr

0800580c <__retarget_lock_acquire_recursive>:
 800580c:	4770      	bx	lr

0800580e <__retarget_lock_release_recursive>:
 800580e:	4770      	bx	lr

08005810 <atan2>:
 8005810:	f000 b802 	b.w	8005818 <__ieee754_atan2>
 8005814:	0000      	movs	r0, r0
	...

08005818 <__ieee754_atan2>:
 8005818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800581c:	4692      	mov	sl, r2
 800581e:	4699      	mov	r9, r3
 8005820:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005824:	461f      	mov	r7, r3
 8005826:	f1ca 0300 	rsb	r3, sl, #0
 800582a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80059b0 <__ieee754_atan2+0x198>
 800582e:	ea43 030a 	orr.w	r3, r3, sl
 8005832:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005836:	4573      	cmp	r3, lr
 8005838:	4604      	mov	r4, r0
 800583a:	460d      	mov	r5, r1
 800583c:	d808      	bhi.n	8005850 <__ieee754_atan2+0x38>
 800583e:	4246      	negs	r6, r0
 8005840:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005844:	4306      	orrs	r6, r0
 8005846:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800584a:	4576      	cmp	r6, lr
 800584c:	468c      	mov	ip, r1
 800584e:	d908      	bls.n	8005862 <__ieee754_atan2+0x4a>
 8005850:	4652      	mov	r2, sl
 8005852:	464b      	mov	r3, r9
 8005854:	4620      	mov	r0, r4
 8005856:	4629      	mov	r1, r5
 8005858:	f7fa fc88 	bl	800016c <__adddf3>
 800585c:	4604      	mov	r4, r0
 800585e:	460d      	mov	r5, r1
 8005860:	e019      	b.n	8005896 <__ieee754_atan2+0x7e>
 8005862:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8005866:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800586a:	ea56 060a 	orrs.w	r6, r6, sl
 800586e:	d103      	bne.n	8005878 <__ieee754_atan2+0x60>
 8005870:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005874:	f000 b8a4 	b.w	80059c0 <atan>
 8005878:	17be      	asrs	r6, r7, #30
 800587a:	f006 0602 	and.w	r6, r6, #2
 800587e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8005882:	ea53 0100 	orrs.w	r1, r3, r0
 8005886:	d10a      	bne.n	800589e <__ieee754_atan2+0x86>
 8005888:	2e02      	cmp	r6, #2
 800588a:	d067      	beq.n	800595c <__ieee754_atan2+0x144>
 800588c:	2e03      	cmp	r6, #3
 800588e:	d102      	bne.n	8005896 <__ieee754_atan2+0x7e>
 8005890:	a53b      	add	r5, pc, #236	; (adr r5, 8005980 <__ieee754_atan2+0x168>)
 8005892:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005896:	4620      	mov	r0, r4
 8005898:	4629      	mov	r1, r5
 800589a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800589e:	ea52 010a 	orrs.w	r1, r2, sl
 80058a2:	d106      	bne.n	80058b2 <__ieee754_atan2+0x9a>
 80058a4:	f1bc 0f00 	cmp.w	ip, #0
 80058a8:	da63      	bge.n	8005972 <__ieee754_atan2+0x15a>
 80058aa:	a537      	add	r5, pc, #220	; (adr r5, 8005988 <__ieee754_atan2+0x170>)
 80058ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80058b0:	e7f1      	b.n	8005896 <__ieee754_atan2+0x7e>
 80058b2:	4572      	cmp	r2, lr
 80058b4:	d10f      	bne.n	80058d6 <__ieee754_atan2+0xbe>
 80058b6:	4293      	cmp	r3, r2
 80058b8:	f106 36ff 	add.w	r6, r6, #4294967295
 80058bc:	d107      	bne.n	80058ce <__ieee754_atan2+0xb6>
 80058be:	2e02      	cmp	r6, #2
 80058c0:	d850      	bhi.n	8005964 <__ieee754_atan2+0x14c>
 80058c2:	4b3c      	ldr	r3, [pc, #240]	; (80059b4 <__ieee754_atan2+0x19c>)
 80058c4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80058c8:	e9d6 4500 	ldrd	r4, r5, [r6]
 80058cc:	e7e3      	b.n	8005896 <__ieee754_atan2+0x7e>
 80058ce:	2e02      	cmp	r6, #2
 80058d0:	d84c      	bhi.n	800596c <__ieee754_atan2+0x154>
 80058d2:	4b39      	ldr	r3, [pc, #228]	; (80059b8 <__ieee754_atan2+0x1a0>)
 80058d4:	e7f6      	b.n	80058c4 <__ieee754_atan2+0xac>
 80058d6:	4573      	cmp	r3, lr
 80058d8:	d0e4      	beq.n	80058a4 <__ieee754_atan2+0x8c>
 80058da:	1a9b      	subs	r3, r3, r2
 80058dc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80058e0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80058e4:	da20      	bge.n	8005928 <__ieee754_atan2+0x110>
 80058e6:	2f00      	cmp	r7, #0
 80058e8:	da01      	bge.n	80058ee <__ieee754_atan2+0xd6>
 80058ea:	323c      	adds	r2, #60	; 0x3c
 80058ec:	db20      	blt.n	8005930 <__ieee754_atan2+0x118>
 80058ee:	4652      	mov	r2, sl
 80058f0:	464b      	mov	r3, r9
 80058f2:	4620      	mov	r0, r4
 80058f4:	4629      	mov	r1, r5
 80058f6:	f7fa ff19 	bl	800072c <__aeabi_ddiv>
 80058fa:	f000 f9eb 	bl	8005cd4 <fabs>
 80058fe:	f000 f85f 	bl	80059c0 <atan>
 8005902:	4604      	mov	r4, r0
 8005904:	460d      	mov	r5, r1
 8005906:	2e01      	cmp	r6, #1
 8005908:	d015      	beq.n	8005936 <__ieee754_atan2+0x11e>
 800590a:	2e02      	cmp	r6, #2
 800590c:	d017      	beq.n	800593e <__ieee754_atan2+0x126>
 800590e:	2e00      	cmp	r6, #0
 8005910:	d0c1      	beq.n	8005896 <__ieee754_atan2+0x7e>
 8005912:	a31f      	add	r3, pc, #124	; (adr r3, 8005990 <__ieee754_atan2+0x178>)
 8005914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005918:	4620      	mov	r0, r4
 800591a:	4629      	mov	r1, r5
 800591c:	f7fa fc24 	bl	8000168 <__aeabi_dsub>
 8005920:	a31d      	add	r3, pc, #116	; (adr r3, 8005998 <__ieee754_atan2+0x180>)
 8005922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005926:	e016      	b.n	8005956 <__ieee754_atan2+0x13e>
 8005928:	a51d      	add	r5, pc, #116	; (adr r5, 80059a0 <__ieee754_atan2+0x188>)
 800592a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800592e:	e7ea      	b.n	8005906 <__ieee754_atan2+0xee>
 8005930:	2400      	movs	r4, #0
 8005932:	2500      	movs	r5, #0
 8005934:	e7e7      	b.n	8005906 <__ieee754_atan2+0xee>
 8005936:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800593a:	461d      	mov	r5, r3
 800593c:	e7ab      	b.n	8005896 <__ieee754_atan2+0x7e>
 800593e:	a314      	add	r3, pc, #80	; (adr r3, 8005990 <__ieee754_atan2+0x178>)
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	4620      	mov	r0, r4
 8005946:	4629      	mov	r1, r5
 8005948:	f7fa fc0e 	bl	8000168 <__aeabi_dsub>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	a111      	add	r1, pc, #68	; (adr r1, 8005998 <__ieee754_atan2+0x180>)
 8005952:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005956:	f7fa fc07 	bl	8000168 <__aeabi_dsub>
 800595a:	e77f      	b.n	800585c <__ieee754_atan2+0x44>
 800595c:	a50e      	add	r5, pc, #56	; (adr r5, 8005998 <__ieee754_atan2+0x180>)
 800595e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005962:	e798      	b.n	8005896 <__ieee754_atan2+0x7e>
 8005964:	a510      	add	r5, pc, #64	; (adr r5, 80059a8 <__ieee754_atan2+0x190>)
 8005966:	e9d5 4500 	ldrd	r4, r5, [r5]
 800596a:	e794      	b.n	8005896 <__ieee754_atan2+0x7e>
 800596c:	2400      	movs	r4, #0
 800596e:	2500      	movs	r5, #0
 8005970:	e791      	b.n	8005896 <__ieee754_atan2+0x7e>
 8005972:	a50b      	add	r5, pc, #44	; (adr r5, 80059a0 <__ieee754_atan2+0x188>)
 8005974:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005978:	e78d      	b.n	8005896 <__ieee754_atan2+0x7e>
 800597a:	bf00      	nop
 800597c:	f3af 8000 	nop.w
 8005980:	54442d18 	.word	0x54442d18
 8005984:	c00921fb 	.word	0xc00921fb
 8005988:	54442d18 	.word	0x54442d18
 800598c:	bff921fb 	.word	0xbff921fb
 8005990:	33145c07 	.word	0x33145c07
 8005994:	3ca1a626 	.word	0x3ca1a626
 8005998:	54442d18 	.word	0x54442d18
 800599c:	400921fb 	.word	0x400921fb
 80059a0:	54442d18 	.word	0x54442d18
 80059a4:	3ff921fb 	.word	0x3ff921fb
 80059a8:	54442d18 	.word	0x54442d18
 80059ac:	3fe921fb 	.word	0x3fe921fb
 80059b0:	7ff00000 	.word	0x7ff00000
 80059b4:	08005d70 	.word	0x08005d70
 80059b8:	08005d88 	.word	0x08005d88
 80059bc:	00000000 	.word	0x00000000

080059c0 <atan>:
 80059c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c4:	4bb6      	ldr	r3, [pc, #728]	; (8005ca0 <atan+0x2e0>)
 80059c6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80059ca:	429e      	cmp	r6, r3
 80059cc:	4604      	mov	r4, r0
 80059ce:	460d      	mov	r5, r1
 80059d0:	468b      	mov	fp, r1
 80059d2:	dd17      	ble.n	8005a04 <atan+0x44>
 80059d4:	4bb3      	ldr	r3, [pc, #716]	; (8005ca4 <atan+0x2e4>)
 80059d6:	429e      	cmp	r6, r3
 80059d8:	dc01      	bgt.n	80059de <atan+0x1e>
 80059da:	d109      	bne.n	80059f0 <atan+0x30>
 80059dc:	b140      	cbz	r0, 80059f0 <atan+0x30>
 80059de:	4622      	mov	r2, r4
 80059e0:	462b      	mov	r3, r5
 80059e2:	4620      	mov	r0, r4
 80059e4:	4629      	mov	r1, r5
 80059e6:	f7fa fbc1 	bl	800016c <__adddf3>
 80059ea:	4604      	mov	r4, r0
 80059ec:	460d      	mov	r5, r1
 80059ee:	e005      	b.n	80059fc <atan+0x3c>
 80059f0:	f1bb 0f00 	cmp.w	fp, #0
 80059f4:	4cac      	ldr	r4, [pc, #688]	; (8005ca8 <atan+0x2e8>)
 80059f6:	f300 8121 	bgt.w	8005c3c <atan+0x27c>
 80059fa:	4dac      	ldr	r5, [pc, #688]	; (8005cac <atan+0x2ec>)
 80059fc:	4620      	mov	r0, r4
 80059fe:	4629      	mov	r1, r5
 8005a00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a04:	4baa      	ldr	r3, [pc, #680]	; (8005cb0 <atan+0x2f0>)
 8005a06:	429e      	cmp	r6, r3
 8005a08:	dc11      	bgt.n	8005a2e <atan+0x6e>
 8005a0a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005a0e:	429e      	cmp	r6, r3
 8005a10:	dc0a      	bgt.n	8005a28 <atan+0x68>
 8005a12:	a38b      	add	r3, pc, #556	; (adr r3, 8005c40 <atan+0x280>)
 8005a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a18:	f7fa fba8 	bl	800016c <__adddf3>
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	4ba5      	ldr	r3, [pc, #660]	; (8005cb4 <atan+0x2f4>)
 8005a20:	f7fa ffea 	bl	80009f8 <__aeabi_dcmpgt>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d1e9      	bne.n	80059fc <atan+0x3c>
 8005a28:	f04f 3aff 	mov.w	sl, #4294967295
 8005a2c:	e027      	b.n	8005a7e <atan+0xbe>
 8005a2e:	f000 f951 	bl	8005cd4 <fabs>
 8005a32:	4ba1      	ldr	r3, [pc, #644]	; (8005cb8 <atan+0x2f8>)
 8005a34:	4604      	mov	r4, r0
 8005a36:	429e      	cmp	r6, r3
 8005a38:	460d      	mov	r5, r1
 8005a3a:	f300 80b8 	bgt.w	8005bae <atan+0x1ee>
 8005a3e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005a42:	429e      	cmp	r6, r3
 8005a44:	f300 809c 	bgt.w	8005b80 <atan+0x1c0>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	f7fa fb8e 	bl	800016c <__adddf3>
 8005a50:	2200      	movs	r2, #0
 8005a52:	4b98      	ldr	r3, [pc, #608]	; (8005cb4 <atan+0x2f4>)
 8005a54:	f7fa fb88 	bl	8000168 <__aeabi_dsub>
 8005a58:	2200      	movs	r2, #0
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	460f      	mov	r7, r1
 8005a5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a62:	4620      	mov	r0, r4
 8005a64:	4629      	mov	r1, r5
 8005a66:	f7fa fb81 	bl	800016c <__adddf3>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4630      	mov	r0, r6
 8005a70:	4639      	mov	r1, r7
 8005a72:	f7fa fe5b 	bl	800072c <__aeabi_ddiv>
 8005a76:	f04f 0a00 	mov.w	sl, #0
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	460d      	mov	r5, r1
 8005a7e:	4622      	mov	r2, r4
 8005a80:	462b      	mov	r3, r5
 8005a82:	4620      	mov	r0, r4
 8005a84:	4629      	mov	r1, r5
 8005a86:	f7fa fd27 	bl	80004d8 <__aeabi_dmul>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4680      	mov	r8, r0
 8005a90:	4689      	mov	r9, r1
 8005a92:	f7fa fd21 	bl	80004d8 <__aeabi_dmul>
 8005a96:	a36c      	add	r3, pc, #432	; (adr r3, 8005c48 <atan+0x288>)
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	4606      	mov	r6, r0
 8005a9e:	460f      	mov	r7, r1
 8005aa0:	f7fa fd1a 	bl	80004d8 <__aeabi_dmul>
 8005aa4:	a36a      	add	r3, pc, #424	; (adr r3, 8005c50 <atan+0x290>)
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	f7fa fb5f 	bl	800016c <__adddf3>
 8005aae:	4632      	mov	r2, r6
 8005ab0:	463b      	mov	r3, r7
 8005ab2:	f7fa fd11 	bl	80004d8 <__aeabi_dmul>
 8005ab6:	a368      	add	r3, pc, #416	; (adr r3, 8005c58 <atan+0x298>)
 8005ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abc:	f7fa fb56 	bl	800016c <__adddf3>
 8005ac0:	4632      	mov	r2, r6
 8005ac2:	463b      	mov	r3, r7
 8005ac4:	f7fa fd08 	bl	80004d8 <__aeabi_dmul>
 8005ac8:	a365      	add	r3, pc, #404	; (adr r3, 8005c60 <atan+0x2a0>)
 8005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ace:	f7fa fb4d 	bl	800016c <__adddf3>
 8005ad2:	4632      	mov	r2, r6
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	f7fa fcff 	bl	80004d8 <__aeabi_dmul>
 8005ada:	a363      	add	r3, pc, #396	; (adr r3, 8005c68 <atan+0x2a8>)
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	f7fa fb44 	bl	800016c <__adddf3>
 8005ae4:	4632      	mov	r2, r6
 8005ae6:	463b      	mov	r3, r7
 8005ae8:	f7fa fcf6 	bl	80004d8 <__aeabi_dmul>
 8005aec:	a360      	add	r3, pc, #384	; (adr r3, 8005c70 <atan+0x2b0>)
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	f7fa fb3b 	bl	800016c <__adddf3>
 8005af6:	4642      	mov	r2, r8
 8005af8:	464b      	mov	r3, r9
 8005afa:	f7fa fced 	bl	80004d8 <__aeabi_dmul>
 8005afe:	a35e      	add	r3, pc, #376	; (adr r3, 8005c78 <atan+0x2b8>)
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	4680      	mov	r8, r0
 8005b06:	4689      	mov	r9, r1
 8005b08:	4630      	mov	r0, r6
 8005b0a:	4639      	mov	r1, r7
 8005b0c:	f7fa fce4 	bl	80004d8 <__aeabi_dmul>
 8005b10:	a35b      	add	r3, pc, #364	; (adr r3, 8005c80 <atan+0x2c0>)
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	f7fa fb27 	bl	8000168 <__aeabi_dsub>
 8005b1a:	4632      	mov	r2, r6
 8005b1c:	463b      	mov	r3, r7
 8005b1e:	f7fa fcdb 	bl	80004d8 <__aeabi_dmul>
 8005b22:	a359      	add	r3, pc, #356	; (adr r3, 8005c88 <atan+0x2c8>)
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f7fa fb1e 	bl	8000168 <__aeabi_dsub>
 8005b2c:	4632      	mov	r2, r6
 8005b2e:	463b      	mov	r3, r7
 8005b30:	f7fa fcd2 	bl	80004d8 <__aeabi_dmul>
 8005b34:	a356      	add	r3, pc, #344	; (adr r3, 8005c90 <atan+0x2d0>)
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	f7fa fb15 	bl	8000168 <__aeabi_dsub>
 8005b3e:	4632      	mov	r2, r6
 8005b40:	463b      	mov	r3, r7
 8005b42:	f7fa fcc9 	bl	80004d8 <__aeabi_dmul>
 8005b46:	a354      	add	r3, pc, #336	; (adr r3, 8005c98 <atan+0x2d8>)
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	f7fa fb0c 	bl	8000168 <__aeabi_dsub>
 8005b50:	4632      	mov	r2, r6
 8005b52:	463b      	mov	r3, r7
 8005b54:	f7fa fcc0 	bl	80004d8 <__aeabi_dmul>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4640      	mov	r0, r8
 8005b5e:	4649      	mov	r1, r9
 8005b60:	f7fa fb04 	bl	800016c <__adddf3>
 8005b64:	4622      	mov	r2, r4
 8005b66:	462b      	mov	r3, r5
 8005b68:	f7fa fcb6 	bl	80004d8 <__aeabi_dmul>
 8005b6c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	d144      	bne.n	8005c00 <atan+0x240>
 8005b76:	4620      	mov	r0, r4
 8005b78:	4629      	mov	r1, r5
 8005b7a:	f7fa faf5 	bl	8000168 <__aeabi_dsub>
 8005b7e:	e734      	b.n	80059ea <atan+0x2a>
 8005b80:	2200      	movs	r2, #0
 8005b82:	4b4c      	ldr	r3, [pc, #304]	; (8005cb4 <atan+0x2f4>)
 8005b84:	f7fa faf0 	bl	8000168 <__aeabi_dsub>
 8005b88:	2200      	movs	r2, #0
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	460f      	mov	r7, r1
 8005b8e:	4620      	mov	r0, r4
 8005b90:	4629      	mov	r1, r5
 8005b92:	4b48      	ldr	r3, [pc, #288]	; (8005cb4 <atan+0x2f4>)
 8005b94:	f7fa faea 	bl	800016c <__adddf3>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	4639      	mov	r1, r7
 8005ba0:	f7fa fdc4 	bl	800072c <__aeabi_ddiv>
 8005ba4:	f04f 0a01 	mov.w	sl, #1
 8005ba8:	4604      	mov	r4, r0
 8005baa:	460d      	mov	r5, r1
 8005bac:	e767      	b.n	8005a7e <atan+0xbe>
 8005bae:	4b43      	ldr	r3, [pc, #268]	; (8005cbc <atan+0x2fc>)
 8005bb0:	429e      	cmp	r6, r3
 8005bb2:	da1a      	bge.n	8005bea <atan+0x22a>
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	4b42      	ldr	r3, [pc, #264]	; (8005cc0 <atan+0x300>)
 8005bb8:	f7fa fad6 	bl	8000168 <__aeabi_dsub>
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	460f      	mov	r7, r1
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	4b3e      	ldr	r3, [pc, #248]	; (8005cc0 <atan+0x300>)
 8005bc8:	f7fa fc86 	bl	80004d8 <__aeabi_dmul>
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4b39      	ldr	r3, [pc, #228]	; (8005cb4 <atan+0x2f4>)
 8005bd0:	f7fa facc 	bl	800016c <__adddf3>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4630      	mov	r0, r6
 8005bda:	4639      	mov	r1, r7
 8005bdc:	f7fa fda6 	bl	800072c <__aeabi_ddiv>
 8005be0:	f04f 0a02 	mov.w	sl, #2
 8005be4:	4604      	mov	r4, r0
 8005be6:	460d      	mov	r5, r1
 8005be8:	e749      	b.n	8005a7e <atan+0xbe>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	2000      	movs	r0, #0
 8005bf0:	4934      	ldr	r1, [pc, #208]	; (8005cc4 <atan+0x304>)
 8005bf2:	f7fa fd9b 	bl	800072c <__aeabi_ddiv>
 8005bf6:	f04f 0a03 	mov.w	sl, #3
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	460d      	mov	r5, r1
 8005bfe:	e73e      	b.n	8005a7e <atan+0xbe>
 8005c00:	4b31      	ldr	r3, [pc, #196]	; (8005cc8 <atan+0x308>)
 8005c02:	4e32      	ldr	r6, [pc, #200]	; (8005ccc <atan+0x30c>)
 8005c04:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005c08:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8005c0c:	e9da 2300 	ldrd	r2, r3, [sl]
 8005c10:	f7fa faaa 	bl	8000168 <__aeabi_dsub>
 8005c14:	4622      	mov	r2, r4
 8005c16:	462b      	mov	r3, r5
 8005c18:	f7fa faa6 	bl	8000168 <__aeabi_dsub>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005c24:	f7fa faa0 	bl	8000168 <__aeabi_dsub>
 8005c28:	f1bb 0f00 	cmp.w	fp, #0
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	460d      	mov	r5, r1
 8005c30:	f6bf aee4 	bge.w	80059fc <atan+0x3c>
 8005c34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c38:	461d      	mov	r5, r3
 8005c3a:	e6df      	b.n	80059fc <atan+0x3c>
 8005c3c:	4d24      	ldr	r5, [pc, #144]	; (8005cd0 <atan+0x310>)
 8005c3e:	e6dd      	b.n	80059fc <atan+0x3c>
 8005c40:	8800759c 	.word	0x8800759c
 8005c44:	7e37e43c 	.word	0x7e37e43c
 8005c48:	e322da11 	.word	0xe322da11
 8005c4c:	3f90ad3a 	.word	0x3f90ad3a
 8005c50:	24760deb 	.word	0x24760deb
 8005c54:	3fa97b4b 	.word	0x3fa97b4b
 8005c58:	a0d03d51 	.word	0xa0d03d51
 8005c5c:	3fb10d66 	.word	0x3fb10d66
 8005c60:	c54c206e 	.word	0xc54c206e
 8005c64:	3fb745cd 	.word	0x3fb745cd
 8005c68:	920083ff 	.word	0x920083ff
 8005c6c:	3fc24924 	.word	0x3fc24924
 8005c70:	5555550d 	.word	0x5555550d
 8005c74:	3fd55555 	.word	0x3fd55555
 8005c78:	2c6a6c2f 	.word	0x2c6a6c2f
 8005c7c:	bfa2b444 	.word	0xbfa2b444
 8005c80:	52defd9a 	.word	0x52defd9a
 8005c84:	3fadde2d 	.word	0x3fadde2d
 8005c88:	af749a6d 	.word	0xaf749a6d
 8005c8c:	3fb3b0f2 	.word	0x3fb3b0f2
 8005c90:	fe231671 	.word	0xfe231671
 8005c94:	3fbc71c6 	.word	0x3fbc71c6
 8005c98:	9998ebc4 	.word	0x9998ebc4
 8005c9c:	3fc99999 	.word	0x3fc99999
 8005ca0:	440fffff 	.word	0x440fffff
 8005ca4:	7ff00000 	.word	0x7ff00000
 8005ca8:	54442d18 	.word	0x54442d18
 8005cac:	bff921fb 	.word	0xbff921fb
 8005cb0:	3fdbffff 	.word	0x3fdbffff
 8005cb4:	3ff00000 	.word	0x3ff00000
 8005cb8:	3ff2ffff 	.word	0x3ff2ffff
 8005cbc:	40038000 	.word	0x40038000
 8005cc0:	3ff80000 	.word	0x3ff80000
 8005cc4:	bff00000 	.word	0xbff00000
 8005cc8:	08005dc0 	.word	0x08005dc0
 8005ccc:	08005da0 	.word	0x08005da0
 8005cd0:	3ff921fb 	.word	0x3ff921fb

08005cd4 <fabs>:
 8005cd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005cd8:	4770      	bx	lr
	...

08005cdc <_init>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	bf00      	nop
 8005ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce2:	bc08      	pop	{r3}
 8005ce4:	469e      	mov	lr, r3
 8005ce6:	4770      	bx	lr

08005ce8 <_fini>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	bf00      	nop
 8005cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cee:	bc08      	pop	{r3}
 8005cf0:	469e      	mov	lr, r3
 8005cf2:	4770      	bx	lr
