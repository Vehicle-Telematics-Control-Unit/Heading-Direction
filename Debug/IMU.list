
IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008154  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08008268  08008268  00018268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086f0  080086f0  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  080086f0  080086f0  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086f0  080086f0  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086f0  080086f0  000186f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086f4  080086f4  000186f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  080086f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000020c  08008904  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08008904  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfd2  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248e  00000000  00000000  0002c207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  0002e698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002f310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d85  00000000  00000000  0002fea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e78b  00000000  00000000  00048c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089b27  00000000  00000000  000573b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0ed7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044dc  00000000  00000000  000e0f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000020c 	.word	0x2000020c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800824c 	.word	0x0800824c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000210 	.word	0x20000210
 800014c:	0800824c 	.word	0x0800824c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <MPU6050_Init>:
uint8_t MPU6050_rx_buf[6];
uint8_t MPU6050_tx;
//float MPU6050_Gyro_LSB = 32.8;
//float MPU6050_Acc_LSB = 4096.0;

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af04      	add	r7, sp, #16
 8000ace:	6078      	str	r0, [r7, #4]
//	default:
//		break;
//	}

// Read Who am I
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &MPU6050_rx, 1, 100);
 8000ad0:	2364      	movs	r3, #100	; 0x64
 8000ad2:	9302      	str	r3, [sp, #8]
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	9301      	str	r3, [sp, #4]
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MPU6050_Init+0x60>)
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	2301      	movs	r3, #1
 8000ade:	2275      	movs	r2, #117	; 0x75
 8000ae0:	21d0      	movs	r1, #208	; 0xd0
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f002 fa0a 	bl	8002efc <HAL_I2C_Mem_Read>
	MPU6050_tx = 0; //Will return this value if code ends here
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MPU6050_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]

	// 0x68 will be returned if sensor accessed correctly
	if (MPU6050_rx == 0x68) {
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MPU6050_Init+0x60>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b68      	cmp	r3, #104	; 0x68
 8000af4:	d113      	bne.n	8000b1e <MPU6050_Init+0x56>
		MPU6050_tx = 0;
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <MPU6050_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &MPU6050_tx, 1,
 8000afc:	2364      	movs	r3, #100	; 0x64
 8000afe:	9302      	str	r3, [sp, #8]
 8000b00:	2301      	movs	r3, #1
 8000b02:	9301      	str	r3, [sp, #4]
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MPU6050_Init+0x64>)
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	2301      	movs	r3, #1
 8000b0a:	226b      	movs	r2, #107	; 0x6b
 8000b0c:	21d0      	movs	r1, #208	; 0xd0
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f002 f8fa 	bl	8002d08 <HAL_I2C_Mem_Write>
				100);
		HAL_Delay(10);
 8000b14:	200a      	movs	r0, #10
 8000b16:	f001 fc6f 	bl	80023f8 <HAL_Delay>
//		MPU6050_tx = Acc_FS << 3;
//		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &MPU6050_tx,
//				1, 100);
//		HAL_Delay(10);

		return 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e000      	b.n	8000b20 <MPU6050_Init+0x58>
	}
	return 1;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000228 	.word	0x20000228
 8000b2c:	20000232 	.word	0x20000232

08000b30 <MPU6050_Bypass>:

void MPU6050_Bypass(I2C_HandleTypeDef *I2Cx) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af04      	add	r7, sp, #16
 8000b36:	6078      	str	r0, [r7, #4]
	MPU6050_tx = 0b00000000; //
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <MPU6050_Bypass+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x6A, 1, &MPU6050_tx, 1, 100); //Master Disable
 8000b3e:	2364      	movs	r3, #100	; 0x64
 8000b40:	9302      	str	r3, [sp, #8]
 8000b42:	2301      	movs	r3, #1
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <MPU6050_Bypass+0x58>)
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	226a      	movs	r2, #106	; 0x6a
 8000b4e:	21d0      	movs	r1, #208	; 0xd0
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f002 f8d9 	bl	8002d08 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b56:	200a      	movs	r0, #10
 8000b58:	f001 fc4e 	bl	80023f8 <HAL_Delay>

	MPU6050_tx = 0b00000010; //
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MPU6050_Bypass+0x58>)
 8000b5e:	2202      	movs	r2, #2
 8000b60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x37, 1, &MPU6050_tx, 1, 100); //Bypass Enable
 8000b62:	2364      	movs	r3, #100	; 0x64
 8000b64:	9302      	str	r3, [sp, #8]
 8000b66:	2301      	movs	r3, #1
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MPU6050_Bypass+0x58>)
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2301      	movs	r3, #1
 8000b70:	2237      	movs	r2, #55	; 0x37
 8000b72:	21d0      	movs	r1, #208	; 0xd0
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f002 f8c7 	bl	8002d08 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b7a:	200a      	movs	r0, #10
 8000b7c:	f001 fc3c 	bl	80023f8 <HAL_Delay>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000232 	.word	0x20000232

08000b8c <MPU6050_Master>:

void MPU6050_Master(I2C_HandleTypeDef *I2Cx) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af04      	add	r7, sp, #16
 8000b92:	6078      	str	r0, [r7, #4]
	MPU6050_tx = 0x00; //
 8000b94:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <MPU6050_Master+0xa0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x37, 1, &MPU6050_tx, 1, 100); //Disable Bypass
 8000b9a:	2364      	movs	r3, #100	; 0x64
 8000b9c:	9302      	str	r3, [sp, #8]
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <MPU6050_Master+0xa0>)
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	2237      	movs	r2, #55	; 0x37
 8000baa:	21d0      	movs	r1, #208	; 0xd0
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f002 f8ab 	bl	8002d08 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000bb2:	200a      	movs	r0, #10
 8000bb4:	f001 fc20 	bl	80023f8 <HAL_Delay>

	MPU6050_tx = 0b00100010; //
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <MPU6050_Master+0xa0>)
 8000bba:	2222      	movs	r2, #34	; 0x22
 8000bbc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x6A, 1, &MPU6050_tx, 1, 100); //Master Enable
 8000bbe:	2364      	movs	r3, #100	; 0x64
 8000bc0:	9302      	str	r3, [sp, #8]
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	9301      	str	r3, [sp, #4]
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MPU6050_Master+0xa0>)
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2301      	movs	r3, #1
 8000bcc:	226a      	movs	r2, #106	; 0x6a
 8000bce:	21d0      	movs	r1, #208	; 0xd0
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f002 f899 	bl	8002d08 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000bd6:	200a      	movs	r0, #10
 8000bd8:	f001 fc0e 	bl	80023f8 <HAL_Delay>

	MPU6050_tx = 0b00001101; //
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MPU6050_Master+0xa0>)
 8000bde:	220d      	movs	r2, #13
 8000be0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x24, 1, &MPU6050_tx, 1, 100); //Master Clock to 400kHz
 8000be2:	2364      	movs	r3, #100	; 0x64
 8000be4:	9302      	str	r3, [sp, #8]
 8000be6:	2301      	movs	r3, #1
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MPU6050_Master+0xa0>)
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2301      	movs	r3, #1
 8000bf0:	2224      	movs	r2, #36	; 0x24
 8000bf2:	21d0      	movs	r1, #208	; 0xd0
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f002 f887 	bl	8002d08 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000bfa:	200a      	movs	r0, #10
 8000bfc:	f001 fbfc 	bl	80023f8 <HAL_Delay>

	MPU6050_tx = 0x00;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <MPU6050_Master+0xa0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &MPU6050_tx, 1,
 8000c06:	2364      	movs	r3, #100	; 0x64
 8000c08:	9302      	str	r3, [sp, #8]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	9301      	str	r3, [sp, #4]
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <MPU6050_Master+0xa0>)
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	2301      	movs	r3, #1
 8000c14:	226b      	movs	r2, #107	; 0x6b
 8000c16:	21d0      	movs	r1, #208	; 0xd0
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f002 f875 	bl	8002d08 <HAL_I2C_Mem_Write>
			100);
	HAL_Delay(10);
 8000c1e:	200a      	movs	r0, #10
 8000c20:	f001 fbea 	bl	80023f8 <HAL_Delay>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000232 	.word	0x20000232

08000c30 <HMC5883L_Setup>:

void HMC5883L_Setup(I2C_HandleTypeDef *I2Cx) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af04      	add	r7, sp, #16
 8000c36:	6078      	str	r0, [r7, #4]
	MPU6050_tx = 0b00011000; //Fill Slave0 DO
 8000c38:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <HMC5883L_Setup+0x7c>)
 8000c3a:	2218      	movs	r2, #24
 8000c3c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDRESS << 1, 0x00, 1, &MPU6050_tx, 1,
 8000c3e:	2364      	movs	r3, #100	; 0x64
 8000c40:	9302      	str	r3, [sp, #8]
 8000c42:	2301      	movs	r3, #1
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <HMC5883L_Setup+0x7c>)
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	213c      	movs	r1, #60	; 0x3c
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f002 f859 	bl	8002d08 <HAL_I2C_Mem_Write>
			100);
	HAL_Delay(10);
 8000c56:	200a      	movs	r0, #10
 8000c58:	f001 fbce 	bl	80023f8 <HAL_Delay>

	MPU6050_tx = 0b00100000; //Fill Slave0 DO
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <HMC5883L_Setup+0x7c>)
 8000c5e:	2220      	movs	r2, #32
 8000c60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDRESS << 1, 0x01, 1, &MPU6050_tx, 1,
 8000c62:	2364      	movs	r3, #100	; 0x64
 8000c64:	9302      	str	r3, [sp, #8]
 8000c66:	2301      	movs	r3, #1
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <HMC5883L_Setup+0x7c>)
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	2201      	movs	r2, #1
 8000c72:	213c      	movs	r1, #60	; 0x3c
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f002 f847 	bl	8002d08 <HAL_I2C_Mem_Write>
			100);
	HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f001 fbbc 	bl	80023f8 <HAL_Delay>

	MPU6050_tx = 0x00;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HMC5883L_Setup+0x7c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDRESS << 1, 0x02, 1, &MPU6050_tx, 1,
 8000c86:	2364      	movs	r3, #100	; 0x64
 8000c88:	9302      	str	r3, [sp, #8]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	9301      	str	r3, [sp, #4]
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <HMC5883L_Setup+0x7c>)
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	2301      	movs	r3, #1
 8000c94:	2202      	movs	r2, #2
 8000c96:	213c      	movs	r1, #60	; 0x3c
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f002 f835 	bl	8002d08 <HAL_I2C_Mem_Write>
			100); //Mode: Continuous
	HAL_Delay(10);
 8000c9e:	200a      	movs	r0, #10
 8000ca0:	f001 fbaa 	bl	80023f8 <HAL_Delay>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000232 	.word	0x20000232

08000cb0 <MPU6050_Slave_Read>:

void MPU6050_Slave_Read(I2C_HandleTypeDef *I2Cx) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af04      	add	r7, sp, #16
 8000cb6:	6078      	str	r0, [r7, #4]
	MPU6050_tx = HMC5883L_ADDRESS | 0x80; //Access Slave into read mode
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MPU6050_Slave_Read+0x7c>)
 8000cba:	229e      	movs	r2, #158	; 0x9e
 8000cbc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x25, 1, &MPU6050_tx, 1, 100);
 8000cbe:	2364      	movs	r3, #100	; 0x64
 8000cc0:	9302      	str	r3, [sp, #8]
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	9301      	str	r3, [sp, #4]
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MPU6050_Slave_Read+0x7c>)
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2301      	movs	r3, #1
 8000ccc:	2225      	movs	r2, #37	; 0x25
 8000cce:	21d0      	movs	r1, #208	; 0xd0
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f002 f819 	bl	8002d08 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	f001 fb8e 	bl	80023f8 <HAL_Delay>

	MPU6050_tx = 0x03; //Slave REG for reading to take place
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MPU6050_Slave_Read+0x7c>)
 8000cde:	2203      	movs	r2, #3
 8000ce0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x26, 1, &MPU6050_tx, 1, 100);
 8000ce2:	2364      	movs	r3, #100	; 0x64
 8000ce4:	9302      	str	r3, [sp, #8]
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	9301      	str	r3, [sp, #4]
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <MPU6050_Slave_Read+0x7c>)
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	2301      	movs	r3, #1
 8000cf0:	2226      	movs	r2, #38	; 0x26
 8000cf2:	21d0      	movs	r1, #208	; 0xd0
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f002 f807 	bl	8002d08 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000cfa:	200a      	movs	r0, #10
 8000cfc:	f001 fb7c 	bl	80023f8 <HAL_Delay>

	MPU6050_tx = 0x80 | 0x06; //Number of data bytes
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <MPU6050_Slave_Read+0x7c>)
 8000d02:	2286      	movs	r2, #134	; 0x86
 8000d04:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x27, 1, &MPU6050_tx, 1, 100);
 8000d06:	2364      	movs	r3, #100	; 0x64
 8000d08:	9302      	str	r3, [sp, #8]
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <MPU6050_Slave_Read+0x7c>)
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2301      	movs	r3, #1
 8000d14:	2227      	movs	r2, #39	; 0x27
 8000d16:	21d0      	movs	r1, #208	; 0xd0
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f001 fff5 	bl	8002d08 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000d1e:	200a      	movs	r0, #10
 8000d20:	f001 fb6a 	bl	80023f8 <HAL_Delay>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000232 	.word	0x20000232

08000d30 <MPU6050_Read_All>:
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, INT_STATUS_REG, 1, &MPU6050_rx, 1,
			100);
	return MPU6050_rx;
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af04      	add	r7, sp, #16
 8000d36:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, EXT_SENS_DATA_00, 1, MPU6050_rx_buf,
 8000d38:	2364      	movs	r3, #100	; 0x64
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <MPU6050_Read_All+0x28>)
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2301      	movs	r3, #1
 8000d46:	2249      	movs	r2, #73	; 0x49
 8000d48:	21d0      	movs	r1, #208	; 0xd0
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f002 f8d6 	bl	8002efc <HAL_I2C_Mem_Read>
			6, 100);
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000022c 	.word	0x2000022c
 8000d5c:	00000000 	.word	0x00000000

08000d60 <MPU6050_Parsing_NoOffest>:
//	DataStruct->Ax = DataStruct->Accel_X_RAW / MPU6050_Acc_LSB;
//	DataStruct->Ay = DataStruct->Accel_Y_RAW / MPU6050_Acc_LSB;
//	DataStruct->Az = DataStruct->Accel_Z_RAW / MPU6050_Acc_LSB;
//}

uint16_t MPU6050_Parsing_NoOffest(MPU6050_t *DataStruct) {
 8000d60:	b5b0      	push	{r4, r5, r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
//	// Didn't Save Temp Value
//	DataStruct->Gyro_X_RAW = (MPU6050_rx_buf[8] << 8 | MPU6050_rx_buf[9]);
//	DataStruct->Gyro_Y_RAW = -(MPU6050_rx_buf[10] << 8 | MPU6050_rx_buf[11]);
//	DataStruct->Gyro_Z_RAW = -(MPU6050_rx_buf[12] << 8 | MPU6050_rx_buf[13]);

	DataStruct->Mag_X_RAW = (MPU6050_rx_buf[0] << 8 | MPU6050_rx_buf[1]);
 8000d68:	4b47      	ldr	r3, [pc, #284]	; (8000e88 <MPU6050_Parsing_NoOffest+0x128>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	4b45      	ldr	r3, [pc, #276]	; (8000e88 <MPU6050_Parsing_NoOffest+0x128>)
 8000d72:	785b      	ldrb	r3, [r3, #1]
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	4313      	orrs	r3, r2
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	801a      	strh	r2, [r3, #0]
	DataStruct->Mag_Z_RAW = -(MPU6050_rx_buf[2] << 8 | MPU6050_rx_buf[3]);
 8000d7e:	4b42      	ldr	r3, [pc, #264]	; (8000e88 <MPU6050_Parsing_NoOffest+0x128>)
 8000d80:	789b      	ldrb	r3, [r3, #2]
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	b21a      	sxth	r2, r3
 8000d86:	4b40      	ldr	r3, [pc, #256]	; (8000e88 <MPU6050_Parsing_NoOffest+0x128>)
 8000d88:	78db      	ldrb	r3, [r3, #3]
 8000d8a:	b21b      	sxth	r3, r3
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	b21b      	sxth	r3, r3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	425b      	negs	r3, r3
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	809a      	strh	r2, [r3, #4]
	DataStruct->Mag_Y_RAW = -(MPU6050_rx_buf[4] << 8 | MPU6050_rx_buf[5]);
 8000d9c:	4b3a      	ldr	r3, [pc, #232]	; (8000e88 <MPU6050_Parsing_NoOffest+0x128>)
 8000d9e:	791b      	ldrb	r3, [r3, #4]
 8000da0:	021b      	lsls	r3, r3, #8
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	4b38      	ldr	r3, [pc, #224]	; (8000e88 <MPU6050_Parsing_NoOffest+0x128>)
 8000da6:	795b      	ldrb	r3, [r3, #5]
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	425b      	negs	r3, r3
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	b21a      	sxth	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	805a      	strh	r2, [r3, #2]
//	DataStruct->Gy = DataStruct->Gyro_Y_RAW / MPU6050_Gyro_LSB * D2R;
//	DataStruct->Gz = DataStruct->Gyro_Z_RAW / MPU6050_Gyro_LSB * D2R;
//	DataStruct->Ax = DataStruct->Accel_X_RAW / MPU6050_Acc_LSB;
//	DataStruct->Ay = DataStruct->Accel_Y_RAW / MPU6050_Acc_LSB;
//	DataStruct->Az = DataStruct->Accel_Z_RAW / MPU6050_Acc_LSB;
	Heading = atan2((double) DataStruct->Mag_Y_RAW,
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fb1f 	bl	8000404 <__aeabi_i2d>
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	460d      	mov	r5, r1
			(double) DataStruct->Mag_X_RAW);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
	Heading = atan2((double) DataStruct->Mag_Y_RAW,
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fb17 	bl	8000404 <__aeabi_i2d>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4620      	mov	r0, r4
 8000ddc:	4629      	mov	r1, r5
 8000dde:	f006 ffcf 	bl	8007d80 <atan2>
 8000de2:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if (Heading > 2 * PI) /* Due to declination check for >360 degree */
 8000de6:	a324      	add	r3, pc, #144	; (adr r3, 8000e78 <MPU6050_Parsing_NoOffest+0x118>)
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df0:	f7ff fe02 	bl	80009f8 <__aeabi_dcmpgt>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00a      	beq.n	8000e10 <MPU6050_Parsing_NoOffest+0xb0>
		Heading = Heading - 2 * PI;
 8000dfa:	a31f      	add	r3, pc, #124	; (adr r3, 8000e78 <MPU6050_Parsing_NoOffest+0x118>)
 8000dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e04:	f7ff f9b0 	bl	8000168 <__aeabi_dsub>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (Heading < 0) /* Check for sign */
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e1c:	f7ff fdce 	bl	80009bc <__aeabi_dcmplt>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00a      	beq.n	8000e3c <MPU6050_Parsing_NoOffest+0xdc>
		Heading = Heading + 2 * PI;
 8000e26:	a314      	add	r3, pc, #80	; (adr r3, 8000e78 <MPU6050_Parsing_NoOffest+0x118>)
 8000e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e30:	f7ff f99c 	bl	800016c <__adddf3>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (Heading * 180 / PI);
 8000e3c:	f04f 0200 	mov.w	r2, #0
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MPU6050_Parsing_NoOffest+0x12c>)
 8000e42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e46:	f7ff fb47 	bl	80004d8 <__aeabi_dmul>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	4610      	mov	r0, r2
 8000e50:	4619      	mov	r1, r3
 8000e52:	a30b      	add	r3, pc, #44	; (adr r3, 8000e80 <MPU6050_Parsing_NoOffest+0x120>)
 8000e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e58:	f7ff fc68 	bl	800072c <__aeabi_ddiv>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	f7ff fe10 	bl	8000a88 <__aeabi_d2uiz>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	b29b      	uxth	r3, r3
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bdb0      	pop	{r4, r5, r7, pc}
 8000e74:	f3af 8000 	nop.w
 8000e78:	54442eea 	.word	0x54442eea
 8000e7c:	401921fb 	.word	0x401921fb
 8000e80:	54442eea 	.word	0x54442eea
 8000e84:	400921fb 	.word	0x400921fb
 8000e88:	2000022c 	.word	0x2000022c
 8000e8c:	40668000 	.word	0x40668000

08000e90 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e96:	f001 fa4d 	bl	8002334 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e9a:	f000 f86d 	bl	8000f78 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e9e:	f000 f915 	bl	80010cc <MX_GPIO_Init>
	MX_I2C1_Init();
 8000ea2:	f000 f8af 	bl	8001004 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000ea6:	f000 f8db 	bl	8001060 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	MPU6050_Init(&hi2c1);
 8000eaa:	482a      	ldr	r0, [pc, #168]	; (8000f54 <main+0xc4>)
 8000eac:	f7ff fe0c 	bl	8000ac8 <MPU6050_Init>
	// sprintf(str, "Success");
	// else
	// sprintf(str, "Failed");
	// HAL_UART_Transmit(&huart1, str, sizeof(str), 100);
	// HAL_Delay(1000);
	MPU6050_Bypass(&hi2c1);
 8000eb0:	4828      	ldr	r0, [pc, #160]	; (8000f54 <main+0xc4>)
 8000eb2:	f7ff fe3d 	bl	8000b30 <MPU6050_Bypass>
	HMC5883L_Setup(&hi2c1);
 8000eb6:	4827      	ldr	r0, [pc, #156]	; (8000f54 <main+0xc4>)
 8000eb8:	f7ff feba 	bl	8000c30 <HMC5883L_Setup>
	MPU6050_Master(&hi2c1);
 8000ebc:	4825      	ldr	r0, [pc, #148]	; (8000f54 <main+0xc4>)
 8000ebe:	f7ff fe65 	bl	8000b8c <MPU6050_Master>
	MPU6050_Slave_Read(&hi2c1);
 8000ec2:	4824      	ldr	r0, [pc, #144]	; (8000f54 <main+0xc4>)
 8000ec4:	f7ff fef4 	bl	8000cb0 <MPU6050_Slave_Read>
	static uint16_t heading;
	static uint8_t str[30];

	uint8_t socNum = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	75fb      	strb	r3, [r7, #23]

	uint8_t mac[] = {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef}; // Mac address
 8000ecc:	4a22      	ldr	r2, [pc, #136]	; (8000f58 <main+0xc8>)
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed6:	6018      	str	r0, [r3, #0]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	8019      	strh	r1, [r3, #0]
	uint8_t ip[] = {192, 168, 1, 15};					  // IP address
 8000edc:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <main+0xcc>)
 8000ede:	60fb      	str	r3, [r7, #12]
	uint8_t sn[] = {255, 255, 255, 0};					  // Subnet mask
 8000ee0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000ee4:	60bb      	str	r3, [r7, #8]
	uint8_t gw[] = {192, 168, 1, 1};					  // Gateway address
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <main+0xd0>)
 8000ee8:	607b      	str	r3, [r7, #4]

	initializeW5500(mac, ip, sn, gw); // configures the MAC address, IP address, subnet mask and gateway of the device or node.
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	f107 0208 	add.w	r2, r7, #8
 8000ef0:	f107 010c 	add.w	r1, r7, #12
 8000ef4:	f107 0010 	add.w	r0, r7, #16
 8000ef8:	f000 ffda 	bl	8001eb0 <initializeW5500>

	uint8_t dstip[4] = {192, 168, 1, 4}; // destination ip address
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <main+0xd4>)
 8000efe:	603b      	str	r3, [r7, #0]

	while (socket(socNum, Sn_MR_UDP, SRC_PORT, FLAG) != socNum)
 8000f00:	bf00      	nop
 8000f02:	7df8      	ldrb	r0, [r7, #23]
 8000f04:	2300      	movs	r3, #0
 8000f06:	f241 7271 	movw	r2, #6001	; 0x1771
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	f000 f92e 	bl	800116c <socket>
 8000f10:	4603      	mov	r3, r0
 8000f12:	461a      	mov	r2, r3
 8000f14:	7dfb      	ldrb	r3, [r7, #23]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d1f3      	bne.n	8000f02 <main+0x72>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		MPU6050_Read_All(&hi2c1);
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <main+0xc4>)
 8000f1c:	f7ff ff08 	bl	8000d30 <MPU6050_Read_All>
		HAL_Delay(20);
 8000f20:	2014      	movs	r0, #20
 8000f22:	f001 fa69 	bl	80023f8 <HAL_Delay>
		heading = MPU6050_Parsing_NoOffest(&MPU6050);
 8000f26:	4810      	ldr	r0, [pc, #64]	; (8000f68 <main+0xd8>)
 8000f28:	f7ff ff1a 	bl	8000d60 <MPU6050_Parsing_NoOffest>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <main+0xdc>)
 8000f32:	801a      	strh	r2, [r3, #0]
		sprintf(str, "%d", heading);
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <main+0xdc>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	490d      	ldr	r1, [pc, #52]	; (8000f70 <main+0xe0>)
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <main+0xe4>)
 8000f3e:	f004 fca7 	bl	8005890 <siprintf>
		Socket_sendUDP(socNum, str, dstip, DST_PORT); // sends message to a destination ip address and port
 8000f42:	463a      	mov	r2, r7
 8000f44:	7df8      	ldrb	r0, [r7, #23]
 8000f46:	f241 3389 	movw	r3, #5001	; 0x1389
 8000f4a:	490a      	ldr	r1, [pc, #40]	; (8000f74 <main+0xe4>)
 8000f4c:	f000 fffe 	bl	8001f4c <Socket_sendUDP>
	{
 8000f50:	e7e3      	b.n	8000f1a <main+0x8a>
 8000f52:	bf00      	nop
 8000f54:	20000234 	.word	0x20000234
 8000f58:	0800826c 	.word	0x0800826c
 8000f5c:	0f01a8c0 	.word	0x0f01a8c0
 8000f60:	0101a8c0 	.word	0x0101a8c0
 8000f64:	0401a8c0 	.word	0x0401a8c0
 8000f68:	200002e0 	.word	0x200002e0
 8000f6c:	200002e6 	.word	0x200002e6
 8000f70:	08008268 	.word	0x08008268
 8000f74:	200002e8 	.word	0x200002e8

08000f78 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b090      	sub	sp, #64	; 0x40
 8000f7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0318 	add.w	r3, r7, #24
 8000f82:	2228      	movs	r2, #40	; 0x28
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f004 f81a 	bl	8004fc0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fac:	2302      	movs	r3, #2
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fb6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbc:	f107 0318 	add.w	r3, r7, #24
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 fd5d 	bl	8003a80 <HAL_RCC_OscConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000fcc:	f000 f8c8 	bl	8001160 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2102      	movs	r1, #2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 ffca 	bl	8003f84 <HAL_RCC_ClockConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0x82>
	{
		Error_Handler();
 8000ff6:	f000 f8b3 	bl	8001160 <Error_Handler>
	}
}
 8000ffa:	bf00      	nop
 8000ffc:	3740      	adds	r7, #64	; 0x40
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_I2C1_Init+0x50>)
 800100a:	4a13      	ldr	r2, [pc, #76]	; (8001058 <MX_I2C1_Init+0x54>)
 800100c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_I2C1_Init+0x50>)
 8001010:	4a12      	ldr	r2, [pc, #72]	; (800105c <MX_I2C1_Init+0x58>)
 8001012:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_I2C1_Init+0x50>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_I2C1_Init+0x50>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_I2C1_Init+0x50>)
 8001022:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001026:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <MX_I2C1_Init+0x50>)
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_I2C1_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <MX_I2C1_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_I2C1_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_I2C1_Init+0x50>)
 8001042:	f001 fd1d 	bl	8002a80 <HAL_I2C_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 800104c:	f000 f888 	bl	8001160 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000234 	.word	0x20000234
 8001058:	40005400 	.word	0x40005400
 800105c:	00061a80 	.word	0x00061a80

08001060 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_SPI1_Init+0x64>)
 8001066:	4a18      	ldr	r2, [pc, #96]	; (80010c8 <MX_SPI1_Init+0x68>)
 8001068:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_SPI1_Init+0x64>)
 800106c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001070:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_SPI1_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_SPI1_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_SPI1_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_SPI1_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_SPI1_Init+0x64>)
 800108c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001090:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_SPI1_Init+0x64>)
 8001094:	2210      	movs	r2, #16
 8001096:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <MX_SPI1_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_SPI1_Init+0x64>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <MX_SPI1_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_SPI1_Init+0x64>)
 80010ac:	220a      	movs	r2, #10
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MX_SPI1_Init+0x64>)
 80010b2:	f003 f8eb 	bl	800428c <HAL_SPI_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80010bc:	f000 f850 	bl	8001160 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000288 	.word	0x20000288
 80010c8:	40013000 	.word	0x40013000

080010cc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <MX_GPIO_Init+0x8c>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <MX_GPIO_Init+0x8c>)
 80010e6:	f043 0320 	orr.w	r3, r3, #32
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <MX_GPIO_Init+0x8c>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0320 	and.w	r3, r3, #32
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b17      	ldr	r3, [pc, #92]	; (8001158 <MX_GPIO_Init+0x8c>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a16      	ldr	r2, [pc, #88]	; (8001158 <MX_GPIO_Init+0x8c>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <MX_GPIO_Init+0x8c>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_GPIO_Init+0x8c>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a10      	ldr	r2, [pc, #64]	; (8001158 <MX_GPIO_Init+0x8c>)
 8001116:	f043 0308 	orr.w	r3, r3, #8
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_GPIO_Init+0x8c>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0308 	and.w	r3, r3, #8
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2110      	movs	r1, #16
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <MX_GPIO_Init+0x90>)
 800112e:	f001 fc8f 	bl	8002a50 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001132:	2310      	movs	r3, #16
 8001134:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113a:	2301      	movs	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2302      	movs	r3, #2
 8001140:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	4619      	mov	r1, r3
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_GPIO_Init+0x90>)
 800114a:	f001 fafd 	bl	8002748 <HAL_GPIO_Init>
}
 800114e:	bf00      	nop
 8001150:	3720      	adds	r7, #32
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000
 800115c:	40010800 	.word	0x40010800

08001160 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001168:	e7fe      	b.n	8001168 <Error_Handler+0x8>
	...

0800116c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	4604      	mov	r4, r0
 8001174:	4608      	mov	r0, r1
 8001176:	4611      	mov	r1, r2
 8001178:	461a      	mov	r2, r3
 800117a:	4623      	mov	r3, r4
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	4603      	mov	r3, r0
 8001180:	71bb      	strb	r3, [r7, #6]
 8001182:	460b      	mov	r3, r1
 8001184:	80bb      	strh	r3, [r7, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b08      	cmp	r3, #8
 800118e:	d902      	bls.n	8001196 <socket+0x2a>
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	e0f2      	b.n	800137c <socket+0x210>
	switch(protocol)
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d005      	beq.n	80011a8 <socket+0x3c>
 800119c:	2b00      	cmp	r3, #0
 800119e:	dd11      	ble.n	80011c4 <socket+0x58>
 80011a0:	3b02      	subs	r3, #2
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d80e      	bhi.n	80011c4 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80011a6:	e011      	b.n	80011cc <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2204      	movs	r2, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80011b4:	f000 fcd8 	bl	8001b68 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <socket+0x5e>
 80011be:	f06f 0302 	mvn.w	r3, #2
 80011c2:	e0db      	b.n	800137c <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80011c4:	f06f 0304 	mvn.w	r3, #4
 80011c8:	e0d8      	b.n	800137c <socket+0x210>
	    break;
 80011ca:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <socket+0x70>
 80011d6:	f06f 0305 	mvn.w	r3, #5
 80011da:	e0cf      	b.n	800137c <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d025      	beq.n	800122e <socket+0xc2>
	{
   	switch(protocol)
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d002      	beq.n	80011ee <socket+0x82>
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d008      	beq.n	80011fe <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80011ec:	e024      	b.n	8001238 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80011ee:	78fb      	ldrb	r3, [r7, #3]
 80011f0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d11c      	bne.n	8001232 <socket+0xc6>
 80011f8:	f06f 0305 	mvn.w	r3, #5
 80011fc:	e0be      	b.n	800137c <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	f003 0320 	and.w	r3, r3, #32
 8001204:	2b00      	cmp	r3, #0
 8001206:	d006      	beq.n	8001216 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db02      	blt.n	8001216 <socket+0xaa>
 8001210:	f06f 0305 	mvn.w	r3, #5
 8001214:	e0b2      	b.n	800137c <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00a      	beq.n	8001236 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001224:	2b00      	cmp	r3, #0
 8001226:	db06      	blt.n	8001236 <socket+0xca>
 8001228:	f06f 0305 	mvn.w	r3, #5
 800122c:	e0a6      	b.n	800137c <socket+0x210>
   	}
   }
 800122e:	bf00      	nop
 8001230:	e002      	b.n	8001238 <socket+0xcc>
   	      break;
 8001232:	bf00      	nop
 8001234:	e000      	b.n	8001238 <socket+0xcc>
   	      break;
 8001236:	bf00      	nop
	close(sn);
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f8ac 	bl	8001398 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	3301      	adds	r3, #1
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4618      	mov	r0, r3
 800124a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800124e:	f023 030f 	bic.w	r3, r3, #15
 8001252:	b25a      	sxtb	r2, r3
 8001254:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001258:	4313      	orrs	r3, r2
 800125a:	b25b      	sxtb	r3, r3
 800125c:	b2db      	uxtb	r3, r3
 800125e:	4619      	mov	r1, r3
 8001260:	f000 fc34 	bl	8001acc <WIZCHIP_WRITE>
    #endif
	if(!port)
 8001264:	88bb      	ldrh	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d110      	bne.n	800128c <socket+0x120>
	{
	   port = sock_any_port++;
 800126a:	4b46      	ldr	r3, [pc, #280]	; (8001384 <socket+0x218>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	b291      	uxth	r1, r2
 8001272:	4a44      	ldr	r2, [pc, #272]	; (8001384 <socket+0x218>)
 8001274:	8011      	strh	r1, [r2, #0]
 8001276:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001278:	4b42      	ldr	r3, [pc, #264]	; (8001384 <socket+0x218>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001280:	4293      	cmp	r3, r2
 8001282:	d103      	bne.n	800128c <socket+0x120>
 8001284:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <socket+0x218>)
 8001286:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800128a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	3301      	adds	r3, #1
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001298:	461a      	mov	r2, r3
 800129a:	88bb      	ldrh	r3, [r7, #4]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	b29b      	uxth	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	4619      	mov	r1, r3
 80012a4:	4610      	mov	r0, r2
 80012a6:	f000 fc11 	bl	8001acc <WIZCHIP_WRITE>
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	3301      	adds	r3, #1
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012b6:	461a      	mov	r2, r3
 80012b8:	88bb      	ldrh	r3, [r7, #4]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4619      	mov	r1, r3
 80012be:	4610      	mov	r0, r2
 80012c0:	f000 fc04 	bl	8001acc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	3301      	adds	r3, #1
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80012d0:	2101      	movs	r1, #1
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fbfa 	bl	8001acc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80012d8:	bf00      	nop
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	3301      	adds	r3, #1
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 fba4 	bl	8001a34 <WIZCHIP_READ>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f3      	bne.n	80012da <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2201      	movs	r2, #1
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	b21a      	sxth	r2, r3
 8001300:	4b21      	ldr	r3, [pc, #132]	; (8001388 <socket+0x21c>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	b21b      	sxth	r3, r3
 8001306:	4013      	ands	r3, r2
 8001308:	b21b      	sxth	r3, r3
 800130a:	b29a      	uxth	r2, r3
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <socket+0x21c>)
 800130e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	f003 0201 	and.w	r2, r3, #1
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	b21a      	sxth	r2, r3
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <socket+0x21c>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b21b      	sxth	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	b21b      	sxth	r3, r3
 8001328:	b29a      	uxth	r2, r3
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <socket+0x21c>)
 800132c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2201      	movs	r2, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	b21b      	sxth	r3, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	b21a      	sxth	r2, r3
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <socket+0x220>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	b21b      	sxth	r3, r3
 8001342:	4013      	ands	r3, r2
 8001344:	b21b      	sxth	r3, r3
 8001346:	b29a      	uxth	r2, r3
 8001348:	4b10      	ldr	r3, [pc, #64]	; (800138c <socket+0x220>)
 800134a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4a10      	ldr	r2, [pc, #64]	; (8001390 <socket+0x224>)
 8001350:	2100      	movs	r1, #0
 8001352:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <socket+0x228>)
 800135a:	2100      	movs	r1, #0
 800135c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800135e:	bf00      	nop
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	3301      	adds	r3, #1
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fb61 	bl	8001a34 <WIZCHIP_READ>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f3      	beq.n	8001360 <socket+0x1f4>
   return (int8_t)sn;
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800137c:	4618      	mov	r0, r3
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	bd90      	pop	{r4, r7, pc}
 8001384:	20000000 	.word	0x20000000
 8001388:	20000306 	.word	0x20000306
 800138c:	20000308 	.word	0x20000308
 8001390:	2000030c 	.word	0x2000030c
 8001394:	2000031c 	.word	0x2000031c

08001398 <close>:

int8_t close(uint8_t sn)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d902      	bls.n	80013ae <close+0x16>
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ac:	e055      	b.n	800145a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	3301      	adds	r3, #1
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80013ba:	2110      	movs	r1, #16
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fb85 	bl	8001acc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80013c2:	bf00      	nop
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	3301      	adds	r3, #1
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 fb2f 	bl	8001a34 <WIZCHIP_READ>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f3      	bne.n	80013c4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	3301      	adds	r3, #1
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013e8:	211f      	movs	r1, #31
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 fb6e 	bl	8001acc <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	2201      	movs	r2, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <close+0xcc>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	b21b      	sxth	r3, r3
 8001404:	4013      	ands	r3, r2
 8001406:	b21b      	sxth	r3, r3
 8001408:	b29a      	uxth	r2, r3
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <close+0xcc>)
 800140c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2201      	movs	r2, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	b21b      	sxth	r3, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	b21a      	sxth	r2, r3
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <close+0xd0>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	b21b      	sxth	r3, r3
 8001422:	4013      	ands	r3, r2
 8001424:	b21b      	sxth	r3, r3
 8001426:	b29a      	uxth	r2, r3
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <close+0xd0>)
 800142a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	4a0f      	ldr	r2, [pc, #60]	; (800146c <close+0xd4>)
 8001430:	2100      	movs	r1, #0
 8001432:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <close+0xd8>)
 800143a:	2100      	movs	r1, #0
 800143c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800143e:	bf00      	nop
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	3301      	adds	r3, #1
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800144c:	4618      	mov	r0, r3
 800144e:	f000 faf1 	bl	8001a34 <WIZCHIP_READ>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f3      	bne.n	8001440 <close+0xa8>
	return SOCK_OK;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000306 	.word	0x20000306
 8001468:	20000308 	.word	0x20000308
 800146c:	2000030c 	.word	0x2000030c
 8001470:	2000031c 	.word	0x2000031c

08001474 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]
 8001482:	4613      	mov	r3, r2
 8001484:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	2b08      	cmp	r3, #8
 8001492:	d902      	bls.n	800149a <sendto+0x26>
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	e11b      	b.n	80016d2 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	3301      	adds	r3, #1
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fac6 	bl	8001a34 <WIZCHIP_READ>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	3b02      	subs	r3, #2
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d902      	bls.n	80014ba <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 80014b4:	f06f 0304 	mvn.w	r3, #4
 80014b8:	e10b      	b.n	80016d2 <sendto+0x25e>
         break;
 80014ba:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80014bc:	89bb      	ldrh	r3, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d102      	bne.n	80014c8 <sendto+0x54>
 80014c2:	f06f 030d 	mvn.w	r3, #13
 80014c6:	e104      	b.n	80016d2 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	3201      	adds	r2, #1
 80014d6:	7812      	ldrb	r2, [r2, #0]
 80014d8:	4413      	add	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	3202      	adds	r2, #2
 80014e4:	7812      	ldrb	r2, [r2, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	3203      	adds	r2, #3
 80014f2:	7812      	ldrb	r2, [r2, #0]
 80014f4:	4413      	add	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10e      	bne.n	800151c <sendto+0xa8>
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	3301      	adds	r3, #1
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fa94 	bl	8001a34 <WIZCHIP_READ>
 800150c:	4603      	mov	r3, r0
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	2b04      	cmp	r3, #4
 8001514:	d002      	beq.n	800151c <sendto+0xa8>
 8001516:	f06f 030b 	mvn.w	r3, #11
 800151a:	e0da      	b.n	80016d2 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800151c:	8c3b      	ldrh	r3, [r7, #32]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10e      	bne.n	8001540 <sendto+0xcc>
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	3301      	adds	r3, #1
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fa82 	bl	8001a34 <WIZCHIP_READ>
 8001530:	4603      	mov	r3, r0
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	2b04      	cmp	r3, #4
 8001538:	d002      	beq.n	8001540 <sendto+0xcc>
 800153a:	f06f 030a 	mvn.w	r3, #10
 800153e:	e0c8      	b.n	80016d2 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	3301      	adds	r3, #1
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800154c:	4618      	mov	r0, r3
 800154e:	f000 fa71 	bl	8001a34 <WIZCHIP_READ>
 8001552:	4603      	mov	r3, r0
 8001554:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8001556:	7dfb      	ldrb	r3, [r7, #23]
 8001558:	2b42      	cmp	r3, #66	; 0x42
 800155a:	d008      	beq.n	800156e <sendto+0xfa>
 800155c:	7dfb      	ldrb	r3, [r7, #23]
 800155e:	2b22      	cmp	r3, #34	; 0x22
 8001560:	d005      	beq.n	800156e <sendto+0xfa>
 8001562:	7dfb      	ldrb	r3, [r7, #23]
 8001564:	2b32      	cmp	r3, #50	; 0x32
 8001566:	d002      	beq.n	800156e <sendto+0xfa>
 8001568:	f06f 0306 	mvn.w	r3, #6
 800156c:	e0b1      	b.n	80016d2 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	3301      	adds	r3, #1
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800157a:	2204      	movs	r2, #4
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	4618      	mov	r0, r3
 8001580:	f000 fb52 	bl	8001c28 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	3301      	adds	r3, #1
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001590:	461a      	mov	r2, r3
 8001592:	8c3b      	ldrh	r3, [r7, #32]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	b29b      	uxth	r3, r3
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4619      	mov	r1, r3
 800159c:	4610      	mov	r0, r2
 800159e:	f000 fa95 	bl	8001acc <WIZCHIP_WRITE>
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	3301      	adds	r3, #1
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80015ae:	461a      	mov	r2, r3
 80015b0:	8c3b      	ldrh	r3, [r7, #32]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	4619      	mov	r1, r3
 80015b6:	4610      	mov	r0, r2
 80015b8:	f000 fa88 	bl	8001acc <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	3301      	adds	r3, #1
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 fa33 	bl	8001a34 <WIZCHIP_READ>
 80015ce:	4603      	mov	r3, r0
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	029b      	lsls	r3, r3, #10
 80015d4:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80015d6:	89ba      	ldrh	r2, [r7, #12]
 80015d8:	8abb      	ldrh	r3, [r7, #20]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d901      	bls.n	80015e2 <sendto+0x16e>
 80015de:	8abb      	ldrh	r3, [r7, #20]
 80015e0:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 fb7f 	bl	8001ce8 <getSn_TX_FSR>
 80015ea:	4603      	mov	r3, r0
 80015ec:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	3301      	adds	r3, #1
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 fa1a 	bl	8001a34 <WIZCHIP_READ>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <sendto+0x198>
 8001606:	f06f 0303 	mvn.w	r3, #3
 800160a:	e062      	b.n	80016d2 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800160c:	4b33      	ldr	r3, [pc, #204]	; (80016dc <sendto+0x268>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	fa42 f303 	asr.w	r3, r2, r3
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <sendto+0x1b8>
 8001620:	89ba      	ldrh	r2, [r7, #12]
 8001622:	8abb      	ldrh	r3, [r7, #20]
 8001624:	429a      	cmp	r2, r3
 8001626:	d901      	bls.n	800162c <sendto+0x1b8>
 8001628:	2300      	movs	r3, #0
 800162a:	e052      	b.n	80016d2 <sendto+0x25e>
      if(len <= freesize) break;
 800162c:	89ba      	ldrh	r2, [r7, #12]
 800162e:	8abb      	ldrh	r3, [r7, #20]
 8001630:	429a      	cmp	r2, r3
 8001632:	d900      	bls.n	8001636 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8001634:	e7d5      	b.n	80015e2 <sendto+0x16e>
      if(len <= freesize) break;
 8001636:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8001638:	89ba      	ldrh	r2, [r7, #12]
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fb9d 	bl	8001d7e <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	3301      	adds	r3, #1
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001650:	2120      	movs	r1, #32
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fa3a 	bl	8001acc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001658:	bf00      	nop
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	3301      	adds	r3, #1
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f9e4 	bl	8001a34 <WIZCHIP_READ>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f3      	bne.n	800165a <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	3301      	adds	r3, #1
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f9d8 	bl	8001a34 <WIZCHIP_READ>
 8001684:	4603      	mov	r3, r0
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800168c:	7dfb      	ldrb	r3, [r7, #23]
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00c      	beq.n	80016b0 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	3301      	adds	r3, #1
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016a2:	2110      	movs	r1, #16
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 fa11 	bl	8001acc <WIZCHIP_WRITE>
         break;
 80016aa:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80016ac:	89bb      	ldrh	r3, [r7, #12]
 80016ae:	e010      	b.n	80016d2 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0db      	beq.n	8001672 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	3301      	adds	r3, #1
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016c6:	2108      	movs	r1, #8
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 f9ff 	bl	8001acc <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80016ce:	f06f 030c 	mvn.w	r3, #12
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000306 	.word	0x20000306

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_MspInit+0x40>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <HAL_MspInit+0x40>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6193      	str	r3, [r2, #24]
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_MspInit+0x40>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_MspInit+0x40>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_MspInit+0x40>)
 8001704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001708:	61d3      	str	r3, [r2, #28]
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_MspInit+0x40>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	40021000 	.word	0x40021000

08001724 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a15      	ldr	r2, [pc, #84]	; (8001794 <HAL_I2C_MspInit+0x70>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d123      	bne.n	800178c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_I2C_MspInit+0x74>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a13      	ldr	r2, [pc, #76]	; (8001798 <HAL_I2C_MspInit+0x74>)
 800174a:	f043 0308 	orr.w	r3, r3, #8
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_I2C_MspInit+0x74>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800175c:	23c0      	movs	r3, #192	; 0xc0
 800175e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001760:	2312      	movs	r3, #18
 8001762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4619      	mov	r1, r3
 800176e:	480b      	ldr	r0, [pc, #44]	; (800179c <HAL_I2C_MspInit+0x78>)
 8001770:	f000 ffea 	bl	8002748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <HAL_I2C_MspInit+0x74>)
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <HAL_I2C_MspInit+0x74>)
 800177a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800177e:	61d3      	str	r3, [r2, #28]
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_I2C_MspInit+0x74>)
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800178c:	bf00      	nop
 800178e:	3720      	adds	r7, #32
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40005400 	.word	0x40005400
 8001798:	40021000 	.word	0x40021000
 800179c:	40010c00 	.word	0x40010c00

080017a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a1f      	ldr	r2, [pc, #124]	; (8001838 <HAL_SPI_MspInit+0x98>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d137      	bne.n	8001830 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017c0:	4b1e      	ldr	r3, [pc, #120]	; (800183c <HAL_SPI_MspInit+0x9c>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a1d      	ldr	r2, [pc, #116]	; (800183c <HAL_SPI_MspInit+0x9c>)
 80017c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <HAL_SPI_MspInit+0x9c>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_SPI_MspInit+0x9c>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_SPI_MspInit+0x9c>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_SPI_MspInit+0x9c>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017f0:	23a0      	movs	r3, #160	; 0xa0
 80017f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	4619      	mov	r1, r3
 8001802:	480f      	ldr	r0, [pc, #60]	; (8001840 <HAL_SPI_MspInit+0xa0>)
 8001804:	f000 ffa0 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001808:	2340      	movs	r3, #64	; 0x40
 800180a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	4619      	mov	r1, r3
 800181a:	4809      	ldr	r0, [pc, #36]	; (8001840 <HAL_SPI_MspInit+0xa0>)
 800181c:	f000 ff94 	bl	8002748 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	2023      	movs	r0, #35	; 0x23
 8001826:	f000 fee2 	bl	80025ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800182a:	2023      	movs	r0, #35	; 0x23
 800182c:	f000 fefb 	bl	8002626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001830:	bf00      	nop
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40013000 	.word	0x40013000
 800183c:	40021000 	.word	0x40021000
 8001840:	40010800 	.word	0x40010800

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <NMI_Handler+0x4>

0800184a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler+0x4>

08001856 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <BusFault_Handler+0x4>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler+0x4>

08001862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188a:	f000 fd99 	bl	80023c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <SPI1_IRQHandler+0x10>)
 800189a:	f003 f96b 	bl	8004b74 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000288 	.word	0x20000288

080018a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return 1;
 80018ac:	2301      	movs	r3, #1
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <_kill>:

int _kill(int pid, int sig)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018c0:	f003 fb54 	bl	8004f6c <__errno>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2216      	movs	r2, #22
 80018c8:	601a      	str	r2, [r3, #0]
  return -1;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <_exit>:

void _exit (int status)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018de:	f04f 31ff 	mov.w	r1, #4294967295
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ffe7 	bl	80018b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018e8:	e7fe      	b.n	80018e8 <_exit+0x12>

080018ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e00a      	b.n	8001912 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018fc:	f3af 8000 	nop.w
 8001900:	4601      	mov	r1, r0
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	60ba      	str	r2, [r7, #8]
 8001908:	b2ca      	uxtb	r2, r1
 800190a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	3301      	adds	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbf0      	blt.n	80018fc <_read+0x12>
  }

  return len;
 800191a:	687b      	ldr	r3, [r7, #4]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e009      	b.n	800194a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	60ba      	str	r2, [r7, #8]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	3301      	adds	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	dbf1      	blt.n	8001936 <_write+0x12>
  }
  return len;
 8001952:	687b      	ldr	r3, [r7, #4]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_close>:

int _close(int file)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001964:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001982:	605a      	str	r2, [r3, #4]
  return 0;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <_isatty>:

int _isatty(int file)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001998:	2301      	movs	r3, #1
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c4:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <_sbrk+0x5c>)
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <_sbrk+0x60>)
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d102      	bne.n	80019de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <_sbrk+0x64>)
 80019da:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <_sbrk+0x68>)
 80019dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d207      	bcs.n	80019fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ec:	f003 fabe 	bl	8004f6c <__errno>
 80019f0:	4603      	mov	r3, r0
 80019f2:	220c      	movs	r2, #12
 80019f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	e009      	b.n	8001a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <_sbrk+0x64>)
 8001a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20005000 	.word	0x20005000
 8001a1c:	00000400 	.word	0x00000400
 8001a20:	20000324 	.word	0x20000324
 8001a24:	20000348 	.word	0x20000348

08001a28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001a3c:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <WIZCHIP_READ+0x94>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <WIZCHIP_READ+0x94>)
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001a48:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <WIZCHIP_READ+0x94>)
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <WIZCHIP_READ+0x24>
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <WIZCHIP_READ+0x94>)
 8001a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d114      	bne.n	8001a82 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <WIZCHIP_READ+0x94>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	0c12      	lsrs	r2, r2, #16
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	4610      	mov	r0, r2
 8001a64:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <WIZCHIP_READ+0x94>)
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	0a12      	lsrs	r2, r2, #8
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	4610      	mov	r0, r2
 8001a72:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <WIZCHIP_READ+0x94>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4798      	blx	r3
 8001a80:	e011      	b.n	8001aa6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	0c1b      	lsrs	r3, r3, #16
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <WIZCHIP_READ+0x94>)
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	f107 020c 	add.w	r2, r7, #12
 8001aa0:	2103      	movs	r1, #3
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <WIZCHIP_READ+0x94>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	4798      	blx	r3
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <WIZCHIP_READ+0x94>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <WIZCHIP_READ+0x94>)
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	4798      	blx	r3
   return ret;
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000008 	.word	0x20000008

08001acc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001ad8:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <WIZCHIP_WRITE+0x98>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <WIZCHIP_WRITE+0x98>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f043 0304 	orr.w	r3, r3, #4
 8001aea:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001aec:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <WIZCHIP_WRITE+0x98>)
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d119      	bne.n	8001b28 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <WIZCHIP_WRITE+0x98>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	0c12      	lsrs	r2, r2, #16
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	4610      	mov	r0, r2
 8001b00:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <WIZCHIP_WRITE+0x98>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	0a12      	lsrs	r2, r2, #8
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <WIZCHIP_WRITE+0x98>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <WIZCHIP_WRITE+0x98>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	78fa      	ldrb	r2, [r7, #3]
 8001b22:	4610      	mov	r0, r2
 8001b24:	4798      	blx	r3
 8001b26:	e013      	b.n	8001b50 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	0c1b      	lsrs	r3, r3, #16
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <WIZCHIP_WRITE+0x98>)
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	f107 020c 	add.w	r2, r7, #12
 8001b4a:	2104      	movs	r1, #4
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <WIZCHIP_WRITE+0x98>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001b56:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <WIZCHIP_WRITE+0x98>)
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	4798      	blx	r3
}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000008 	.word	0x20000008

08001b68 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	4613      	mov	r3, r2
 8001b74:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001b76:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <WIZCHIP_READ_BUF+0xbc>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001b7c:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <WIZCHIP_READ_BUF+0xbc>)
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <WIZCHIP_READ_BUF+0xbc>)
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <WIZCHIP_READ_BUF+0x2a>
 8001b8a:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <WIZCHIP_READ_BUF+0xbc>)
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d126      	bne.n	8001be0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001b92:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <WIZCHIP_READ_BUF+0xbc>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	0c12      	lsrs	r2, r2, #16
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001ba0:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <WIZCHIP_READ_BUF+0xbc>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	0a12      	lsrs	r2, r2, #8
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	4610      	mov	r0, r2
 8001bac:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001bae:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <WIZCHIP_READ_BUF+0xbc>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	82fb      	strh	r3, [r7, #22]
 8001bbe:	e00a      	b.n	8001bd6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001bc0:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <WIZCHIP_READ_BUF+0xbc>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	8afa      	ldrh	r2, [r7, #22]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	188c      	adds	r4, r1, r2
 8001bca:	4798      	blx	r3
 8001bcc:	4603      	mov	r3, r0
 8001bce:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001bd0:	8afb      	ldrh	r3, [r7, #22]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	82fb      	strh	r3, [r7, #22]
 8001bd6:	8afa      	ldrh	r2, [r7, #22]
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d3f0      	bcc.n	8001bc0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001bde:	e017      	b.n	8001c10 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	0c1b      	lsrs	r3, r3, #16
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <WIZCHIP_READ_BUF+0xbc>)
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	f107 0210 	add.w	r2, r7, #16
 8001bfe:	2103      	movs	r1, #3
 8001c00:	4610      	mov	r0, r2
 8001c02:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001c04:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <WIZCHIP_READ_BUF+0xbc>)
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	88fa      	ldrh	r2, [r7, #6]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	68b8      	ldr	r0, [r7, #8]
 8001c0e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <WIZCHIP_READ_BUF+0xbc>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001c16:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <WIZCHIP_READ_BUF+0xbc>)
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	4798      	blx	r3
}
 8001c1c:	bf00      	nop
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd90      	pop	{r4, r7, pc}
 8001c24:	20000008 	.word	0x20000008

08001c28 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	4613      	mov	r3, r2
 8001c34:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001c36:	4b2b      	ldr	r3, [pc, #172]	; (8001ce4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001c3c:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001c4a:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d126      	bne.n	8001ca0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	0c12      	lsrs	r2, r2, #16
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001c60:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	0a12      	lsrs	r2, r2, #8
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	4610      	mov	r0, r2
 8001c78:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	82fb      	strh	r3, [r7, #22]
 8001c7e:	e00a      	b.n	8001c96 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	8afa      	ldrh	r2, [r7, #22]
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	440a      	add	r2, r1
 8001c8a:	7812      	ldrb	r2, [r2, #0]
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001c90:	8afb      	ldrh	r3, [r7, #22]
 8001c92:	3301      	adds	r3, #1
 8001c94:	82fb      	strh	r3, [r7, #22]
 8001c96:	8afa      	ldrh	r2, [r7, #22]
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d3f0      	bcc.n	8001c80 <WIZCHIP_WRITE_BUF+0x58>
 8001c9e:	e017      	b.n	8001cd0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	0c1b      	lsrs	r3, r3, #16
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	f107 0210 	add.w	r2, r7, #16
 8001cbe:	2103      	movs	r1, #3
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001cc4:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc8:	88fa      	ldrh	r2, [r7, #6]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	68b8      	ldr	r0, [r7, #8]
 8001cce:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001cd6:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	4798      	blx	r3
}
 8001cdc:	bf00      	nop
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000008 	.word	0x20000008

08001ce8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	81fb      	strh	r3, [r7, #14]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	3301      	adds	r3, #1
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fe94 	bl	8001a34 <WIZCHIP_READ>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001d10:	89bb      	ldrh	r3, [r7, #12]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	b29c      	uxth	r4, r3
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fe86 	bl	8001a34 <WIZCHIP_READ>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4423      	add	r3, r4
 8001d2e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001d30:	89bb      	ldrh	r3, [r7, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d01a      	beq.n	8001d6c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fe76 	bl	8001a34 <WIZCHIP_READ>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001d4c:	89fb      	ldrh	r3, [r7, #14]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	b29c      	uxth	r4, r3
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	3301      	adds	r3, #1
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fe68 	bl	8001a34 <WIZCHIP_READ>
 8001d64:	4603      	mov	r3, r0
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4423      	add	r3, r4
 8001d6a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001d6c:	89fa      	ldrh	r2, [r7, #14]
 8001d6e:	89bb      	ldrh	r3, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d1c2      	bne.n	8001cfa <getSn_TX_FSR+0x12>
   return val;
 8001d74:	89fb      	ldrh	r3, [r7, #14]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd90      	pop	{r4, r7, pc}

08001d7e <wiz_send_data>:
   }while (val != val1);
   return val;
}

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001d7e:	b590      	push	{r4, r7, lr}
 8001d80:	b085      	sub	sp, #20
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	6039      	str	r1, [r7, #0]
 8001d88:	71fb      	strb	r3, [r7, #7]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001d96:	88bb      	ldrh	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d048      	beq.n	8001e2e <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	3301      	adds	r3, #1
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fe43 	bl	8001a34 <WIZCHIP_READ>
 8001dae:	4603      	mov	r3, r0
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	b29c      	uxth	r4, r3
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	3301      	adds	r3, #1
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fe36 	bl	8001a34 <WIZCHIP_READ>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4423      	add	r3, r4
 8001dce:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001dd0:	89fb      	ldrh	r3, [r7, #14]
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	79fa      	ldrb	r2, [r7, #7]
 8001dd6:	0092      	lsls	r2, r2, #2
 8001dd8:	3202      	adds	r2, #2
 8001dda:	00d2      	lsls	r2, r2, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001de0:	88bb      	ldrh	r3, [r7, #4]
 8001de2:	461a      	mov	r2, r3
 8001de4:	6839      	ldr	r1, [r7, #0]
 8001de6:	68b8      	ldr	r0, [r7, #8]
 8001de8:	f7ff ff1e 	bl	8001c28 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001dec:	89fa      	ldrh	r2, [r7, #14]
 8001dee:	88bb      	ldrh	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	3301      	adds	r3, #1
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001e00:	461a      	mov	r2, r3
 8001e02:	89fb      	ldrh	r3, [r7, #14]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	f7ff fe5d 	bl	8001acc <WIZCHIP_WRITE>
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	3301      	adds	r3, #1
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001e1e:	461a      	mov	r2, r3
 8001e20:	89fb      	ldrh	r3, [r7, #14]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	4619      	mov	r1, r3
 8001e26:	4610      	mov	r0, r2
 8001e28:	f7ff fe50 	bl	8001acc <WIZCHIP_WRITE>
 8001e2c:	e000      	b.n	8001e30 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001e2e:	bf00      	nop
}
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd90      	pop	{r4, r7, pc}
	...

08001e38 <cs_sel>:
extern SPI_HandleTypeDef hspi1;

/**
 * @brief function to set cs pin low to start transmission
 */
static void cs_sel(void) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2110      	movs	r1, #16
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <cs_sel+0x14>)
 8001e42:	f000 fe05 	bl	8002a50 <HAL_GPIO_WritePin>
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40010800 	.word	0x40010800

08001e50 <cs_desel>:

/**
 * @brief function to set cs pin high to end transmission
 */
static void cs_desel(void) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8001e54:	2201      	movs	r2, #1
 8001e56:	2110      	movs	r1, #16
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <cs_desel+0x14>)
 8001e5a:	f000 fdf9 	bl	8002a50 <HAL_GPIO_WritePin>
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40010800 	.word	0x40010800

08001e68 <spi_rb>:

/**
 * @brief function to read byte through spi
 */
uint8_t spi_rb(void) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 8001e6e:	1df9      	adds	r1, r7, #7
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
 8001e74:	2201      	movs	r2, #1
 8001e76:	4804      	ldr	r0, [pc, #16]	; (8001e88 <spi_rb+0x20>)
 8001e78:	f002 fbc8 	bl	800460c <HAL_SPI_Receive>
	return rbuf;
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000288 	.word	0x20000288

08001e8c <spi_wb>:

/**
 * @brief function to write byte through spi
 */
void spi_wb(uint8_t b) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 8001e96:	1df9      	adds	r1, r7, #7
 8001e98:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4803      	ldr	r0, [pc, #12]	; (8001eac <spi_wb+0x20>)
 8001ea0:	f002 fa78 	bl	8004394 <HAL_SPI_Transmit>
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000288 	.word	0x20000288

08001eb0 <initializeW5500>:
 * @param ip is the node's IP address
 * @param sn is the node's subnet mask
 * @param gw is the node's gateway address
 */
void initializeW5500(uint8_t mac[], uint8_t ip[], uint8_t sn[], uint8_t gw[])
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08c      	sub	sp, #48	; 0x30
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
	uint8_t bufSize[] = { 2, 2, 2, 2, 2, 2, 2, 2};//size of each socket number in kilobytes
 8001ebe:	4a1e      	ldr	r2, [pc, #120]	; (8001f38 <initializeW5500+0x88>)
 8001ec0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ec8:	e883 0003 	stmia.w	r3, {r0, r1}

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);//passes call back function for pin high and low which needs to be called during the SPI transfer
 8001ecc:	491b      	ldr	r1, [pc, #108]	; (8001f3c <initializeW5500+0x8c>)
 8001ece:	481c      	ldr	r0, [pc, #112]	; (8001f40 <initializeW5500+0x90>)
 8001ed0:	f000 f8a2 	bl	8002018 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spi_rb, spi_wb);//passes the call back function for read byte and write byte which needs to be called during the SPI transfer
 8001ed4:	491b      	ldr	r1, [pc, #108]	; (8001f44 <initializeW5500+0x94>)
 8001ed6:	481c      	ldr	r0, [pc, #112]	; (8001f48 <initializeW5500+0x98>)
 8001ed8:	f000 f8c2 	bl	8002060 <reg_wizchip_spi_cbfunc>

	wizchip_init(bufSize, bufSize);//initializes the transmit and receive buffer sizes for each socket
 8001edc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f932 	bl	8002150 <wizchip_init>
	wiz_NetInfo netInfo = {};
 8001eec:	f107 0310 	add.w	r3, r7, #16
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
 8001efc:	f8c3 2013 	str.w	r2, [r3, #19]

	memcpy(&netInfo.mac,mac,6);// Mac address
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	f107 0310 	add.w	r3, r7, #16
 8001f06:	6810      	ldr	r0, [r2, #0]
 8001f08:	6018      	str	r0, [r3, #0]
 8001f0a:	8892      	ldrh	r2, [r2, #4]
 8001f0c:	809a      	strh	r2, [r3, #4]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	681b      	ldr	r3, [r3, #0]
	memcpy(&netInfo.ip,ip,4);// IP address
 8001f12:	f8c7 3016 	str.w	r3, [r7, #22]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
	memcpy(&netInfo.sn,sn,4);// Subnet mask
 8001f1a:	f8c7 301a 	str.w	r3, [r7, #26]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
	memcpy(&netInfo.gw,gw,4);// Gateway address
 8001f22:	f8c7 301e 	str.w	r3, [r7, #30]

	wizchip_setnetinfo(&netInfo);//sets the configuration of the MAC address, IP address, subnet mask and gateway
 8001f26:	f107 0310 	add.w	r3, r7, #16
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f99c 	bl	8002268 <wizchip_setnetinfo>
	//wizchip_getnetinfo(&netInfo);
}
 8001f30:	bf00      	nop
 8001f32:	3730      	adds	r7, #48	; 0x30
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	08008274 	.word	0x08008274
 8001f3c:	08001e51 	.word	0x08001e51
 8001f40:	08001e39 	.word	0x08001e39
 8001f44:	08001e8d 	.word	0x08001e8d
 8001f48:	08001e69 	.word	0x08001e69

08001f4c <Socket_sendUDP>:
 * @param message is the message that needs to be sent
 * @param dstip is the destination IP address
 * @param portNum is the destination port number
 */
void Socket_sendUDP(uint8_t socNum,uint8_t message[],uint8_t dstip[], uint16_t portNum)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	461a      	mov	r2, r3
 8001f58:	4603      	mov	r3, r0
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	81bb      	strh	r3, [r7, #12]
	while(sendto(socNum, message, strlen(message), dstip, portNum)!=strlen(message));//sends message to a destination ip address and port
 8001f60:	bf00      	nop
 8001f62:	68b8      	ldr	r0, [r7, #8]
 8001f64:	f7fe f8f4 	bl	8000150 <strlen>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	7bf8      	ldrb	r0, [r7, #15]
 8001f6e:	89bb      	ldrh	r3, [r7, #12]
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	f7ff fa7d 	bl	8001474 <sendto>
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	68b8      	ldr	r0, [r7, #8]
 8001f7e:	f7fe f8e7 	bl	8000150 <strlen>
 8001f82:	4603      	mov	r3, r0
 8001f84:	429c      	cmp	r4, r3
 8001f86:	d1ec      	bne.n	8001f62 <Socket_sendUDP+0x16>
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd90      	pop	{r4, r7, pc}

08001f92 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr

08001fda <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	70fb      	strb	r3, [r7, #3]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	78fa      	ldrb	r2, [r7, #3]
 8001fea:	701a      	strb	r2, [r3, #0]
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <reg_wizchip_cs_cbfunc+0x16>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <reg_wizchip_cs_cbfunc+0x3c>)
 8002030:	4a09      	ldr	r2, [pc, #36]	; (8002058 <reg_wizchip_cs_cbfunc+0x40>)
 8002032:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <reg_wizchip_cs_cbfunc+0x3c>)
 8002036:	4a09      	ldr	r2, [pc, #36]	; (800205c <reg_wizchip_cs_cbfunc+0x44>)
 8002038:	619a      	str	r2, [r3, #24]
 800203a:	e006      	b.n	800204a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800203c:	4a05      	ldr	r2, [pc, #20]	; (8002054 <reg_wizchip_cs_cbfunc+0x3c>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8002042:	4a04      	ldr	r2, [pc, #16]	; (8002054 <reg_wizchip_cs_cbfunc+0x3c>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	6193      	str	r3, [r2, #24]
   }
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	20000008 	.word	0x20000008
 8002058:	08001fab 	.word	0x08001fab
 800205c:	08001fb7 	.word	0x08001fb7

08002060 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800206a:	bf00      	nop
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <reg_wizchip_spi_cbfunc+0x4c>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f9      	beq.n	800206c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <reg_wizchip_spi_cbfunc+0x24>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d106      	bne.n	8002092 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002084:	4b09      	ldr	r3, [pc, #36]	; (80020ac <reg_wizchip_spi_cbfunc+0x4c>)
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <reg_wizchip_spi_cbfunc+0x50>)
 8002088:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <reg_wizchip_spi_cbfunc+0x4c>)
 800208c:	4a09      	ldr	r2, [pc, #36]	; (80020b4 <reg_wizchip_spi_cbfunc+0x54>)
 800208e:	621a      	str	r2, [r3, #32]
 8002090:	e006      	b.n	80020a0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8002092:	4a06      	ldr	r2, [pc, #24]	; (80020ac <reg_wizchip_spi_cbfunc+0x4c>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <reg_wizchip_spi_cbfunc+0x4c>)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6213      	str	r3, [r2, #32]
   }
}
 800209e:	bf00      	nop
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000008 	.word	0x20000008
 80020b0:	08001ff7 	.word	0x08001ff7
 80020b4:	08002005 	.word	0x08002005

080020b8 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2206      	movs	r2, #6
 80020c2:	4619      	mov	r1, r3
 80020c4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80020c8:	f7ff fd4e 	bl	8001b68 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	2204      	movs	r2, #4
 80020d2:	4619      	mov	r1, r3
 80020d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020d8:	f7ff fd46 	bl	8001b68 <WIZCHIP_READ_BUF>
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	2204      	movs	r2, #4
 80020e2:	4619      	mov	r1, r3
 80020e4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80020e8:	f7ff fd3e 	bl	8001b68 <WIZCHIP_READ_BUF>
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	2204      	movs	r2, #4
 80020f2:	4619      	mov	r1, r3
 80020f4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80020f8:	f7ff fd36 	bl	8001b68 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	2000      	movs	r0, #0
 8002100:	f7ff fce4 	bl	8001acc <WIZCHIP_WRITE>
   getMR(); // for delay
 8002104:	2000      	movs	r0, #0
 8002106:	f7ff fc95 	bl	8001a34 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	2206      	movs	r2, #6
 800210e:	4619      	mov	r1, r3
 8002110:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002114:	f7ff fd88 	bl	8001c28 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	2204      	movs	r2, #4
 800211e:	4619      	mov	r1, r3
 8002120:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002124:	f7ff fd80 	bl	8001c28 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	2204      	movs	r2, #4
 800212e:	4619      	mov	r1, r3
 8002130:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002134:	f7ff fd78 	bl	8001c28 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	2204      	movs	r2, #4
 800213e:	4619      	mov	r1, r3
 8002140:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002144:	f7ff fd70 	bl	8001c28 <WIZCHIP_WRITE_BUF>
}
 8002148:	bf00      	nop
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800215e:	f7ff ffab 	bl	80020b8 <wizchip_sw_reset>
   if(txsize)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d03b      	beq.n	80021e0 <wizchip_init+0x90>
   {
      tmp = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800216c:	2300      	movs	r3, #0
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	e015      	b.n	800219e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8002172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	781a      	ldrb	r2, [r3, #0]
 800217c:	7bbb      	ldrb	r3, [r7, #14]
 800217e:	4413      	add	r3, r2
 8002180:	b2db      	uxtb	r3, r3
 8002182:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002184:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002188:	2b10      	cmp	r3, #16
 800218a:	dd02      	ble.n	8002192 <wizchip_init+0x42>
 800218c:	f04f 33ff 	mov.w	r3, #4294967295
 8002190:	e066      	b.n	8002260 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	3301      	adds	r3, #1
 800219a:	b2db      	uxtb	r3, r3
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a2:	2b07      	cmp	r3, #7
 80021a4:	dde5      	ble.n	8002172 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	e015      	b.n	80021d8 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80021ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	3301      	adds	r3, #1
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80021ba:	4618      	mov	r0, r3
 80021bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	4619      	mov	r1, r3
 80021c8:	f7ff fc80 	bl	8001acc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80021cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	3301      	adds	r3, #1
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021dc:	2b07      	cmp	r3, #7
 80021de:	dde5      	ble.n	80021ac <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d03b      	beq.n	800225e <wizchip_init+0x10e>
   {
      tmp = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	e015      	b.n	800221c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80021f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	4413      	add	r3, r2
 80021f8:	781a      	ldrb	r2, [r3, #0]
 80021fa:	7bbb      	ldrb	r3, [r7, #14]
 80021fc:	4413      	add	r3, r2
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002206:	2b10      	cmp	r3, #16
 8002208:	dd02      	ble.n	8002210 <wizchip_init+0xc0>
 800220a:	f04f 33ff 	mov.w	r3, #4294967295
 800220e:	e027      	b.n	8002260 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	3301      	adds	r3, #1
 8002218:	b2db      	uxtb	r3, r3
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002220:	2b07      	cmp	r3, #7
 8002222:	dde5      	ble.n	80021f0 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e015      	b.n	8002256 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800222a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	3301      	adds	r3, #1
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002238:	4618      	mov	r0, r3
 800223a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	4413      	add	r3, r2
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	f7ff fc41 	bl	8001acc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800224a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	3301      	adds	r3, #1
 8002252:	b2db      	uxtb	r3, r3
 8002254:	73fb      	strb	r3, [r7, #15]
 8002256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225a:	2b07      	cmp	r3, #7
 800225c:	dde5      	ble.n	800222a <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2206      	movs	r2, #6
 8002274:	4619      	mov	r1, r3
 8002276:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800227a:	f7ff fcd5 	bl	8001c28 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	330e      	adds	r3, #14
 8002282:	2204      	movs	r2, #4
 8002284:	4619      	mov	r1, r3
 8002286:	f44f 7080 	mov.w	r0, #256	; 0x100
 800228a:	f7ff fccd 	bl	8001c28 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	330a      	adds	r3, #10
 8002292:	2204      	movs	r2, #4
 8002294:	4619      	mov	r1, r3
 8002296:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800229a:	f7ff fcc5 	bl	8001c28 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3306      	adds	r3, #6
 80022a2:	2204      	movs	r2, #4
 80022a4:	4619      	mov	r1, r3
 80022a6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80022aa:	f7ff fcbd 	bl	8001c28 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7c9a      	ldrb	r2, [r3, #18]
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <wizchip_setnetinfo+0x78>)
 80022b4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7cda      	ldrb	r2, [r3, #19]
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <wizchip_setnetinfo+0x78>)
 80022bc:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	7d1a      	ldrb	r2, [r3, #20]
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <wizchip_setnetinfo+0x78>)
 80022c4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7d5a      	ldrb	r2, [r3, #21]
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <wizchip_setnetinfo+0x78>)
 80022cc:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7d9a      	ldrb	r2, [r3, #22]
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <wizchip_setnetinfo+0x7c>)
 80022d4:	701a      	strb	r2, [r3, #0]
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000328 	.word	0x20000328
 80022e4:	2000032c 	.word	0x2000032c

080022e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022ea:	490d      	ldr	r1, [pc, #52]	; (8002320 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f0:	e002      	b.n	80022f8 <LoopCopyDataInit>

080022f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f6:	3304      	adds	r3, #4

080022f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022fc:	d3f9      	bcc.n	80022f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002300:	4c0a      	ldr	r4, [pc, #40]	; (800232c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002304:	e001      	b.n	800230a <LoopFillZerobss>

08002306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002308:	3204      	adds	r2, #4

0800230a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800230c:	d3fb      	bcc.n	8002306 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800230e:	f7ff fb8b 	bl	8001a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002312:	f002 fe31 	bl	8004f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002316:	f7fe fdbb 	bl	8000e90 <main>
  bx lr
 800231a:	4770      	bx	lr
  ldr r0, =_sdata
 800231c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002320:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002324:	080086f8 	.word	0x080086f8
  ldr r2, =_sbss
 8002328:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 800232c:	20000344 	.word	0x20000344

08002330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002330:	e7fe      	b.n	8002330 <ADC1_2_IRQHandler>
	...

08002334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_Init+0x28>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a07      	ldr	r2, [pc, #28]	; (800235c <HAL_Init+0x28>)
 800233e:	f043 0310 	orr.w	r3, r3, #16
 8002342:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002344:	2003      	movs	r0, #3
 8002346:	f000 f947 	bl	80025d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800234a:	200f      	movs	r0, #15
 800234c:	f000 f808 	bl	8002360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002350:	f7ff f9c6 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40022000 	.word	0x40022000

08002360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_InitTick+0x54>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <HAL_InitTick+0x58>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	4619      	mov	r1, r3
 8002372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002376:	fbb3 f3f1 	udiv	r3, r3, r1
 800237a:	fbb2 f3f3 	udiv	r3, r2, r3
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f95f 	bl	8002642 <HAL_SYSTICK_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e00e      	b.n	80023ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b0f      	cmp	r3, #15
 8002392:	d80a      	bhi.n	80023aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002394:	2200      	movs	r2, #0
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	f04f 30ff 	mov.w	r0, #4294967295
 800239c:	f000 f927 	bl	80025ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a0:	4a06      	ldr	r2, [pc, #24]	; (80023bc <HAL_InitTick+0x5c>)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e000      	b.n	80023ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20000004 	.word	0x20000004
 80023b8:	20000038 	.word	0x20000038
 80023bc:	20000034 	.word	0x20000034

080023c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_IncTick+0x1c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_IncTick+0x20>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4413      	add	r3, r2
 80023d0:	4a03      	ldr	r2, [pc, #12]	; (80023e0 <HAL_IncTick+0x20>)
 80023d2:	6013      	str	r3, [r2, #0]
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	20000038 	.word	0x20000038
 80023e0:	20000330 	.word	0x20000330

080023e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return uwTick;
 80023e8:	4b02      	ldr	r3, [pc, #8]	; (80023f4 <HAL_GetTick+0x10>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	20000330 	.word	0x20000330

080023f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff fff0 	bl	80023e4 <HAL_GetTick>
 8002404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002410:	d005      	beq.n	800241e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_Delay+0x44>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4413      	add	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800241e:	bf00      	nop
 8002420:	f7ff ffe0 	bl	80023e4 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	429a      	cmp	r2, r3
 800242e:	d8f7      	bhi.n	8002420 <HAL_Delay+0x28>
  {
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000038 	.word	0x20000038

08002440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800245c:	4013      	ands	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800246c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002472:	4a04      	ldr	r2, [pc, #16]	; (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	60d3      	str	r3, [r2, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <__NVIC_GetPriorityGrouping+0x18>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f003 0307 	and.w	r3, r3, #7
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	db0b      	blt.n	80024ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4906      	ldr	r1, [pc, #24]	; (80024d8 <__NVIC_EnableIRQ+0x34>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	2001      	movs	r0, #1
 80024c6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	e000e100 	.word	0xe000e100

080024dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	6039      	str	r1, [r7, #0]
 80024e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	db0a      	blt.n	8002506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	490c      	ldr	r1, [pc, #48]	; (8002528 <__NVIC_SetPriority+0x4c>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	0112      	lsls	r2, r2, #4
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	440b      	add	r3, r1
 8002500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002504:	e00a      	b.n	800251c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4908      	ldr	r1, [pc, #32]	; (800252c <__NVIC_SetPriority+0x50>)
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	3b04      	subs	r3, #4
 8002514:	0112      	lsls	r2, r2, #4
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	440b      	add	r3, r1
 800251a:	761a      	strb	r2, [r3, #24]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000e100 	.word	0xe000e100
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002530:	b480      	push	{r7}
 8002532:	b089      	sub	sp, #36	; 0x24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f1c3 0307 	rsb	r3, r3, #7
 800254a:	2b04      	cmp	r3, #4
 800254c:	bf28      	it	cs
 800254e:	2304      	movcs	r3, #4
 8002550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3304      	adds	r3, #4
 8002556:	2b06      	cmp	r3, #6
 8002558:	d902      	bls.n	8002560 <NVIC_EncodePriority+0x30>
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3b03      	subs	r3, #3
 800255e:	e000      	b.n	8002562 <NVIC_EncodePriority+0x32>
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	f04f 32ff 	mov.w	r2, #4294967295
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43da      	mvns	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	401a      	ands	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002578:	f04f 31ff 	mov.w	r1, #4294967295
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	43d9      	mvns	r1, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002588:	4313      	orrs	r3, r2
         );
}
 800258a:	4618      	mov	r0, r3
 800258c:	3724      	adds	r7, #36	; 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a4:	d301      	bcc.n	80025aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a6:	2301      	movs	r3, #1
 80025a8:	e00f      	b.n	80025ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <SysTick_Config+0x40>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025b2:	210f      	movs	r1, #15
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295
 80025b8:	f7ff ff90 	bl	80024dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <SysTick_Config+0x40>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025c2:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <SysTick_Config+0x40>)
 80025c4:	2207      	movs	r2, #7
 80025c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	e000e010 	.word	0xe000e010

080025d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ff2d 	bl	8002440 <__NVIC_SetPriorityGrouping>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4603      	mov	r3, r0
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002600:	f7ff ff42 	bl	8002488 <__NVIC_GetPriorityGrouping>
 8002604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	6978      	ldr	r0, [r7, #20]
 800260c:	f7ff ff90 	bl	8002530 <NVIC_EncodePriority>
 8002610:	4602      	mov	r2, r0
 8002612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff5f 	bl	80024dc <__NVIC_SetPriority>
}
 800261e:	bf00      	nop
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	4603      	mov	r3, r0
 800262e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff35 	bl	80024a4 <__NVIC_EnableIRQ>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ffa2 	bl	8002594 <SysTick_Config>
 8002650:	4603      	mov	r3, r0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800266e:	2b02      	cmp	r3, #2
 8002670:	d005      	beq.n	800267e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2204      	movs	r2, #4
 8002676:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
 800267c:	e051      	b.n	8002722 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 020e 	bic.w	r2, r2, #14
 800268c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0201 	bic.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a22      	ldr	r2, [pc, #136]	; (800272c <HAL_DMA_Abort_IT+0xd0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d029      	beq.n	80026fc <HAL_DMA_Abort_IT+0xa0>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a20      	ldr	r2, [pc, #128]	; (8002730 <HAL_DMA_Abort_IT+0xd4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d022      	beq.n	80026f8 <HAL_DMA_Abort_IT+0x9c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_DMA_Abort_IT+0xd8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d01a      	beq.n	80026f2 <HAL_DMA_Abort_IT+0x96>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <HAL_DMA_Abort_IT+0xdc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d012      	beq.n	80026ec <HAL_DMA_Abort_IT+0x90>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1c      	ldr	r2, [pc, #112]	; (800273c <HAL_DMA_Abort_IT+0xe0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00a      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x8a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a1a      	ldr	r2, [pc, #104]	; (8002740 <HAL_DMA_Abort_IT+0xe4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d102      	bne.n	80026e0 <HAL_DMA_Abort_IT+0x84>
 80026da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026de:	e00e      	b.n	80026fe <HAL_DMA_Abort_IT+0xa2>
 80026e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026e4:	e00b      	b.n	80026fe <HAL_DMA_Abort_IT+0xa2>
 80026e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026ea:	e008      	b.n	80026fe <HAL_DMA_Abort_IT+0xa2>
 80026ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f0:	e005      	b.n	80026fe <HAL_DMA_Abort_IT+0xa2>
 80026f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026f6:	e002      	b.n	80026fe <HAL_DMA_Abort_IT+0xa2>
 80026f8:	2310      	movs	r3, #16
 80026fa:	e000      	b.n	80026fe <HAL_DMA_Abort_IT+0xa2>
 80026fc:	2301      	movs	r3, #1
 80026fe:	4a11      	ldr	r2, [pc, #68]	; (8002744 <HAL_DMA_Abort_IT+0xe8>)
 8002700:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	4798      	blx	r3
    } 
  }
  return status;
 8002722:	7bfb      	ldrb	r3, [r7, #15]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40020008 	.word	0x40020008
 8002730:	4002001c 	.word	0x4002001c
 8002734:	40020030 	.word	0x40020030
 8002738:	40020044 	.word	0x40020044
 800273c:	40020058 	.word	0x40020058
 8002740:	4002006c 	.word	0x4002006c
 8002744:	40020000 	.word	0x40020000

08002748 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002748:	b480      	push	{r7}
 800274a:	b08b      	sub	sp, #44	; 0x2c
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002752:	2300      	movs	r3, #0
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275a:	e169      	b.n	8002a30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800275c:	2201      	movs	r2, #1
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	429a      	cmp	r2, r3
 8002776:	f040 8158 	bne.w	8002a2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4a9a      	ldr	r2, [pc, #616]	; (80029e8 <HAL_GPIO_Init+0x2a0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d05e      	beq.n	8002842 <HAL_GPIO_Init+0xfa>
 8002784:	4a98      	ldr	r2, [pc, #608]	; (80029e8 <HAL_GPIO_Init+0x2a0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d875      	bhi.n	8002876 <HAL_GPIO_Init+0x12e>
 800278a:	4a98      	ldr	r2, [pc, #608]	; (80029ec <HAL_GPIO_Init+0x2a4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d058      	beq.n	8002842 <HAL_GPIO_Init+0xfa>
 8002790:	4a96      	ldr	r2, [pc, #600]	; (80029ec <HAL_GPIO_Init+0x2a4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d86f      	bhi.n	8002876 <HAL_GPIO_Init+0x12e>
 8002796:	4a96      	ldr	r2, [pc, #600]	; (80029f0 <HAL_GPIO_Init+0x2a8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d052      	beq.n	8002842 <HAL_GPIO_Init+0xfa>
 800279c:	4a94      	ldr	r2, [pc, #592]	; (80029f0 <HAL_GPIO_Init+0x2a8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d869      	bhi.n	8002876 <HAL_GPIO_Init+0x12e>
 80027a2:	4a94      	ldr	r2, [pc, #592]	; (80029f4 <HAL_GPIO_Init+0x2ac>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d04c      	beq.n	8002842 <HAL_GPIO_Init+0xfa>
 80027a8:	4a92      	ldr	r2, [pc, #584]	; (80029f4 <HAL_GPIO_Init+0x2ac>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d863      	bhi.n	8002876 <HAL_GPIO_Init+0x12e>
 80027ae:	4a92      	ldr	r2, [pc, #584]	; (80029f8 <HAL_GPIO_Init+0x2b0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d046      	beq.n	8002842 <HAL_GPIO_Init+0xfa>
 80027b4:	4a90      	ldr	r2, [pc, #576]	; (80029f8 <HAL_GPIO_Init+0x2b0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d85d      	bhi.n	8002876 <HAL_GPIO_Init+0x12e>
 80027ba:	2b12      	cmp	r3, #18
 80027bc:	d82a      	bhi.n	8002814 <HAL_GPIO_Init+0xcc>
 80027be:	2b12      	cmp	r3, #18
 80027c0:	d859      	bhi.n	8002876 <HAL_GPIO_Init+0x12e>
 80027c2:	a201      	add	r2, pc, #4	; (adr r2, 80027c8 <HAL_GPIO_Init+0x80>)
 80027c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c8:	08002843 	.word	0x08002843
 80027cc:	0800281d 	.word	0x0800281d
 80027d0:	0800282f 	.word	0x0800282f
 80027d4:	08002871 	.word	0x08002871
 80027d8:	08002877 	.word	0x08002877
 80027dc:	08002877 	.word	0x08002877
 80027e0:	08002877 	.word	0x08002877
 80027e4:	08002877 	.word	0x08002877
 80027e8:	08002877 	.word	0x08002877
 80027ec:	08002877 	.word	0x08002877
 80027f0:	08002877 	.word	0x08002877
 80027f4:	08002877 	.word	0x08002877
 80027f8:	08002877 	.word	0x08002877
 80027fc:	08002877 	.word	0x08002877
 8002800:	08002877 	.word	0x08002877
 8002804:	08002877 	.word	0x08002877
 8002808:	08002877 	.word	0x08002877
 800280c:	08002825 	.word	0x08002825
 8002810:	08002839 	.word	0x08002839
 8002814:	4a79      	ldr	r2, [pc, #484]	; (80029fc <HAL_GPIO_Init+0x2b4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d013      	beq.n	8002842 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800281a:	e02c      	b.n	8002876 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	623b      	str	r3, [r7, #32]
          break;
 8002822:	e029      	b.n	8002878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	3304      	adds	r3, #4
 800282a:	623b      	str	r3, [r7, #32]
          break;
 800282c:	e024      	b.n	8002878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	3308      	adds	r3, #8
 8002834:	623b      	str	r3, [r7, #32]
          break;
 8002836:	e01f      	b.n	8002878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	330c      	adds	r3, #12
 800283e:	623b      	str	r3, [r7, #32]
          break;
 8002840:	e01a      	b.n	8002878 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d102      	bne.n	8002850 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800284a:	2304      	movs	r3, #4
 800284c:	623b      	str	r3, [r7, #32]
          break;
 800284e:	e013      	b.n	8002878 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d105      	bne.n	8002864 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002858:	2308      	movs	r3, #8
 800285a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	611a      	str	r2, [r3, #16]
          break;
 8002862:	e009      	b.n	8002878 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002864:	2308      	movs	r3, #8
 8002866:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	615a      	str	r2, [r3, #20]
          break;
 800286e:	e003      	b.n	8002878 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002870:	2300      	movs	r3, #0
 8002872:	623b      	str	r3, [r7, #32]
          break;
 8002874:	e000      	b.n	8002878 <HAL_GPIO_Init+0x130>
          break;
 8002876:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2bff      	cmp	r3, #255	; 0xff
 800287c:	d801      	bhi.n	8002882 <HAL_GPIO_Init+0x13a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	e001      	b.n	8002886 <HAL_GPIO_Init+0x13e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3304      	adds	r3, #4
 8002886:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2bff      	cmp	r3, #255	; 0xff
 800288c:	d802      	bhi.n	8002894 <HAL_GPIO_Init+0x14c>
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	e002      	b.n	800289a <HAL_GPIO_Init+0x152>
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	3b08      	subs	r3, #8
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	210f      	movs	r1, #15
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	401a      	ands	r2, r3
 80028ac:	6a39      	ldr	r1, [r7, #32]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	431a      	orrs	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 80b1 	beq.w	8002a2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028c8:	4b4d      	ldr	r3, [pc, #308]	; (8002a00 <HAL_GPIO_Init+0x2b8>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	4a4c      	ldr	r2, [pc, #304]	; (8002a00 <HAL_GPIO_Init+0x2b8>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6193      	str	r3, [r2, #24]
 80028d4:	4b4a      	ldr	r3, [pc, #296]	; (8002a00 <HAL_GPIO_Init+0x2b8>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028e0:	4a48      	ldr	r2, [pc, #288]	; (8002a04 <HAL_GPIO_Init+0x2bc>)
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	3302      	adds	r3, #2
 80028e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	220f      	movs	r2, #15
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4013      	ands	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a40      	ldr	r2, [pc, #256]	; (8002a08 <HAL_GPIO_Init+0x2c0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d013      	beq.n	8002934 <HAL_GPIO_Init+0x1ec>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a3f      	ldr	r2, [pc, #252]	; (8002a0c <HAL_GPIO_Init+0x2c4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00d      	beq.n	8002930 <HAL_GPIO_Init+0x1e8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a3e      	ldr	r2, [pc, #248]	; (8002a10 <HAL_GPIO_Init+0x2c8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d007      	beq.n	800292c <HAL_GPIO_Init+0x1e4>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a3d      	ldr	r2, [pc, #244]	; (8002a14 <HAL_GPIO_Init+0x2cc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d101      	bne.n	8002928 <HAL_GPIO_Init+0x1e0>
 8002924:	2303      	movs	r3, #3
 8002926:	e006      	b.n	8002936 <HAL_GPIO_Init+0x1ee>
 8002928:	2304      	movs	r3, #4
 800292a:	e004      	b.n	8002936 <HAL_GPIO_Init+0x1ee>
 800292c:	2302      	movs	r3, #2
 800292e:	e002      	b.n	8002936 <HAL_GPIO_Init+0x1ee>
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <HAL_GPIO_Init+0x1ee>
 8002934:	2300      	movs	r3, #0
 8002936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002938:	f002 0203 	and.w	r2, r2, #3
 800293c:	0092      	lsls	r2, r2, #2
 800293e:	4093      	lsls	r3, r2
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002946:	492f      	ldr	r1, [pc, #188]	; (8002a04 <HAL_GPIO_Init+0x2bc>)
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	3302      	adds	r3, #2
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d006      	beq.n	800296e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002960:	4b2d      	ldr	r3, [pc, #180]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	492c      	ldr	r1, [pc, #176]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	600b      	str	r3, [r1, #0]
 800296c:	e006      	b.n	800297c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800296e:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	43db      	mvns	r3, r3
 8002976:	4928      	ldr	r1, [pc, #160]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 8002978:	4013      	ands	r3, r2
 800297a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d006      	beq.n	8002996 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002988:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	4922      	ldr	r1, [pc, #136]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	4313      	orrs	r3, r2
 8002992:	604b      	str	r3, [r1, #4]
 8002994:	e006      	b.n	80029a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002996:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	43db      	mvns	r3, r3
 800299e:	491e      	ldr	r1, [pc, #120]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d006      	beq.n	80029be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029b0:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	4918      	ldr	r1, [pc, #96]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	608b      	str	r3, [r1, #8]
 80029bc:	e006      	b.n	80029cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029be:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	4914      	ldr	r1, [pc, #80]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d021      	beq.n	8002a1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	490e      	ldr	r1, [pc, #56]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60cb      	str	r3, [r1, #12]
 80029e4:	e021      	b.n	8002a2a <HAL_GPIO_Init+0x2e2>
 80029e6:	bf00      	nop
 80029e8:	10320000 	.word	0x10320000
 80029ec:	10310000 	.word	0x10310000
 80029f0:	10220000 	.word	0x10220000
 80029f4:	10210000 	.word	0x10210000
 80029f8:	10120000 	.word	0x10120000
 80029fc:	10110000 	.word	0x10110000
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40010000 	.word	0x40010000
 8002a08:	40010800 	.word	0x40010800
 8002a0c:	40010c00 	.word	0x40010c00
 8002a10:	40011000 	.word	0x40011000
 8002a14:	40011400 	.word	0x40011400
 8002a18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_GPIO_Init+0x304>)
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	4909      	ldr	r1, [pc, #36]	; (8002a4c <HAL_GPIO_Init+0x304>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f47f ae8e 	bne.w	800275c <HAL_GPIO_Init+0x14>
  }
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	372c      	adds	r7, #44	; 0x2c
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	40010400 	.word	0x40010400

08002a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	807b      	strh	r3, [r7, #2]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a60:	787b      	ldrb	r3, [r7, #1]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a6c:	e003      	b.n	8002a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a6e:	887b      	ldrh	r3, [r7, #2]
 8002a70:	041a      	lsls	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	611a      	str	r2, [r3, #16]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e12b      	b.n	8002cea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fe fe3c 	bl	8001724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2224      	movs	r2, #36	; 0x24
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ad2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ae4:	f001 fba0 	bl	8004228 <HAL_RCC_GetPCLK1Freq>
 8002ae8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4a81      	ldr	r2, [pc, #516]	; (8002cf4 <HAL_I2C_Init+0x274>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d807      	bhi.n	8002b04 <HAL_I2C_Init+0x84>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a80      	ldr	r2, [pc, #512]	; (8002cf8 <HAL_I2C_Init+0x278>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	bf94      	ite	ls
 8002afc:	2301      	movls	r3, #1
 8002afe:	2300      	movhi	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e006      	b.n	8002b12 <HAL_I2C_Init+0x92>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a7d      	ldr	r2, [pc, #500]	; (8002cfc <HAL_I2C_Init+0x27c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	bf94      	ite	ls
 8002b0c:	2301      	movls	r3, #1
 8002b0e:	2300      	movhi	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e0e7      	b.n	8002cea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a78      	ldr	r2, [pc, #480]	; (8002d00 <HAL_I2C_Init+0x280>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	0c9b      	lsrs	r3, r3, #18
 8002b24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4a6a      	ldr	r2, [pc, #424]	; (8002cf4 <HAL_I2C_Init+0x274>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d802      	bhi.n	8002b54 <HAL_I2C_Init+0xd4>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	3301      	adds	r3, #1
 8002b52:	e009      	b.n	8002b68 <HAL_I2C_Init+0xe8>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b5a:	fb02 f303 	mul.w	r3, r2, r3
 8002b5e:	4a69      	ldr	r2, [pc, #420]	; (8002d04 <HAL_I2C_Init+0x284>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	099b      	lsrs	r3, r3, #6
 8002b66:	3301      	adds	r3, #1
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	495c      	ldr	r1, [pc, #368]	; (8002cf4 <HAL_I2C_Init+0x274>)
 8002b84:	428b      	cmp	r3, r1
 8002b86:	d819      	bhi.n	8002bbc <HAL_I2C_Init+0x13c>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	1e59      	subs	r1, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b96:	1c59      	adds	r1, r3, #1
 8002b98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b9c:	400b      	ands	r3, r1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_I2C_Init+0x138>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1e59      	subs	r1, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb6:	e051      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	e04f      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d111      	bne.n	8002be8 <HAL_I2C_Init+0x168>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1e58      	subs	r0, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	440b      	add	r3, r1
 8002bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e012      	b.n	8002c0e <HAL_I2C_Init+0x18e>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1e58      	subs	r0, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	0099      	lsls	r1, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Init+0x196>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e022      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10e      	bne.n	8002c3c <HAL_I2C_Init+0x1bc>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1e58      	subs	r0, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6859      	ldr	r1, [r3, #4]
 8002c26:	460b      	mov	r3, r1
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	440b      	add	r3, r1
 8002c2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c30:	3301      	adds	r3, #1
 8002c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c3a:	e00f      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1e58      	subs	r0, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	0099      	lsls	r1, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c52:	3301      	adds	r3, #1
 8002c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	6809      	ldr	r1, [r1, #0]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69da      	ldr	r2, [r3, #28]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6911      	ldr	r1, [r2, #16]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68d2      	ldr	r2, [r2, #12]
 8002c96:	4311      	orrs	r1, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	000186a0 	.word	0x000186a0
 8002cf8:	001e847f 	.word	0x001e847f
 8002cfc:	003d08ff 	.word	0x003d08ff
 8002d00:	431bde83 	.word	0x431bde83
 8002d04:	10624dd3 	.word	0x10624dd3

08002d08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	4608      	mov	r0, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	461a      	mov	r2, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	817b      	strh	r3, [r7, #10]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	813b      	strh	r3, [r7, #8]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d22:	f7ff fb5f 	bl	80023e4 <HAL_GetTick>
 8002d26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	f040 80d9 	bne.w	8002ee8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	2319      	movs	r3, #25
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	496d      	ldr	r1, [pc, #436]	; (8002ef4 <HAL_I2C_Mem_Write+0x1ec>)
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 fcc1 	bl	80036c8 <I2C_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e0cc      	b.n	8002eea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_I2C_Mem_Write+0x56>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e0c5      	b.n	8002eea <HAL_I2C_Mem_Write+0x1e2>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d007      	beq.n	8002d84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2221      	movs	r2, #33	; 0x21
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2240      	movs	r2, #64	; 0x40
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a3a      	ldr	r2, [r7, #32]
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002db4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4a4d      	ldr	r2, [pc, #308]	; (8002ef8 <HAL_I2C_Mem_Write+0x1f0>)
 8002dc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dc6:	88f8      	ldrh	r0, [r7, #6]
 8002dc8:	893a      	ldrh	r2, [r7, #8]
 8002dca:	8979      	ldrh	r1, [r7, #10]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 faf8 	bl	80033cc <I2C_RequestMemoryWrite>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d052      	beq.n	8002e88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e081      	b.n	8002eea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 fd42 	bl	8003874 <I2C_WaitOnTXEFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00d      	beq.n	8002e12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d107      	bne.n	8002e0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e06b      	b.n	8002eea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	781a      	ldrb	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d11b      	bne.n	8002e88 <HAL_I2C_Mem_Write+0x180>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d017      	beq.n	8002e88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1aa      	bne.n	8002de6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fd2e 	bl	80038f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00d      	beq.n	8002ebc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d107      	bne.n	8002eb8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e016      	b.n	8002eea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e000      	b.n	8002eea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
  }
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	00100002 	.word	0x00100002
 8002ef8:	ffff0000 	.word	0xffff0000

08002efc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08c      	sub	sp, #48	; 0x30
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	4608      	mov	r0, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	817b      	strh	r3, [r7, #10]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	813b      	strh	r3, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f1a:	f7ff fa63 	bl	80023e4 <HAL_GetTick>
 8002f1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	f040 8244 	bne.w	80033b6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	2319      	movs	r3, #25
 8002f34:	2201      	movs	r2, #1
 8002f36:	4982      	ldr	r1, [pc, #520]	; (8003140 <HAL_I2C_Mem_Read+0x244>)
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 fbc5 	bl	80036c8 <I2C_WaitOnFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002f44:	2302      	movs	r3, #2
 8002f46:	e237      	b.n	80033b8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_I2C_Mem_Read+0x5a>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e230      	b.n	80033b8 <HAL_I2C_Mem_Read+0x4bc>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d007      	beq.n	8002f7c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2222      	movs	r2, #34	; 0x22
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2240      	movs	r2, #64	; 0x40
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002fac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4a62      	ldr	r2, [pc, #392]	; (8003144 <HAL_I2C_Mem_Read+0x248>)
 8002fbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fbe:	88f8      	ldrh	r0, [r7, #6]
 8002fc0:	893a      	ldrh	r2, [r7, #8]
 8002fc2:	8979      	ldrh	r1, [r7, #10]
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	9301      	str	r3, [sp, #4]
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	4603      	mov	r3, r0
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 fa92 	bl	80034f8 <I2C_RequestMemoryRead>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e1ec      	b.n	80033b8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d113      	bne.n	800300e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	e1c0      	b.n	8003390 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003012:	2b01      	cmp	r3, #1
 8003014:	d11e      	bne.n	8003054 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003024:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003026:	b672      	cpsid	i
}
 8003028:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003050:	b662      	cpsie	i
}
 8003052:	e035      	b.n	80030c0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003058:	2b02      	cmp	r3, #2
 800305a:	d11e      	bne.n	800309a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800306a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800306c:	b672      	cpsid	i
}
 800306e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003094:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003096:	b662      	cpsie	i
}
 8003098:	e012      	b.n	80030c0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030a8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80030c0:	e166      	b.n	8003390 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	f200 811f 	bhi.w	800330a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d123      	bne.n	800311c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 fc4d 	bl	8003978 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e167      	b.n	80033b8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	855a      	strh	r2, [r3, #42]	; 0x2a
 800311a:	e139      	b.n	8003390 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	2b02      	cmp	r3, #2
 8003122:	d152      	bne.n	80031ca <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312a:	2200      	movs	r2, #0
 800312c:	4906      	ldr	r1, [pc, #24]	; (8003148 <HAL_I2C_Mem_Read+0x24c>)
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 faca 	bl	80036c8 <I2C_WaitOnFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e13c      	b.n	80033b8 <HAL_I2C_Mem_Read+0x4bc>
 800313e:	bf00      	nop
 8003140:	00100002 	.word	0x00100002
 8003144:	ffff0000 	.word	0xffff0000
 8003148:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800314c:	b672      	cpsid	i
}
 800314e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003192:	b662      	cpsie	i
}
 8003194:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031c8:	e0e2      	b.n	8003390 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	2200      	movs	r2, #0
 80031d2:	497b      	ldr	r1, [pc, #492]	; (80033c0 <HAL_I2C_Mem_Read+0x4c4>)
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 fa77 	bl	80036c8 <I2C_WaitOnFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0e9      	b.n	80033b8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031f4:	b672      	cpsid	i
}
 80031f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800322a:	4b66      	ldr	r3, [pc, #408]	; (80033c4 <HAL_I2C_Mem_Read+0x4c8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	08db      	lsrs	r3, r3, #3
 8003230:	4a65      	ldr	r2, [pc, #404]	; (80033c8 <HAL_I2C_Mem_Read+0x4cc>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0a1a      	lsrs	r2, r3, #8
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	00da      	lsls	r2, r3, #3
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	3b01      	subs	r3, #1
 8003248:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d118      	bne.n	8003282 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f043 0220 	orr.w	r2, r3, #32
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003272:	b662      	cpsie	i
}
 8003274:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e09a      	b.n	80033b8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b04      	cmp	r3, #4
 800328e:	d1d9      	bne.n	8003244 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032d2:	b662      	cpsie	i
}
 80032d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003308:	e042      	b.n	8003390 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 fb32 	bl	8003978 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e04c      	b.n	80033b8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b04      	cmp	r3, #4
 800335c:	d118      	bne.n	8003390 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	f47f ae94 	bne.w	80030c2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	e000      	b.n	80033b8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80033b6:	2302      	movs	r3, #2
  }
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3728      	adds	r7, #40	; 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	00010004 	.word	0x00010004
 80033c4:	20000004 	.word	0x20000004
 80033c8:	14f8b589 	.word	0x14f8b589

080033cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	4608      	mov	r0, r1
 80033d6:	4611      	mov	r1, r2
 80033d8:	461a      	mov	r2, r3
 80033da:	4603      	mov	r3, r0
 80033dc:	817b      	strh	r3, [r7, #10]
 80033de:	460b      	mov	r3, r1
 80033e0:	813b      	strh	r3, [r7, #8]
 80033e2:	4613      	mov	r3, r2
 80033e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f960 	bl	80036c8 <I2C_WaitOnFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00d      	beq.n	800342a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341c:	d103      	bne.n	8003426 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003424:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e05f      	b.n	80034ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800342a:	897b      	ldrh	r3, [r7, #10]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003438:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	6a3a      	ldr	r2, [r7, #32]
 800343e:	492d      	ldr	r1, [pc, #180]	; (80034f4 <I2C_RequestMemoryWrite+0x128>)
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f998 	bl	8003776 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e04c      	b.n	80034ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	6a39      	ldr	r1, [r7, #32]
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fa02 	bl	8003874 <I2C_WaitOnTXEFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00d      	beq.n	8003492 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2b04      	cmp	r3, #4
 800347c:	d107      	bne.n	800348e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e02b      	b.n	80034ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d105      	bne.n	80034a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003498:	893b      	ldrh	r3, [r7, #8]
 800349a:	b2da      	uxtb	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	611a      	str	r2, [r3, #16]
 80034a2:	e021      	b.n	80034e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034a4:	893b      	ldrh	r3, [r7, #8]
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b4:	6a39      	ldr	r1, [r7, #32]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f9dc 	bl	8003874 <I2C_WaitOnTXEFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00d      	beq.n	80034de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d107      	bne.n	80034da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e005      	b.n	80034ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034de:	893b      	ldrh	r3, [r7, #8]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	00010002 	.word	0x00010002

080034f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	4608      	mov	r0, r1
 8003502:	4611      	mov	r1, r2
 8003504:	461a      	mov	r2, r3
 8003506:	4603      	mov	r3, r0
 8003508:	817b      	strh	r3, [r7, #10]
 800350a:	460b      	mov	r3, r1
 800350c:	813b      	strh	r3, [r7, #8]
 800350e:	4613      	mov	r3, r2
 8003510:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003520:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003530:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	2200      	movs	r2, #0
 800353a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f8c2 	bl	80036c8 <I2C_WaitOnFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00d      	beq.n	8003566 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003558:	d103      	bne.n	8003562 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003560:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e0aa      	b.n	80036bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003566:	897b      	ldrh	r3, [r7, #10]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	461a      	mov	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003574:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	6a3a      	ldr	r2, [r7, #32]
 800357a:	4952      	ldr	r1, [pc, #328]	; (80036c4 <I2C_RequestMemoryRead+0x1cc>)
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f8fa 	bl	8003776 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e097      	b.n	80036bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a4:	6a39      	ldr	r1, [r7, #32]
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f964 	bl	8003874 <I2C_WaitOnTXEFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00d      	beq.n	80035ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d107      	bne.n	80035ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e076      	b.n	80036bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035d4:	893b      	ldrh	r3, [r7, #8]
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	611a      	str	r2, [r3, #16]
 80035de:	e021      	b.n	8003624 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035e0:	893b      	ldrh	r3, [r7, #8]
 80035e2:	0a1b      	lsrs	r3, r3, #8
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f0:	6a39      	ldr	r1, [r7, #32]
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f93e 	bl	8003874 <I2C_WaitOnTXEFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00d      	beq.n	800361a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	2b04      	cmp	r3, #4
 8003604:	d107      	bne.n	8003616 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003614:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e050      	b.n	80036bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800361a:	893b      	ldrh	r3, [r7, #8]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003626:	6a39      	ldr	r1, [r7, #32]
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f923 	bl	8003874 <I2C_WaitOnTXEFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00d      	beq.n	8003650 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	2b04      	cmp	r3, #4
 800363a:	d107      	bne.n	800364c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e035      	b.n	80036bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800365e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	2200      	movs	r2, #0
 8003668:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f82b 	bl	80036c8 <I2C_WaitOnFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00d      	beq.n	8003694 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003686:	d103      	bne.n	8003690 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e013      	b.n	80036bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003694:	897b      	ldrh	r3, [r7, #10]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	b2da      	uxtb	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	6a3a      	ldr	r2, [r7, #32]
 80036a8:	4906      	ldr	r1, [pc, #24]	; (80036c4 <I2C_RequestMemoryRead+0x1cc>)
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f863 	bl	8003776 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	00010002 	.word	0x00010002

080036c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	4613      	mov	r3, r2
 80036d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036d8:	e025      	b.n	8003726 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d021      	beq.n	8003726 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e2:	f7fe fe7f 	bl	80023e4 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d302      	bcc.n	80036f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d116      	bne.n	8003726 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f043 0220 	orr.w	r2, r3, #32
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e023      	b.n	800376e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	0c1b      	lsrs	r3, r3, #16
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b01      	cmp	r3, #1
 800372e:	d10d      	bne.n	800374c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	43da      	mvns	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4013      	ands	r3, r2
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	bf0c      	ite	eq
 8003742:	2301      	moveq	r3, #1
 8003744:	2300      	movne	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	e00c      	b.n	8003766 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	43da      	mvns	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4013      	ands	r3, r2
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	bf0c      	ite	eq
 800375e:	2301      	moveq	r3, #1
 8003760:	2300      	movne	r3, #0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	461a      	mov	r2, r3
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	429a      	cmp	r2, r3
 800376a:	d0b6      	beq.n	80036da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
 8003782:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003784:	e051      	b.n	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003794:	d123      	bne.n	80037de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f043 0204 	orr.w	r2, r3, #4
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e046      	b.n	800386c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e4:	d021      	beq.n	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e6:	f7fe fdfd 	bl	80023e4 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d302      	bcc.n	80037fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d116      	bne.n	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f043 0220 	orr.w	r2, r3, #32
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e020      	b.n	800386c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	0c1b      	lsrs	r3, r3, #16
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b01      	cmp	r3, #1
 8003832:	d10c      	bne.n	800384e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	43da      	mvns	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4013      	ands	r3, r2
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	bf14      	ite	ne
 8003846:	2301      	movne	r3, #1
 8003848:	2300      	moveq	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	e00b      	b.n	8003866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	43da      	mvns	r2, r3
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	4013      	ands	r3, r2
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	bf14      	ite	ne
 8003860:	2301      	movne	r3, #1
 8003862:	2300      	moveq	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d18d      	bne.n	8003786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003880:	e02d      	b.n	80038de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f8ce 	bl	8003a24 <I2C_IsAcknowledgeFailed>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e02d      	b.n	80038ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d021      	beq.n	80038de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389a:	f7fe fda3 	bl	80023e4 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d302      	bcc.n	80038b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d116      	bne.n	80038de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f043 0220 	orr.w	r2, r3, #32
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e007      	b.n	80038ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e8:	2b80      	cmp	r3, #128	; 0x80
 80038ea:	d1ca      	bne.n	8003882 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003902:	e02d      	b.n	8003960 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f88d 	bl	8003a24 <I2C_IsAcknowledgeFailed>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e02d      	b.n	8003970 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d021      	beq.n	8003960 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391c:	f7fe fd62 	bl	80023e4 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	429a      	cmp	r2, r3
 800392a:	d302      	bcc.n	8003932 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d116      	bne.n	8003960 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	f043 0220 	orr.w	r2, r3, #32
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e007      	b.n	8003970 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b04      	cmp	r3, #4
 800396c:	d1ca      	bne.n	8003904 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003984:	e042      	b.n	8003a0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	2b10      	cmp	r3, #16
 8003992:	d119      	bne.n	80039c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0210 	mvn.w	r2, #16
 800399c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e029      	b.n	8003a1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c8:	f7fe fd0c 	bl	80023e4 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d302      	bcc.n	80039de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d116      	bne.n	8003a0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	f043 0220 	orr.w	r2, r3, #32
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e007      	b.n	8003a1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a16:	2b40      	cmp	r3, #64	; 0x40
 8003a18:	d1b5      	bne.n	8003986 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3a:	d11b      	bne.n	8003a74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f043 0204 	orr.w	r2, r3, #4
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e272      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8087 	beq.w	8003bae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aa0:	4b92      	ldr	r3, [pc, #584]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d00c      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003aac:	4b8f      	ldr	r3, [pc, #572]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d112      	bne.n	8003ade <HAL_RCC_OscConfig+0x5e>
 8003ab8:	4b8c      	ldr	r3, [pc, #560]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac4:	d10b      	bne.n	8003ade <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac6:	4b89      	ldr	r3, [pc, #548]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d06c      	beq.n	8003bac <HAL_RCC_OscConfig+0x12c>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d168      	bne.n	8003bac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e24c      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae6:	d106      	bne.n	8003af6 <HAL_RCC_OscConfig+0x76>
 8003ae8:	4b80      	ldr	r3, [pc, #512]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a7f      	ldr	r2, [pc, #508]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	e02e      	b.n	8003b54 <HAL_RCC_OscConfig+0xd4>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x98>
 8003afe:	4b7b      	ldr	r3, [pc, #492]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a7a      	ldr	r2, [pc, #488]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	4b78      	ldr	r3, [pc, #480]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a77      	ldr	r2, [pc, #476]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e01d      	b.n	8003b54 <HAL_RCC_OscConfig+0xd4>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0xbc>
 8003b22:	4b72      	ldr	r3, [pc, #456]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a71      	ldr	r2, [pc, #452]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b6f      	ldr	r3, [pc, #444]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a6e      	ldr	r2, [pc, #440]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0xd4>
 8003b3c:	4b6b      	ldr	r3, [pc, #428]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a6a      	ldr	r2, [pc, #424]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b68      	ldr	r3, [pc, #416]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a67      	ldr	r2, [pc, #412]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d013      	beq.n	8003b84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fe fc42 	bl	80023e4 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fe fc3e 	bl	80023e4 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	; 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e200      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b76:	4b5d      	ldr	r3, [pc, #372]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0xe4>
 8003b82:	e014      	b.n	8003bae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7fe fc2e 	bl	80023e4 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fe fc2a 	bl	80023e4 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	; 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e1ec      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9e:	4b53      	ldr	r3, [pc, #332]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x10c>
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d063      	beq.n	8003c82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bba:	4b4c      	ldr	r3, [pc, #304]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bc6:	4b49      	ldr	r3, [pc, #292]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d11c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x18c>
 8003bd2:	4b46      	ldr	r3, [pc, #280]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d116      	bne.n	8003c0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bde:	4b43      	ldr	r3, [pc, #268]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x176>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e1c0      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf6:	4b3d      	ldr	r3, [pc, #244]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4939      	ldr	r1, [pc, #228]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0a:	e03a      	b.n	8003c82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d020      	beq.n	8003c56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c14:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7fe fbe3 	bl	80023e4 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c22:	f7fe fbdf 	bl	80023e4 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e1a1      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c34:	4b2d      	ldr	r3, [pc, #180]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c40:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4927      	ldr	r1, [pc, #156]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	600b      	str	r3, [r1, #0]
 8003c54:	e015      	b.n	8003c82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c56:	4b26      	ldr	r3, [pc, #152]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fe fbc2 	bl	80023e4 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c64:	f7fe fbbe 	bl	80023e4 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e180      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c76:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d03a      	beq.n	8003d04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d019      	beq.n	8003cca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c96:	4b17      	ldr	r3, [pc, #92]	; (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9c:	f7fe fba2 	bl	80023e4 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca4:	f7fe fb9e 	bl	80023e4 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e160      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cc2:	2001      	movs	r0, #1
 8003cc4:	f000 fac4 	bl	8004250 <RCC_Delay>
 8003cc8:	e01c      	b.n	8003d04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cca:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd0:	f7fe fb88 	bl	80023e4 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd6:	e00f      	b.n	8003cf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd8:	f7fe fb84 	bl	80023e4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d908      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e146      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	42420000 	.word	0x42420000
 8003cf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf8:	4b92      	ldr	r3, [pc, #584]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e9      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80a6 	beq.w	8003e5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d12:	2300      	movs	r3, #0
 8003d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d16:	4b8b      	ldr	r3, [pc, #556]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10d      	bne.n	8003d3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d22:	4b88      	ldr	r3, [pc, #544]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	4a87      	ldr	r2, [pc, #540]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	61d3      	str	r3, [r2, #28]
 8003d2e:	4b85      	ldr	r3, [pc, #532]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3e:	4b82      	ldr	r3, [pc, #520]	; (8003f48 <HAL_RCC_OscConfig+0x4c8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d118      	bne.n	8003d7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d4a:	4b7f      	ldr	r3, [pc, #508]	; (8003f48 <HAL_RCC_OscConfig+0x4c8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a7e      	ldr	r2, [pc, #504]	; (8003f48 <HAL_RCC_OscConfig+0x4c8>)
 8003d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d56:	f7fe fb45 	bl	80023e4 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5e:	f7fe fb41 	bl	80023e4 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b64      	cmp	r3, #100	; 0x64
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e103      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d70:	4b75      	ldr	r3, [pc, #468]	; (8003f48 <HAL_RCC_OscConfig+0x4c8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d106      	bne.n	8003d92 <HAL_RCC_OscConfig+0x312>
 8003d84:	4b6f      	ldr	r3, [pc, #444]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	4a6e      	ldr	r2, [pc, #440]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	6213      	str	r3, [r2, #32]
 8003d90:	e02d      	b.n	8003dee <HAL_RCC_OscConfig+0x36e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10c      	bne.n	8003db4 <HAL_RCC_OscConfig+0x334>
 8003d9a:	4b6a      	ldr	r3, [pc, #424]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	4a69      	ldr	r2, [pc, #420]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	6213      	str	r3, [r2, #32]
 8003da6:	4b67      	ldr	r3, [pc, #412]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	4a66      	ldr	r2, [pc, #408]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003dac:	f023 0304 	bic.w	r3, r3, #4
 8003db0:	6213      	str	r3, [r2, #32]
 8003db2:	e01c      	b.n	8003dee <HAL_RCC_OscConfig+0x36e>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2b05      	cmp	r3, #5
 8003dba:	d10c      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x356>
 8003dbc:	4b61      	ldr	r3, [pc, #388]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	4a60      	ldr	r2, [pc, #384]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003dc2:	f043 0304 	orr.w	r3, r3, #4
 8003dc6:	6213      	str	r3, [r2, #32]
 8003dc8:	4b5e      	ldr	r3, [pc, #376]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	4a5d      	ldr	r2, [pc, #372]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	6213      	str	r3, [r2, #32]
 8003dd4:	e00b      	b.n	8003dee <HAL_RCC_OscConfig+0x36e>
 8003dd6:	4b5b      	ldr	r3, [pc, #364]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	4a5a      	ldr	r2, [pc, #360]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	6213      	str	r3, [r2, #32]
 8003de2:	4b58      	ldr	r3, [pc, #352]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	4a57      	ldr	r2, [pc, #348]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003de8:	f023 0304 	bic.w	r3, r3, #4
 8003dec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d015      	beq.n	8003e22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df6:	f7fe faf5 	bl	80023e4 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfc:	e00a      	b.n	8003e14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfe:	f7fe faf1 	bl	80023e4 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e0b1      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e14:	4b4b      	ldr	r3, [pc, #300]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0ee      	beq.n	8003dfe <HAL_RCC_OscConfig+0x37e>
 8003e20:	e014      	b.n	8003e4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e22:	f7fe fadf 	bl	80023e4 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2a:	f7fe fadb 	bl	80023e4 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e09b      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e40:	4b40      	ldr	r3, [pc, #256]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1ee      	bne.n	8003e2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d105      	bne.n	8003e5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e52:	4b3c      	ldr	r3, [pc, #240]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	4a3b      	ldr	r2, [pc, #236]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 8087 	beq.w	8003f76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e68:	4b36      	ldr	r3, [pc, #216]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 030c 	and.w	r3, r3, #12
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d061      	beq.n	8003f38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d146      	bne.n	8003f0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7c:	4b33      	ldr	r3, [pc, #204]	; (8003f4c <HAL_RCC_OscConfig+0x4cc>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e82:	f7fe faaf 	bl	80023e4 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8a:	f7fe faab 	bl	80023e4 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e06d      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e9c:	4b29      	ldr	r3, [pc, #164]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f0      	bne.n	8003e8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb0:	d108      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003eb2:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	4921      	ldr	r1, [pc, #132]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec4:	4b1f      	ldr	r3, [pc, #124]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a19      	ldr	r1, [r3, #32]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	491b      	ldr	r1, [pc, #108]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003edc:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <HAL_RCC_OscConfig+0x4cc>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee2:	f7fe fa7f 	bl	80023e4 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eea:	f7fe fa7b 	bl	80023e4 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e03d      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003efc:	4b11      	ldr	r3, [pc, #68]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0f0      	beq.n	8003eea <HAL_RCC_OscConfig+0x46a>
 8003f08:	e035      	b.n	8003f76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0a:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <HAL_RCC_OscConfig+0x4cc>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f10:	f7fe fa68 	bl	80023e4 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f18:	f7fe fa64 	bl	80023e4 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e026      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <HAL_RCC_OscConfig+0x4c4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0x498>
 8003f36:	e01e      	b.n	8003f76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d107      	bne.n	8003f50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e019      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40007000 	.word	0x40007000
 8003f4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_RCC_OscConfig+0x500>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d106      	bne.n	8003f72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d001      	beq.n	8003f76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40021000 	.word	0x40021000

08003f84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0d0      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f98:	4b6a      	ldr	r3, [pc, #424]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d910      	bls.n	8003fc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa6:	4b67      	ldr	r3, [pc, #412]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 0207 	bic.w	r2, r3, #7
 8003fae:	4965      	ldr	r1, [pc, #404]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	4b63      	ldr	r3, [pc, #396]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0b8      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d020      	beq.n	8004016 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe0:	4b59      	ldr	r3, [pc, #356]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	4a58      	ldr	r2, [pc, #352]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff8:	4b53      	ldr	r3, [pc, #332]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4a52      	ldr	r2, [pc, #328]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004002:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004004:	4b50      	ldr	r3, [pc, #320]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	494d      	ldr	r1, [pc, #308]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004012:	4313      	orrs	r3, r2
 8004014:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d040      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d107      	bne.n	800403a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	4b47      	ldr	r3, [pc, #284]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d115      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e07f      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004042:	4b41      	ldr	r3, [pc, #260]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e073      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004052:	4b3d      	ldr	r3, [pc, #244]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e06b      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004062:	4b39      	ldr	r3, [pc, #228]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f023 0203 	bic.w	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4936      	ldr	r1, [pc, #216]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004074:	f7fe f9b6 	bl	80023e4 <HAL_GetTick>
 8004078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407a:	e00a      	b.n	8004092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800407c:	f7fe f9b2 	bl	80023e4 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	; 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e053      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004092:	4b2d      	ldr	r3, [pc, #180]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f003 020c 	and.w	r2, r3, #12
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d1eb      	bne.n	800407c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040a4:	4b27      	ldr	r3, [pc, #156]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d210      	bcs.n	80040d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b24      	ldr	r3, [pc, #144]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 0207 	bic.w	r2, r3, #7
 80040ba:	4922      	ldr	r1, [pc, #136]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	4313      	orrs	r3, r2
 80040c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c2:	4b20      	ldr	r3, [pc, #128]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e032      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e0:	4b19      	ldr	r3, [pc, #100]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4916      	ldr	r1, [pc, #88]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d009      	beq.n	8004112 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040fe:	4b12      	ldr	r3, [pc, #72]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	490e      	ldr	r1, [pc, #56]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	4313      	orrs	r3, r2
 8004110:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004112:	f000 f821 	bl	8004158 <HAL_RCC_GetSysClockFreq>
 8004116:	4602      	mov	r2, r0
 8004118:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	091b      	lsrs	r3, r3, #4
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	490a      	ldr	r1, [pc, #40]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004124:	5ccb      	ldrb	r3, [r1, r3]
 8004126:	fa22 f303 	lsr.w	r3, r2, r3
 800412a:	4a09      	ldr	r2, [pc, #36]	; (8004150 <HAL_RCC_ClockConfig+0x1cc>)
 800412c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800412e:	4b09      	ldr	r3, [pc, #36]	; (8004154 <HAL_RCC_ClockConfig+0x1d0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fe f914 	bl	8002360 <HAL_InitTick>

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40022000 	.word	0x40022000
 8004148:	40021000 	.word	0x40021000
 800414c:	0800828c 	.word	0x0800828c
 8004150:	20000004 	.word	0x20000004
 8004154:	20000034 	.word	0x20000034

08004158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004158:	b490      	push	{r4, r7}
 800415a:	b08a      	sub	sp, #40	; 0x28
 800415c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800415e:	4b29      	ldr	r3, [pc, #164]	; (8004204 <HAL_RCC_GetSysClockFreq+0xac>)
 8004160:	1d3c      	adds	r4, r7, #4
 8004162:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004164:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004168:	f240 2301 	movw	r3, #513	; 0x201
 800416c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]
 8004172:	2300      	movs	r3, #0
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	2300      	movs	r3, #0
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004182:	4b21      	ldr	r3, [pc, #132]	; (8004208 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b04      	cmp	r3, #4
 8004190:	d002      	beq.n	8004198 <HAL_RCC_GetSysClockFreq+0x40>
 8004192:	2b08      	cmp	r3, #8
 8004194:	d003      	beq.n	800419e <HAL_RCC_GetSysClockFreq+0x46>
 8004196:	e02b      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004198:	4b1c      	ldr	r3, [pc, #112]	; (800420c <HAL_RCC_GetSysClockFreq+0xb4>)
 800419a:	623b      	str	r3, [r7, #32]
      break;
 800419c:	e02b      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	0c9b      	lsrs	r3, r3, #18
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	3328      	adds	r3, #40	; 0x28
 80041a8:	443b      	add	r3, r7
 80041aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80041ae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d012      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041ba:	4b13      	ldr	r3, [pc, #76]	; (8004208 <HAL_RCC_GetSysClockFreq+0xb0>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	0c5b      	lsrs	r3, r3, #17
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	3328      	adds	r3, #40	; 0x28
 80041c6:	443b      	add	r3, r7
 80041c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80041cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	4a0e      	ldr	r2, [pc, #56]	; (800420c <HAL_RCC_GetSysClockFreq+0xb4>)
 80041d2:	fb03 f202 	mul.w	r2, r3, r2
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
 80041de:	e004      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	4a0b      	ldr	r2, [pc, #44]	; (8004210 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041e4:	fb02 f303 	mul.w	r3, r2, r3
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	623b      	str	r3, [r7, #32]
      break;
 80041ee:	e002      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <HAL_RCC_GetSysClockFreq+0xb4>)
 80041f2:	623b      	str	r3, [r7, #32]
      break;
 80041f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041f6:	6a3b      	ldr	r3, [r7, #32]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3728      	adds	r7, #40	; 0x28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc90      	pop	{r4, r7}
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	0800827c 	.word	0x0800827c
 8004208:	40021000 	.word	0x40021000
 800420c:	007a1200 	.word	0x007a1200
 8004210:	003d0900 	.word	0x003d0900

08004214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004218:	4b02      	ldr	r3, [pc, #8]	; (8004224 <HAL_RCC_GetHCLKFreq+0x10>)
 800421a:	681b      	ldr	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr
 8004224:	20000004 	.word	0x20000004

08004228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800422c:	f7ff fff2 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8004230:	4602      	mov	r2, r0
 8004232:	4b05      	ldr	r3, [pc, #20]	; (8004248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	0a1b      	lsrs	r3, r3, #8
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	4903      	ldr	r1, [pc, #12]	; (800424c <HAL_RCC_GetPCLK1Freq+0x24>)
 800423e:	5ccb      	ldrb	r3, [r1, r3]
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40021000 	.word	0x40021000
 800424c:	0800829c 	.word	0x0800829c

08004250 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004258:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <RCC_Delay+0x34>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a0a      	ldr	r2, [pc, #40]	; (8004288 <RCC_Delay+0x38>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	0a5b      	lsrs	r3, r3, #9
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800426c:	bf00      	nop
  }
  while (Delay --);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	1e5a      	subs	r2, r3, #1
 8004272:	60fa      	str	r2, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f9      	bne.n	800426c <RCC_Delay+0x1c>
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr
 8004284:	20000004 	.word	0x20000004
 8004288:	10624dd3 	.word	0x10624dd3

0800428c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e076      	b.n	800438c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d108      	bne.n	80042b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ae:	d009      	beq.n	80042c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	61da      	str	r2, [r3, #28]
 80042b6:	e005      	b.n	80042c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fd fa5e 	bl	80017a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004348:	ea42 0103 	orr.w	r1, r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	0c1a      	lsrs	r2, r3, #16
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f002 0204 	and.w	r2, r2, #4
 800436a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69da      	ldr	r2, [r3, #28]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800437a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	4613      	mov	r3, r2
 80043a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_SPI_Transmit+0x22>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e126      	b.n	8004604 <HAL_SPI_Transmit+0x270>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043be:	f7fe f811 	bl	80023e4 <HAL_GetTick>
 80043c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80043c4:	88fb      	ldrh	r3, [r7, #6]
 80043c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d002      	beq.n	80043da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80043d4:	2302      	movs	r3, #2
 80043d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043d8:	e10b      	b.n	80045f2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_SPI_Transmit+0x52>
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d102      	bne.n	80043ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043ea:	e102      	b.n	80045f2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2203      	movs	r2, #3
 80043f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	88fa      	ldrh	r2, [r7, #6]
 8004404:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	88fa      	ldrh	r2, [r7, #6]
 800440a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004432:	d10f      	bne.n	8004454 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004442:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004452:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445e:	2b40      	cmp	r3, #64	; 0x40
 8004460:	d007      	beq.n	8004472 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004470:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800447a:	d14b      	bne.n	8004514 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_SPI_Transmit+0xf6>
 8004484:	8afb      	ldrh	r3, [r7, #22]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d13e      	bne.n	8004508 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	881a      	ldrh	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	1c9a      	adds	r2, r3, #2
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044ae:	e02b      	b.n	8004508 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d112      	bne.n	80044e4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	881a      	ldrh	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	1c9a      	adds	r2, r3, #2
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80044e2:	e011      	b.n	8004508 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044e4:	f7fd ff7e 	bl	80023e4 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d803      	bhi.n	80044fc <HAL_SPI_Transmit+0x168>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fa:	d102      	bne.n	8004502 <HAL_SPI_Transmit+0x16e>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d102      	bne.n	8004508 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004506:	e074      	b.n	80045f2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1ce      	bne.n	80044b0 <HAL_SPI_Transmit+0x11c>
 8004512:	e04c      	b.n	80045ae <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_SPI_Transmit+0x18e>
 800451c:	8afb      	ldrh	r3, [r7, #22]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d140      	bne.n	80045a4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	7812      	ldrb	r2, [r2, #0]
 800452e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004548:	e02c      	b.n	80045a4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b02      	cmp	r3, #2
 8004556:	d113      	bne.n	8004580 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	7812      	ldrb	r2, [r2, #0]
 8004564:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	86da      	strh	r2, [r3, #54]	; 0x36
 800457e:	e011      	b.n	80045a4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004580:	f7fd ff30 	bl	80023e4 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d803      	bhi.n	8004598 <HAL_SPI_Transmit+0x204>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004596:	d102      	bne.n	800459e <HAL_SPI_Transmit+0x20a>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d102      	bne.n	80045a4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045a2:	e026      	b.n	80045f2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1cd      	bne.n	800454a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	6839      	ldr	r1, [r7, #0]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 fcbc 	bl	8004f30 <SPI_EndRxTxTransaction>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	77fb      	strb	r3, [r7, #31]
 80045ee:	e000      	b.n	80045f2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80045f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004602:	7ffb      	ldrb	r3, [r7, #31]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3720      	adds	r7, #32
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	4613      	mov	r3, r2
 800461a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004628:	d112      	bne.n	8004650 <HAL_SPI_Receive+0x44>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10e      	bne.n	8004650 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2204      	movs	r2, #4
 8004636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f8f1 	bl	800482e <HAL_SPI_TransmitReceive>
 800464c:	4603      	mov	r3, r0
 800464e:	e0ea      	b.n	8004826 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_SPI_Receive+0x52>
 800465a:	2302      	movs	r3, #2
 800465c:	e0e3      	b.n	8004826 <HAL_SPI_Receive+0x21a>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004666:	f7fd febd 	bl	80023e4 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b01      	cmp	r3, #1
 8004676:	d002      	beq.n	800467e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004678:	2302      	movs	r3, #2
 800467a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800467c:	e0ca      	b.n	8004814 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <HAL_SPI_Receive+0x7e>
 8004684:	88fb      	ldrh	r3, [r7, #6]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800468e:	e0c1      	b.n	8004814 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2204      	movs	r2, #4
 8004694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	88fa      	ldrh	r2, [r7, #6]
 80046a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	88fa      	ldrh	r2, [r7, #6]
 80046ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d6:	d10f      	bne.n	80046f8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	d007      	beq.n	8004716 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004714:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d162      	bne.n	80047e4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800471e:	e02e      	b.n	800477e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b01      	cmp	r3, #1
 800472c:	d115      	bne.n	800475a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f103 020c 	add.w	r2, r3, #12
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	7812      	ldrb	r2, [r2, #0]
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004758:	e011      	b.n	800477e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800475a:	f7fd fe43 	bl	80023e4 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d803      	bhi.n	8004772 <HAL_SPI_Receive+0x166>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004770:	d102      	bne.n	8004778 <HAL_SPI_Receive+0x16c>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d102      	bne.n	800477e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800477c:	e04a      	b.n	8004814 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1cb      	bne.n	8004720 <HAL_SPI_Receive+0x114>
 8004788:	e031      	b.n	80047ee <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d113      	bne.n	80047c0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	b292      	uxth	r2, r2
 80047a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	1c9a      	adds	r2, r3, #2
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047be:	e011      	b.n	80047e4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047c0:	f7fd fe10 	bl	80023e4 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d803      	bhi.n	80047d8 <HAL_SPI_Receive+0x1cc>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d102      	bne.n	80047de <HAL_SPI_Receive+0x1d2>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d102      	bne.n	80047e4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80047e2:	e017      	b.n	8004814 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1cd      	bne.n	800478a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	6839      	ldr	r1, [r7, #0]
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fb4a 	bl	8004e8c <SPI_EndRxTransaction>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2220      	movs	r2, #32
 8004802:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	75fb      	strb	r3, [r7, #23]
 8004810:	e000      	b.n	8004814 <HAL_SPI_Receive+0x208>
  }

error :
 8004812:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004824:	7dfb      	ldrb	r3, [r7, #23]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b08c      	sub	sp, #48	; 0x30
 8004832:	af00      	add	r7, sp, #0
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	607a      	str	r2, [r7, #4]
 800483a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800483c:	2301      	movs	r3, #1
 800483e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x26>
 8004850:	2302      	movs	r3, #2
 8004852:	e18a      	b.n	8004b6a <HAL_SPI_TransmitReceive+0x33c>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800485c:	f7fd fdc2 	bl	80023e4 <HAL_GetTick>
 8004860:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004872:	887b      	ldrh	r3, [r7, #2]
 8004874:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004876:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800487a:	2b01      	cmp	r3, #1
 800487c:	d00f      	beq.n	800489e <HAL_SPI_TransmitReceive+0x70>
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004884:	d107      	bne.n	8004896 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d103      	bne.n	8004896 <HAL_SPI_TransmitReceive+0x68>
 800488e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004892:	2b04      	cmp	r3, #4
 8004894:	d003      	beq.n	800489e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004896:	2302      	movs	r3, #2
 8004898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800489c:	e15b      	b.n	8004b56 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_SPI_TransmitReceive+0x82>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_SPI_TransmitReceive+0x82>
 80048aa:	887b      	ldrh	r3, [r7, #2]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d103      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048b6:	e14e      	b.n	8004b56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d003      	beq.n	80048cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2205      	movs	r2, #5
 80048c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	887a      	ldrh	r2, [r7, #2]
 80048dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	887a      	ldrh	r2, [r7, #2]
 80048e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	887a      	ldrh	r2, [r7, #2]
 80048ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	887a      	ldrh	r2, [r7, #2]
 80048f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490c:	2b40      	cmp	r3, #64	; 0x40
 800490e:	d007      	beq.n	8004920 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800491e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004928:	d178      	bne.n	8004a1c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_SPI_TransmitReceive+0x10a>
 8004932:	8b7b      	ldrh	r3, [r7, #26]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d166      	bne.n	8004a06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	881a      	ldrh	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004948:	1c9a      	adds	r2, r3, #2
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800495c:	e053      	b.n	8004a06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b02      	cmp	r3, #2
 800496a:	d11b      	bne.n	80049a4 <HAL_SPI_TransmitReceive+0x176>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d016      	beq.n	80049a4 <HAL_SPI_TransmitReceive+0x176>
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004978:	2b01      	cmp	r3, #1
 800497a:	d113      	bne.n	80049a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004980:	881a      	ldrh	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	1c9a      	adds	r2, r3, #2
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d119      	bne.n	80049e6 <HAL_SPI_TransmitReceive+0x1b8>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d014      	beq.n	80049e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	b292      	uxth	r2, r2
 80049c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	1c9a      	adds	r2, r3, #2
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049e2:	2301      	movs	r3, #1
 80049e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049e6:	f7fd fcfd 	bl	80023e4 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d807      	bhi.n	8004a06 <HAL_SPI_TransmitReceive+0x1d8>
 80049f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fc:	d003      	beq.n	8004a06 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a04:	e0a7      	b.n	8004b56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1a6      	bne.n	800495e <HAL_SPI_TransmitReceive+0x130>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1a1      	bne.n	800495e <HAL_SPI_TransmitReceive+0x130>
 8004a1a:	e07c      	b.n	8004b16 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <HAL_SPI_TransmitReceive+0x1fc>
 8004a24:	8b7b      	ldrh	r3, [r7, #26]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d16b      	bne.n	8004b02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	7812      	ldrb	r2, [r2, #0]
 8004a36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a50:	e057      	b.n	8004b02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d11c      	bne.n	8004a9a <HAL_SPI_TransmitReceive+0x26c>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d017      	beq.n	8004a9a <HAL_SPI_TransmitReceive+0x26c>
 8004a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d114      	bne.n	8004a9a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	330c      	adds	r3, #12
 8004a7a:	7812      	ldrb	r2, [r2, #0]
 8004a7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d119      	bne.n	8004adc <HAL_SPI_TransmitReceive+0x2ae>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d014      	beq.n	8004adc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004adc:	f7fd fc82 	bl	80023e4 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d803      	bhi.n	8004af4 <HAL_SPI_TransmitReceive+0x2c6>
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af2:	d102      	bne.n	8004afa <HAL_SPI_TransmitReceive+0x2cc>
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d103      	bne.n	8004b02 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b00:	e029      	b.n	8004b56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1a2      	bne.n	8004a52 <HAL_SPI_TransmitReceive+0x224>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d19d      	bne.n	8004a52 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fa08 	bl	8004f30 <SPI_EndRxTxTransaction>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d006      	beq.n	8004b34 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004b32:	e010      	b.n	8004b56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10b      	bne.n	8004b54 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	e000      	b.n	8004b56 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004b54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3730      	adds	r7, #48	; 0x30
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	099b      	lsrs	r3, r3, #6
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10f      	bne.n	8004bb8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	099b      	lsrs	r3, r3, #6
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d004      	beq.n	8004bb8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	4798      	blx	r3
    return;
 8004bb6:	e0be      	b.n	8004d36 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	085b      	lsrs	r3, r3, #1
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <HAL_SPI_IRQHandler+0x66>
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	09db      	lsrs	r3, r3, #7
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d004      	beq.n	8004bda <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	4798      	blx	r3
    return;
 8004bd8:	e0ad      	b.n	8004d36 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_SPI_IRQHandler+0x80>
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	099b      	lsrs	r3, r3, #6
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80a1 	beq.w	8004d36 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 809a 	beq.w	8004d36 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	099b      	lsrs	r3, r3, #6
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d023      	beq.n	8004c56 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d011      	beq.n	8004c3e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1e:	f043 0204 	orr.w	r2, r3, #4
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c26:	2300      	movs	r3, #0
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	e00b      	b.n	8004c56 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	693b      	ldr	r3, [r7, #16]
        return;
 8004c54:	e06f      	b.n	8004d36 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d014      	beq.n	8004c8c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c66:	f043 0201 	orr.w	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d04f      	beq.n	8004d34 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ca2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d104      	bne.n	8004cc0 <HAL_SPI_IRQHandler+0x14c>
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d034      	beq.n	8004d2a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0203 	bic.w	r2, r2, #3
 8004cce:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d011      	beq.n	8004cfc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cdc:	4a17      	ldr	r2, [pc, #92]	; (8004d3c <HAL_SPI_IRQHandler+0x1c8>)
 8004cde:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fd fcb9 	bl	800265c <HAL_DMA_Abort_IT>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d016      	beq.n	8004d32 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d08:	4a0c      	ldr	r2, [pc, #48]	; (8004d3c <HAL_SPI_IRQHandler+0x1c8>)
 8004d0a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fd fca3 	bl	800265c <HAL_DMA_Abort_IT>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004d28:	e003      	b.n	8004d32 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f808 	bl	8004d40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004d30:	e000      	b.n	8004d34 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004d32:	bf00      	nop
    return;
 8004d34:	bf00      	nop
  }
}
 8004d36:	3720      	adds	r7, #32
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	08004d53 	.word	0x08004d53

08004d40 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr

08004d52 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f7ff ffe7 	bl	8004d40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d72:	bf00      	nop
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d8c:	f7fd fb2a 	bl	80023e4 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	1a9b      	subs	r3, r3, r2
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	4413      	add	r3, r2
 8004d9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d9c:	f7fd fb22 	bl	80023e4 <HAL_GetTick>
 8004da0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004da2:	4b39      	ldr	r3, [pc, #228]	; (8004e88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	015b      	lsls	r3, r3, #5
 8004da8:	0d1b      	lsrs	r3, r3, #20
 8004daa:	69fa      	ldr	r2, [r7, #28]
 8004dac:	fb02 f303 	mul.w	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004db2:	e054      	b.n	8004e5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dba:	d050      	beq.n	8004e5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dbc:	f7fd fb12 	bl	80023e4 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d902      	bls.n	8004dd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d13d      	bne.n	8004e4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004de0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dea:	d111      	bne.n	8004e10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df4:	d004      	beq.n	8004e00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dfe:	d107      	bne.n	8004e10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e18:	d10f      	bne.n	8004e3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e017      	b.n	8004e7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4013      	ands	r3, r2
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	bf0c      	ite	eq
 8004e6e:	2301      	moveq	r3, #1
 8004e70:	2300      	movne	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d19b      	bne.n	8004db4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20000004 	.word	0x20000004

08004e8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ea0:	d111      	bne.n	8004ec6 <SPI_EndRxTransaction+0x3a>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eaa:	d004      	beq.n	8004eb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb4:	d107      	bne.n	8004ec6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ece:	d117      	bne.n	8004f00 <SPI_EndRxTransaction+0x74>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed8:	d112      	bne.n	8004f00 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f7ff ff49 	bl	8004d7c <SPI_WaitFlagStateUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01a      	beq.n	8004f26 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef4:	f043 0220 	orr.w	r2, r3, #32
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e013      	b.n	8004f28 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2200      	movs	r2, #0
 8004f08:	2180      	movs	r1, #128	; 0x80
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f7ff ff36 	bl	8004d7c <SPI_WaitFlagStateUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d007      	beq.n	8004f26 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	f043 0220 	orr.w	r2, r3, #32
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e000      	b.n	8004f28 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2200      	movs	r2, #0
 8004f44:	2180      	movs	r1, #128	; 0x80
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f7ff ff18 	bl	8004d7c <SPI_WaitFlagStateUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d007      	beq.n	8004f62 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f56:	f043 0220 	orr.w	r2, r3, #32
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e000      	b.n	8004f64 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <__errno>:
 8004f6c:	4b01      	ldr	r3, [pc, #4]	; (8004f74 <__errno+0x8>)
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	2000003c 	.word	0x2000003c

08004f78 <__libc_init_array>:
 8004f78:	b570      	push	{r4, r5, r6, lr}
 8004f7a:	2600      	movs	r6, #0
 8004f7c:	4d0c      	ldr	r5, [pc, #48]	; (8004fb0 <__libc_init_array+0x38>)
 8004f7e:	4c0d      	ldr	r4, [pc, #52]	; (8004fb4 <__libc_init_array+0x3c>)
 8004f80:	1b64      	subs	r4, r4, r5
 8004f82:	10a4      	asrs	r4, r4, #2
 8004f84:	42a6      	cmp	r6, r4
 8004f86:	d109      	bne.n	8004f9c <__libc_init_array+0x24>
 8004f88:	f003 f960 	bl	800824c <_init>
 8004f8c:	2600      	movs	r6, #0
 8004f8e:	4d0a      	ldr	r5, [pc, #40]	; (8004fb8 <__libc_init_array+0x40>)
 8004f90:	4c0a      	ldr	r4, [pc, #40]	; (8004fbc <__libc_init_array+0x44>)
 8004f92:	1b64      	subs	r4, r4, r5
 8004f94:	10a4      	asrs	r4, r4, #2
 8004f96:	42a6      	cmp	r6, r4
 8004f98:	d105      	bne.n	8004fa6 <__libc_init_array+0x2e>
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
 8004f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa0:	4798      	blx	r3
 8004fa2:	3601      	adds	r6, #1
 8004fa4:	e7ee      	b.n	8004f84 <__libc_init_array+0xc>
 8004fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004faa:	4798      	blx	r3
 8004fac:	3601      	adds	r6, #1
 8004fae:	e7f2      	b.n	8004f96 <__libc_init_array+0x1e>
 8004fb0:	080086f0 	.word	0x080086f0
 8004fb4:	080086f0 	.word	0x080086f0
 8004fb8:	080086f0 	.word	0x080086f0
 8004fbc:	080086f4 	.word	0x080086f4

08004fc0 <memset>:
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	4402      	add	r2, r0
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d100      	bne.n	8004fca <memset+0xa>
 8004fc8:	4770      	bx	lr
 8004fca:	f803 1b01 	strb.w	r1, [r3], #1
 8004fce:	e7f9      	b.n	8004fc4 <memset+0x4>

08004fd0 <__cvt>:
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd6:	461f      	mov	r7, r3
 8004fd8:	bfbb      	ittet	lt
 8004fda:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004fde:	461f      	movlt	r7, r3
 8004fe0:	2300      	movge	r3, #0
 8004fe2:	232d      	movlt	r3, #45	; 0x2d
 8004fe4:	b088      	sub	sp, #32
 8004fe6:	4614      	mov	r4, r2
 8004fe8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004fea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004fec:	7013      	strb	r3, [r2, #0]
 8004fee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ff0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004ff4:	f023 0820 	bic.w	r8, r3, #32
 8004ff8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ffc:	d005      	beq.n	800500a <__cvt+0x3a>
 8004ffe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005002:	d100      	bne.n	8005006 <__cvt+0x36>
 8005004:	3501      	adds	r5, #1
 8005006:	2302      	movs	r3, #2
 8005008:	e000      	b.n	800500c <__cvt+0x3c>
 800500a:	2303      	movs	r3, #3
 800500c:	aa07      	add	r2, sp, #28
 800500e:	9204      	str	r2, [sp, #16]
 8005010:	aa06      	add	r2, sp, #24
 8005012:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005016:	e9cd 3500 	strd	r3, r5, [sp]
 800501a:	4622      	mov	r2, r4
 800501c:	463b      	mov	r3, r7
 800501e:	f000 fce3 	bl	80059e8 <_dtoa_r>
 8005022:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005026:	4606      	mov	r6, r0
 8005028:	d102      	bne.n	8005030 <__cvt+0x60>
 800502a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800502c:	07db      	lsls	r3, r3, #31
 800502e:	d522      	bpl.n	8005076 <__cvt+0xa6>
 8005030:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005034:	eb06 0905 	add.w	r9, r6, r5
 8005038:	d110      	bne.n	800505c <__cvt+0x8c>
 800503a:	7833      	ldrb	r3, [r6, #0]
 800503c:	2b30      	cmp	r3, #48	; 0x30
 800503e:	d10a      	bne.n	8005056 <__cvt+0x86>
 8005040:	2200      	movs	r2, #0
 8005042:	2300      	movs	r3, #0
 8005044:	4620      	mov	r0, r4
 8005046:	4639      	mov	r1, r7
 8005048:	f7fb fcae 	bl	80009a8 <__aeabi_dcmpeq>
 800504c:	b918      	cbnz	r0, 8005056 <__cvt+0x86>
 800504e:	f1c5 0501 	rsb	r5, r5, #1
 8005052:	f8ca 5000 	str.w	r5, [sl]
 8005056:	f8da 3000 	ldr.w	r3, [sl]
 800505a:	4499      	add	r9, r3
 800505c:	2200      	movs	r2, #0
 800505e:	2300      	movs	r3, #0
 8005060:	4620      	mov	r0, r4
 8005062:	4639      	mov	r1, r7
 8005064:	f7fb fca0 	bl	80009a8 <__aeabi_dcmpeq>
 8005068:	b108      	cbz	r0, 800506e <__cvt+0x9e>
 800506a:	f8cd 901c 	str.w	r9, [sp, #28]
 800506e:	2230      	movs	r2, #48	; 0x30
 8005070:	9b07      	ldr	r3, [sp, #28]
 8005072:	454b      	cmp	r3, r9
 8005074:	d307      	bcc.n	8005086 <__cvt+0xb6>
 8005076:	4630      	mov	r0, r6
 8005078:	9b07      	ldr	r3, [sp, #28]
 800507a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800507c:	1b9b      	subs	r3, r3, r6
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	b008      	add	sp, #32
 8005082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005086:	1c59      	adds	r1, r3, #1
 8005088:	9107      	str	r1, [sp, #28]
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	e7f0      	b.n	8005070 <__cvt+0xa0>

0800508e <__exponent>:
 800508e:	4603      	mov	r3, r0
 8005090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005092:	2900      	cmp	r1, #0
 8005094:	f803 2b02 	strb.w	r2, [r3], #2
 8005098:	bfb6      	itet	lt
 800509a:	222d      	movlt	r2, #45	; 0x2d
 800509c:	222b      	movge	r2, #43	; 0x2b
 800509e:	4249      	neglt	r1, r1
 80050a0:	2909      	cmp	r1, #9
 80050a2:	7042      	strb	r2, [r0, #1]
 80050a4:	dd2b      	ble.n	80050fe <__exponent+0x70>
 80050a6:	f10d 0407 	add.w	r4, sp, #7
 80050aa:	46a4      	mov	ip, r4
 80050ac:	270a      	movs	r7, #10
 80050ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80050b2:	460a      	mov	r2, r1
 80050b4:	46a6      	mov	lr, r4
 80050b6:	fb07 1516 	mls	r5, r7, r6, r1
 80050ba:	2a63      	cmp	r2, #99	; 0x63
 80050bc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80050c0:	4631      	mov	r1, r6
 80050c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80050c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80050ca:	dcf0      	bgt.n	80050ae <__exponent+0x20>
 80050cc:	3130      	adds	r1, #48	; 0x30
 80050ce:	f1ae 0502 	sub.w	r5, lr, #2
 80050d2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80050d6:	4629      	mov	r1, r5
 80050d8:	1c44      	adds	r4, r0, #1
 80050da:	4561      	cmp	r1, ip
 80050dc:	d30a      	bcc.n	80050f4 <__exponent+0x66>
 80050de:	f10d 0209 	add.w	r2, sp, #9
 80050e2:	eba2 020e 	sub.w	r2, r2, lr
 80050e6:	4565      	cmp	r5, ip
 80050e8:	bf88      	it	hi
 80050ea:	2200      	movhi	r2, #0
 80050ec:	4413      	add	r3, r2
 80050ee:	1a18      	subs	r0, r3, r0
 80050f0:	b003      	add	sp, #12
 80050f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050f8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80050fc:	e7ed      	b.n	80050da <__exponent+0x4c>
 80050fe:	2330      	movs	r3, #48	; 0x30
 8005100:	3130      	adds	r1, #48	; 0x30
 8005102:	7083      	strb	r3, [r0, #2]
 8005104:	70c1      	strb	r1, [r0, #3]
 8005106:	1d03      	adds	r3, r0, #4
 8005108:	e7f1      	b.n	80050ee <__exponent+0x60>
	...

0800510c <_printf_float>:
 800510c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005110:	b091      	sub	sp, #68	; 0x44
 8005112:	460c      	mov	r4, r1
 8005114:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005118:	4616      	mov	r6, r2
 800511a:	461f      	mov	r7, r3
 800511c:	4605      	mov	r5, r0
 800511e:	f001 fa51 	bl	80065c4 <_localeconv_r>
 8005122:	6803      	ldr	r3, [r0, #0]
 8005124:	4618      	mov	r0, r3
 8005126:	9309      	str	r3, [sp, #36]	; 0x24
 8005128:	f7fb f812 	bl	8000150 <strlen>
 800512c:	2300      	movs	r3, #0
 800512e:	930e      	str	r3, [sp, #56]	; 0x38
 8005130:	f8d8 3000 	ldr.w	r3, [r8]
 8005134:	900a      	str	r0, [sp, #40]	; 0x28
 8005136:	3307      	adds	r3, #7
 8005138:	f023 0307 	bic.w	r3, r3, #7
 800513c:	f103 0208 	add.w	r2, r3, #8
 8005140:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005144:	f8d4 b000 	ldr.w	fp, [r4]
 8005148:	f8c8 2000 	str.w	r2, [r8]
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005154:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005158:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800515c:	930b      	str	r3, [sp, #44]	; 0x2c
 800515e:	f04f 32ff 	mov.w	r2, #4294967295
 8005162:	4640      	mov	r0, r8
 8005164:	4b9c      	ldr	r3, [pc, #624]	; (80053d8 <_printf_float+0x2cc>)
 8005166:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005168:	f7fb fc50 	bl	8000a0c <__aeabi_dcmpun>
 800516c:	bb70      	cbnz	r0, 80051cc <_printf_float+0xc0>
 800516e:	f04f 32ff 	mov.w	r2, #4294967295
 8005172:	4640      	mov	r0, r8
 8005174:	4b98      	ldr	r3, [pc, #608]	; (80053d8 <_printf_float+0x2cc>)
 8005176:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005178:	f7fb fc2a 	bl	80009d0 <__aeabi_dcmple>
 800517c:	bb30      	cbnz	r0, 80051cc <_printf_float+0xc0>
 800517e:	2200      	movs	r2, #0
 8005180:	2300      	movs	r3, #0
 8005182:	4640      	mov	r0, r8
 8005184:	4651      	mov	r1, sl
 8005186:	f7fb fc19 	bl	80009bc <__aeabi_dcmplt>
 800518a:	b110      	cbz	r0, 8005192 <_printf_float+0x86>
 800518c:	232d      	movs	r3, #45	; 0x2d
 800518e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005192:	4b92      	ldr	r3, [pc, #584]	; (80053dc <_printf_float+0x2d0>)
 8005194:	4892      	ldr	r0, [pc, #584]	; (80053e0 <_printf_float+0x2d4>)
 8005196:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800519a:	bf94      	ite	ls
 800519c:	4698      	movls	r8, r3
 800519e:	4680      	movhi	r8, r0
 80051a0:	2303      	movs	r3, #3
 80051a2:	f04f 0a00 	mov.w	sl, #0
 80051a6:	6123      	str	r3, [r4, #16]
 80051a8:	f02b 0304 	bic.w	r3, fp, #4
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	4633      	mov	r3, r6
 80051b0:	4621      	mov	r1, r4
 80051b2:	4628      	mov	r0, r5
 80051b4:	9700      	str	r7, [sp, #0]
 80051b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80051b8:	f000 f9d4 	bl	8005564 <_printf_common>
 80051bc:	3001      	adds	r0, #1
 80051be:	f040 8090 	bne.w	80052e2 <_printf_float+0x1d6>
 80051c2:	f04f 30ff 	mov.w	r0, #4294967295
 80051c6:	b011      	add	sp, #68	; 0x44
 80051c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051cc:	4642      	mov	r2, r8
 80051ce:	4653      	mov	r3, sl
 80051d0:	4640      	mov	r0, r8
 80051d2:	4651      	mov	r1, sl
 80051d4:	f7fb fc1a 	bl	8000a0c <__aeabi_dcmpun>
 80051d8:	b148      	cbz	r0, 80051ee <_printf_float+0xe2>
 80051da:	f1ba 0f00 	cmp.w	sl, #0
 80051de:	bfb8      	it	lt
 80051e0:	232d      	movlt	r3, #45	; 0x2d
 80051e2:	4880      	ldr	r0, [pc, #512]	; (80053e4 <_printf_float+0x2d8>)
 80051e4:	bfb8      	it	lt
 80051e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80051ea:	4b7f      	ldr	r3, [pc, #508]	; (80053e8 <_printf_float+0x2dc>)
 80051ec:	e7d3      	b.n	8005196 <_printf_float+0x8a>
 80051ee:	6863      	ldr	r3, [r4, #4]
 80051f0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	d142      	bne.n	800527e <_printf_float+0x172>
 80051f8:	2306      	movs	r3, #6
 80051fa:	6063      	str	r3, [r4, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	9206      	str	r2, [sp, #24]
 8005200:	aa0e      	add	r2, sp, #56	; 0x38
 8005202:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005206:	aa0d      	add	r2, sp, #52	; 0x34
 8005208:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800520c:	9203      	str	r2, [sp, #12]
 800520e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005212:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005216:	6023      	str	r3, [r4, #0]
 8005218:	6863      	ldr	r3, [r4, #4]
 800521a:	4642      	mov	r2, r8
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	4628      	mov	r0, r5
 8005220:	4653      	mov	r3, sl
 8005222:	910b      	str	r1, [sp, #44]	; 0x2c
 8005224:	f7ff fed4 	bl	8004fd0 <__cvt>
 8005228:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800522a:	4680      	mov	r8, r0
 800522c:	2947      	cmp	r1, #71	; 0x47
 800522e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005230:	d108      	bne.n	8005244 <_printf_float+0x138>
 8005232:	1cc8      	adds	r0, r1, #3
 8005234:	db02      	blt.n	800523c <_printf_float+0x130>
 8005236:	6863      	ldr	r3, [r4, #4]
 8005238:	4299      	cmp	r1, r3
 800523a:	dd40      	ble.n	80052be <_printf_float+0x1b2>
 800523c:	f1a9 0902 	sub.w	r9, r9, #2
 8005240:	fa5f f989 	uxtb.w	r9, r9
 8005244:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005248:	d81f      	bhi.n	800528a <_printf_float+0x17e>
 800524a:	464a      	mov	r2, r9
 800524c:	3901      	subs	r1, #1
 800524e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005252:	910d      	str	r1, [sp, #52]	; 0x34
 8005254:	f7ff ff1b 	bl	800508e <__exponent>
 8005258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800525a:	4682      	mov	sl, r0
 800525c:	1813      	adds	r3, r2, r0
 800525e:	2a01      	cmp	r2, #1
 8005260:	6123      	str	r3, [r4, #16]
 8005262:	dc02      	bgt.n	800526a <_printf_float+0x15e>
 8005264:	6822      	ldr	r2, [r4, #0]
 8005266:	07d2      	lsls	r2, r2, #31
 8005268:	d501      	bpl.n	800526e <_printf_float+0x162>
 800526a:	3301      	adds	r3, #1
 800526c:	6123      	str	r3, [r4, #16]
 800526e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005272:	2b00      	cmp	r3, #0
 8005274:	d09b      	beq.n	80051ae <_printf_float+0xa2>
 8005276:	232d      	movs	r3, #45	; 0x2d
 8005278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800527c:	e797      	b.n	80051ae <_printf_float+0xa2>
 800527e:	2947      	cmp	r1, #71	; 0x47
 8005280:	d1bc      	bne.n	80051fc <_printf_float+0xf0>
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1ba      	bne.n	80051fc <_printf_float+0xf0>
 8005286:	2301      	movs	r3, #1
 8005288:	e7b7      	b.n	80051fa <_printf_float+0xee>
 800528a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800528e:	d118      	bne.n	80052c2 <_printf_float+0x1b6>
 8005290:	2900      	cmp	r1, #0
 8005292:	6863      	ldr	r3, [r4, #4]
 8005294:	dd0b      	ble.n	80052ae <_printf_float+0x1a2>
 8005296:	6121      	str	r1, [r4, #16]
 8005298:	b913      	cbnz	r3, 80052a0 <_printf_float+0x194>
 800529a:	6822      	ldr	r2, [r4, #0]
 800529c:	07d0      	lsls	r0, r2, #31
 800529e:	d502      	bpl.n	80052a6 <_printf_float+0x19a>
 80052a0:	3301      	adds	r3, #1
 80052a2:	440b      	add	r3, r1
 80052a4:	6123      	str	r3, [r4, #16]
 80052a6:	f04f 0a00 	mov.w	sl, #0
 80052aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80052ac:	e7df      	b.n	800526e <_printf_float+0x162>
 80052ae:	b913      	cbnz	r3, 80052b6 <_printf_float+0x1aa>
 80052b0:	6822      	ldr	r2, [r4, #0]
 80052b2:	07d2      	lsls	r2, r2, #31
 80052b4:	d501      	bpl.n	80052ba <_printf_float+0x1ae>
 80052b6:	3302      	adds	r3, #2
 80052b8:	e7f4      	b.n	80052a4 <_printf_float+0x198>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e7f2      	b.n	80052a4 <_printf_float+0x198>
 80052be:	f04f 0967 	mov.w	r9, #103	; 0x67
 80052c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052c4:	4299      	cmp	r1, r3
 80052c6:	db05      	blt.n	80052d4 <_printf_float+0x1c8>
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	6121      	str	r1, [r4, #16]
 80052cc:	07d8      	lsls	r0, r3, #31
 80052ce:	d5ea      	bpl.n	80052a6 <_printf_float+0x19a>
 80052d0:	1c4b      	adds	r3, r1, #1
 80052d2:	e7e7      	b.n	80052a4 <_printf_float+0x198>
 80052d4:	2900      	cmp	r1, #0
 80052d6:	bfcc      	ite	gt
 80052d8:	2201      	movgt	r2, #1
 80052da:	f1c1 0202 	rsble	r2, r1, #2
 80052de:	4413      	add	r3, r2
 80052e0:	e7e0      	b.n	80052a4 <_printf_float+0x198>
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	055a      	lsls	r2, r3, #21
 80052e6:	d407      	bmi.n	80052f8 <_printf_float+0x1ec>
 80052e8:	6923      	ldr	r3, [r4, #16]
 80052ea:	4642      	mov	r2, r8
 80052ec:	4631      	mov	r1, r6
 80052ee:	4628      	mov	r0, r5
 80052f0:	47b8      	blx	r7
 80052f2:	3001      	adds	r0, #1
 80052f4:	d12b      	bne.n	800534e <_printf_float+0x242>
 80052f6:	e764      	b.n	80051c2 <_printf_float+0xb6>
 80052f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80052fc:	f240 80dd 	bls.w	80054ba <_printf_float+0x3ae>
 8005300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005304:	2200      	movs	r2, #0
 8005306:	2300      	movs	r3, #0
 8005308:	f7fb fb4e 	bl	80009a8 <__aeabi_dcmpeq>
 800530c:	2800      	cmp	r0, #0
 800530e:	d033      	beq.n	8005378 <_printf_float+0x26c>
 8005310:	2301      	movs	r3, #1
 8005312:	4631      	mov	r1, r6
 8005314:	4628      	mov	r0, r5
 8005316:	4a35      	ldr	r2, [pc, #212]	; (80053ec <_printf_float+0x2e0>)
 8005318:	47b8      	blx	r7
 800531a:	3001      	adds	r0, #1
 800531c:	f43f af51 	beq.w	80051c2 <_printf_float+0xb6>
 8005320:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005324:	429a      	cmp	r2, r3
 8005326:	db02      	blt.n	800532e <_printf_float+0x222>
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	07d8      	lsls	r0, r3, #31
 800532c:	d50f      	bpl.n	800534e <_printf_float+0x242>
 800532e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005332:	4631      	mov	r1, r6
 8005334:	4628      	mov	r0, r5
 8005336:	47b8      	blx	r7
 8005338:	3001      	adds	r0, #1
 800533a:	f43f af42 	beq.w	80051c2 <_printf_float+0xb6>
 800533e:	f04f 0800 	mov.w	r8, #0
 8005342:	f104 091a 	add.w	r9, r4, #26
 8005346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005348:	3b01      	subs	r3, #1
 800534a:	4543      	cmp	r3, r8
 800534c:	dc09      	bgt.n	8005362 <_printf_float+0x256>
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	079b      	lsls	r3, r3, #30
 8005352:	f100 8102 	bmi.w	800555a <_printf_float+0x44e>
 8005356:	68e0      	ldr	r0, [r4, #12]
 8005358:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800535a:	4298      	cmp	r0, r3
 800535c:	bfb8      	it	lt
 800535e:	4618      	movlt	r0, r3
 8005360:	e731      	b.n	80051c6 <_printf_float+0xba>
 8005362:	2301      	movs	r3, #1
 8005364:	464a      	mov	r2, r9
 8005366:	4631      	mov	r1, r6
 8005368:	4628      	mov	r0, r5
 800536a:	47b8      	blx	r7
 800536c:	3001      	adds	r0, #1
 800536e:	f43f af28 	beq.w	80051c2 <_printf_float+0xb6>
 8005372:	f108 0801 	add.w	r8, r8, #1
 8005376:	e7e6      	b.n	8005346 <_printf_float+0x23a>
 8005378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800537a:	2b00      	cmp	r3, #0
 800537c:	dc38      	bgt.n	80053f0 <_printf_float+0x2e4>
 800537e:	2301      	movs	r3, #1
 8005380:	4631      	mov	r1, r6
 8005382:	4628      	mov	r0, r5
 8005384:	4a19      	ldr	r2, [pc, #100]	; (80053ec <_printf_float+0x2e0>)
 8005386:	47b8      	blx	r7
 8005388:	3001      	adds	r0, #1
 800538a:	f43f af1a 	beq.w	80051c2 <_printf_float+0xb6>
 800538e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005392:	4313      	orrs	r3, r2
 8005394:	d102      	bne.n	800539c <_printf_float+0x290>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	07d9      	lsls	r1, r3, #31
 800539a:	d5d8      	bpl.n	800534e <_printf_float+0x242>
 800539c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053a0:	4631      	mov	r1, r6
 80053a2:	4628      	mov	r0, r5
 80053a4:	47b8      	blx	r7
 80053a6:	3001      	adds	r0, #1
 80053a8:	f43f af0b 	beq.w	80051c2 <_printf_float+0xb6>
 80053ac:	f04f 0900 	mov.w	r9, #0
 80053b0:	f104 0a1a 	add.w	sl, r4, #26
 80053b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053b6:	425b      	negs	r3, r3
 80053b8:	454b      	cmp	r3, r9
 80053ba:	dc01      	bgt.n	80053c0 <_printf_float+0x2b4>
 80053bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053be:	e794      	b.n	80052ea <_printf_float+0x1de>
 80053c0:	2301      	movs	r3, #1
 80053c2:	4652      	mov	r2, sl
 80053c4:	4631      	mov	r1, r6
 80053c6:	4628      	mov	r0, r5
 80053c8:	47b8      	blx	r7
 80053ca:	3001      	adds	r0, #1
 80053cc:	f43f aef9 	beq.w	80051c2 <_printf_float+0xb6>
 80053d0:	f109 0901 	add.w	r9, r9, #1
 80053d4:	e7ee      	b.n	80053b4 <_printf_float+0x2a8>
 80053d6:	bf00      	nop
 80053d8:	7fefffff 	.word	0x7fefffff
 80053dc:	080082a8 	.word	0x080082a8
 80053e0:	080082ac 	.word	0x080082ac
 80053e4:	080082b4 	.word	0x080082b4
 80053e8:	080082b0 	.word	0x080082b0
 80053ec:	080082b8 	.word	0x080082b8
 80053f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053f4:	429a      	cmp	r2, r3
 80053f6:	bfa8      	it	ge
 80053f8:	461a      	movge	r2, r3
 80053fa:	2a00      	cmp	r2, #0
 80053fc:	4691      	mov	r9, r2
 80053fe:	dc37      	bgt.n	8005470 <_printf_float+0x364>
 8005400:	f04f 0b00 	mov.w	fp, #0
 8005404:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005408:	f104 021a 	add.w	r2, r4, #26
 800540c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005410:	ebaa 0309 	sub.w	r3, sl, r9
 8005414:	455b      	cmp	r3, fp
 8005416:	dc33      	bgt.n	8005480 <_printf_float+0x374>
 8005418:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800541c:	429a      	cmp	r2, r3
 800541e:	db3b      	blt.n	8005498 <_printf_float+0x38c>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	07da      	lsls	r2, r3, #31
 8005424:	d438      	bmi.n	8005498 <_printf_float+0x38c>
 8005426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005428:	990d      	ldr	r1, [sp, #52]	; 0x34
 800542a:	eba3 020a 	sub.w	r2, r3, sl
 800542e:	eba3 0901 	sub.w	r9, r3, r1
 8005432:	4591      	cmp	r9, r2
 8005434:	bfa8      	it	ge
 8005436:	4691      	movge	r9, r2
 8005438:	f1b9 0f00 	cmp.w	r9, #0
 800543c:	dc34      	bgt.n	80054a8 <_printf_float+0x39c>
 800543e:	f04f 0800 	mov.w	r8, #0
 8005442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005446:	f104 0a1a 	add.w	sl, r4, #26
 800544a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	eba3 0309 	sub.w	r3, r3, r9
 8005454:	4543      	cmp	r3, r8
 8005456:	f77f af7a 	ble.w	800534e <_printf_float+0x242>
 800545a:	2301      	movs	r3, #1
 800545c:	4652      	mov	r2, sl
 800545e:	4631      	mov	r1, r6
 8005460:	4628      	mov	r0, r5
 8005462:	47b8      	blx	r7
 8005464:	3001      	adds	r0, #1
 8005466:	f43f aeac 	beq.w	80051c2 <_printf_float+0xb6>
 800546a:	f108 0801 	add.w	r8, r8, #1
 800546e:	e7ec      	b.n	800544a <_printf_float+0x33e>
 8005470:	4613      	mov	r3, r2
 8005472:	4631      	mov	r1, r6
 8005474:	4642      	mov	r2, r8
 8005476:	4628      	mov	r0, r5
 8005478:	47b8      	blx	r7
 800547a:	3001      	adds	r0, #1
 800547c:	d1c0      	bne.n	8005400 <_printf_float+0x2f4>
 800547e:	e6a0      	b.n	80051c2 <_printf_float+0xb6>
 8005480:	2301      	movs	r3, #1
 8005482:	4631      	mov	r1, r6
 8005484:	4628      	mov	r0, r5
 8005486:	920b      	str	r2, [sp, #44]	; 0x2c
 8005488:	47b8      	blx	r7
 800548a:	3001      	adds	r0, #1
 800548c:	f43f ae99 	beq.w	80051c2 <_printf_float+0xb6>
 8005490:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005492:	f10b 0b01 	add.w	fp, fp, #1
 8005496:	e7b9      	b.n	800540c <_printf_float+0x300>
 8005498:	4631      	mov	r1, r6
 800549a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800549e:	4628      	mov	r0, r5
 80054a0:	47b8      	blx	r7
 80054a2:	3001      	adds	r0, #1
 80054a4:	d1bf      	bne.n	8005426 <_printf_float+0x31a>
 80054a6:	e68c      	b.n	80051c2 <_printf_float+0xb6>
 80054a8:	464b      	mov	r3, r9
 80054aa:	4631      	mov	r1, r6
 80054ac:	4628      	mov	r0, r5
 80054ae:	eb08 020a 	add.w	r2, r8, sl
 80054b2:	47b8      	blx	r7
 80054b4:	3001      	adds	r0, #1
 80054b6:	d1c2      	bne.n	800543e <_printf_float+0x332>
 80054b8:	e683      	b.n	80051c2 <_printf_float+0xb6>
 80054ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054bc:	2a01      	cmp	r2, #1
 80054be:	dc01      	bgt.n	80054c4 <_printf_float+0x3b8>
 80054c0:	07db      	lsls	r3, r3, #31
 80054c2:	d537      	bpl.n	8005534 <_printf_float+0x428>
 80054c4:	2301      	movs	r3, #1
 80054c6:	4642      	mov	r2, r8
 80054c8:	4631      	mov	r1, r6
 80054ca:	4628      	mov	r0, r5
 80054cc:	47b8      	blx	r7
 80054ce:	3001      	adds	r0, #1
 80054d0:	f43f ae77 	beq.w	80051c2 <_printf_float+0xb6>
 80054d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054d8:	4631      	mov	r1, r6
 80054da:	4628      	mov	r0, r5
 80054dc:	47b8      	blx	r7
 80054de:	3001      	adds	r0, #1
 80054e0:	f43f ae6f 	beq.w	80051c2 <_printf_float+0xb6>
 80054e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054e8:	2200      	movs	r2, #0
 80054ea:	2300      	movs	r3, #0
 80054ec:	f7fb fa5c 	bl	80009a8 <__aeabi_dcmpeq>
 80054f0:	b9d8      	cbnz	r0, 800552a <_printf_float+0x41e>
 80054f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054f4:	f108 0201 	add.w	r2, r8, #1
 80054f8:	3b01      	subs	r3, #1
 80054fa:	4631      	mov	r1, r6
 80054fc:	4628      	mov	r0, r5
 80054fe:	47b8      	blx	r7
 8005500:	3001      	adds	r0, #1
 8005502:	d10e      	bne.n	8005522 <_printf_float+0x416>
 8005504:	e65d      	b.n	80051c2 <_printf_float+0xb6>
 8005506:	2301      	movs	r3, #1
 8005508:	464a      	mov	r2, r9
 800550a:	4631      	mov	r1, r6
 800550c:	4628      	mov	r0, r5
 800550e:	47b8      	blx	r7
 8005510:	3001      	adds	r0, #1
 8005512:	f43f ae56 	beq.w	80051c2 <_printf_float+0xb6>
 8005516:	f108 0801 	add.w	r8, r8, #1
 800551a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800551c:	3b01      	subs	r3, #1
 800551e:	4543      	cmp	r3, r8
 8005520:	dcf1      	bgt.n	8005506 <_printf_float+0x3fa>
 8005522:	4653      	mov	r3, sl
 8005524:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005528:	e6e0      	b.n	80052ec <_printf_float+0x1e0>
 800552a:	f04f 0800 	mov.w	r8, #0
 800552e:	f104 091a 	add.w	r9, r4, #26
 8005532:	e7f2      	b.n	800551a <_printf_float+0x40e>
 8005534:	2301      	movs	r3, #1
 8005536:	4642      	mov	r2, r8
 8005538:	e7df      	b.n	80054fa <_printf_float+0x3ee>
 800553a:	2301      	movs	r3, #1
 800553c:	464a      	mov	r2, r9
 800553e:	4631      	mov	r1, r6
 8005540:	4628      	mov	r0, r5
 8005542:	47b8      	blx	r7
 8005544:	3001      	adds	r0, #1
 8005546:	f43f ae3c 	beq.w	80051c2 <_printf_float+0xb6>
 800554a:	f108 0801 	add.w	r8, r8, #1
 800554e:	68e3      	ldr	r3, [r4, #12]
 8005550:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005552:	1a5b      	subs	r3, r3, r1
 8005554:	4543      	cmp	r3, r8
 8005556:	dcf0      	bgt.n	800553a <_printf_float+0x42e>
 8005558:	e6fd      	b.n	8005356 <_printf_float+0x24a>
 800555a:	f04f 0800 	mov.w	r8, #0
 800555e:	f104 0919 	add.w	r9, r4, #25
 8005562:	e7f4      	b.n	800554e <_printf_float+0x442>

08005564 <_printf_common>:
 8005564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005568:	4616      	mov	r6, r2
 800556a:	4699      	mov	r9, r3
 800556c:	688a      	ldr	r2, [r1, #8]
 800556e:	690b      	ldr	r3, [r1, #16]
 8005570:	4607      	mov	r7, r0
 8005572:	4293      	cmp	r3, r2
 8005574:	bfb8      	it	lt
 8005576:	4613      	movlt	r3, r2
 8005578:	6033      	str	r3, [r6, #0]
 800557a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800557e:	460c      	mov	r4, r1
 8005580:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005584:	b10a      	cbz	r2, 800558a <_printf_common+0x26>
 8005586:	3301      	adds	r3, #1
 8005588:	6033      	str	r3, [r6, #0]
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	0699      	lsls	r1, r3, #26
 800558e:	bf42      	ittt	mi
 8005590:	6833      	ldrmi	r3, [r6, #0]
 8005592:	3302      	addmi	r3, #2
 8005594:	6033      	strmi	r3, [r6, #0]
 8005596:	6825      	ldr	r5, [r4, #0]
 8005598:	f015 0506 	ands.w	r5, r5, #6
 800559c:	d106      	bne.n	80055ac <_printf_common+0x48>
 800559e:	f104 0a19 	add.w	sl, r4, #25
 80055a2:	68e3      	ldr	r3, [r4, #12]
 80055a4:	6832      	ldr	r2, [r6, #0]
 80055a6:	1a9b      	subs	r3, r3, r2
 80055a8:	42ab      	cmp	r3, r5
 80055aa:	dc28      	bgt.n	80055fe <_printf_common+0x9a>
 80055ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055b0:	1e13      	subs	r3, r2, #0
 80055b2:	6822      	ldr	r2, [r4, #0]
 80055b4:	bf18      	it	ne
 80055b6:	2301      	movne	r3, #1
 80055b8:	0692      	lsls	r2, r2, #26
 80055ba:	d42d      	bmi.n	8005618 <_printf_common+0xb4>
 80055bc:	4649      	mov	r1, r9
 80055be:	4638      	mov	r0, r7
 80055c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055c4:	47c0      	blx	r8
 80055c6:	3001      	adds	r0, #1
 80055c8:	d020      	beq.n	800560c <_printf_common+0xa8>
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	68e5      	ldr	r5, [r4, #12]
 80055ce:	f003 0306 	and.w	r3, r3, #6
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	bf18      	it	ne
 80055d6:	2500      	movne	r5, #0
 80055d8:	6832      	ldr	r2, [r6, #0]
 80055da:	f04f 0600 	mov.w	r6, #0
 80055de:	68a3      	ldr	r3, [r4, #8]
 80055e0:	bf08      	it	eq
 80055e2:	1aad      	subeq	r5, r5, r2
 80055e4:	6922      	ldr	r2, [r4, #16]
 80055e6:	bf08      	it	eq
 80055e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055ec:	4293      	cmp	r3, r2
 80055ee:	bfc4      	itt	gt
 80055f0:	1a9b      	subgt	r3, r3, r2
 80055f2:	18ed      	addgt	r5, r5, r3
 80055f4:	341a      	adds	r4, #26
 80055f6:	42b5      	cmp	r5, r6
 80055f8:	d11a      	bne.n	8005630 <_printf_common+0xcc>
 80055fa:	2000      	movs	r0, #0
 80055fc:	e008      	b.n	8005610 <_printf_common+0xac>
 80055fe:	2301      	movs	r3, #1
 8005600:	4652      	mov	r2, sl
 8005602:	4649      	mov	r1, r9
 8005604:	4638      	mov	r0, r7
 8005606:	47c0      	blx	r8
 8005608:	3001      	adds	r0, #1
 800560a:	d103      	bne.n	8005614 <_printf_common+0xb0>
 800560c:	f04f 30ff 	mov.w	r0, #4294967295
 8005610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005614:	3501      	adds	r5, #1
 8005616:	e7c4      	b.n	80055a2 <_printf_common+0x3e>
 8005618:	2030      	movs	r0, #48	; 0x30
 800561a:	18e1      	adds	r1, r4, r3
 800561c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005626:	4422      	add	r2, r4
 8005628:	3302      	adds	r3, #2
 800562a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800562e:	e7c5      	b.n	80055bc <_printf_common+0x58>
 8005630:	2301      	movs	r3, #1
 8005632:	4622      	mov	r2, r4
 8005634:	4649      	mov	r1, r9
 8005636:	4638      	mov	r0, r7
 8005638:	47c0      	blx	r8
 800563a:	3001      	adds	r0, #1
 800563c:	d0e6      	beq.n	800560c <_printf_common+0xa8>
 800563e:	3601      	adds	r6, #1
 8005640:	e7d9      	b.n	80055f6 <_printf_common+0x92>
	...

08005644 <_printf_i>:
 8005644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005648:	7e0f      	ldrb	r7, [r1, #24]
 800564a:	4691      	mov	r9, r2
 800564c:	2f78      	cmp	r7, #120	; 0x78
 800564e:	4680      	mov	r8, r0
 8005650:	460c      	mov	r4, r1
 8005652:	469a      	mov	sl, r3
 8005654:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005656:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800565a:	d807      	bhi.n	800566c <_printf_i+0x28>
 800565c:	2f62      	cmp	r7, #98	; 0x62
 800565e:	d80a      	bhi.n	8005676 <_printf_i+0x32>
 8005660:	2f00      	cmp	r7, #0
 8005662:	f000 80d9 	beq.w	8005818 <_printf_i+0x1d4>
 8005666:	2f58      	cmp	r7, #88	; 0x58
 8005668:	f000 80a4 	beq.w	80057b4 <_printf_i+0x170>
 800566c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005674:	e03a      	b.n	80056ec <_printf_i+0xa8>
 8005676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800567a:	2b15      	cmp	r3, #21
 800567c:	d8f6      	bhi.n	800566c <_printf_i+0x28>
 800567e:	a101      	add	r1, pc, #4	; (adr r1, 8005684 <_printf_i+0x40>)
 8005680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005684:	080056dd 	.word	0x080056dd
 8005688:	080056f1 	.word	0x080056f1
 800568c:	0800566d 	.word	0x0800566d
 8005690:	0800566d 	.word	0x0800566d
 8005694:	0800566d 	.word	0x0800566d
 8005698:	0800566d 	.word	0x0800566d
 800569c:	080056f1 	.word	0x080056f1
 80056a0:	0800566d 	.word	0x0800566d
 80056a4:	0800566d 	.word	0x0800566d
 80056a8:	0800566d 	.word	0x0800566d
 80056ac:	0800566d 	.word	0x0800566d
 80056b0:	080057ff 	.word	0x080057ff
 80056b4:	08005721 	.word	0x08005721
 80056b8:	080057e1 	.word	0x080057e1
 80056bc:	0800566d 	.word	0x0800566d
 80056c0:	0800566d 	.word	0x0800566d
 80056c4:	08005821 	.word	0x08005821
 80056c8:	0800566d 	.word	0x0800566d
 80056cc:	08005721 	.word	0x08005721
 80056d0:	0800566d 	.word	0x0800566d
 80056d4:	0800566d 	.word	0x0800566d
 80056d8:	080057e9 	.word	0x080057e9
 80056dc:	682b      	ldr	r3, [r5, #0]
 80056de:	1d1a      	adds	r2, r3, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	602a      	str	r2, [r5, #0]
 80056e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0a4      	b.n	800583a <_printf_i+0x1f6>
 80056f0:	6820      	ldr	r0, [r4, #0]
 80056f2:	6829      	ldr	r1, [r5, #0]
 80056f4:	0606      	lsls	r6, r0, #24
 80056f6:	f101 0304 	add.w	r3, r1, #4
 80056fa:	d50a      	bpl.n	8005712 <_printf_i+0xce>
 80056fc:	680e      	ldr	r6, [r1, #0]
 80056fe:	602b      	str	r3, [r5, #0]
 8005700:	2e00      	cmp	r6, #0
 8005702:	da03      	bge.n	800570c <_printf_i+0xc8>
 8005704:	232d      	movs	r3, #45	; 0x2d
 8005706:	4276      	negs	r6, r6
 8005708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800570c:	230a      	movs	r3, #10
 800570e:	485e      	ldr	r0, [pc, #376]	; (8005888 <_printf_i+0x244>)
 8005710:	e019      	b.n	8005746 <_printf_i+0x102>
 8005712:	680e      	ldr	r6, [r1, #0]
 8005714:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005718:	602b      	str	r3, [r5, #0]
 800571a:	bf18      	it	ne
 800571c:	b236      	sxthne	r6, r6
 800571e:	e7ef      	b.n	8005700 <_printf_i+0xbc>
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	6820      	ldr	r0, [r4, #0]
 8005724:	1d19      	adds	r1, r3, #4
 8005726:	6029      	str	r1, [r5, #0]
 8005728:	0601      	lsls	r1, r0, #24
 800572a:	d501      	bpl.n	8005730 <_printf_i+0xec>
 800572c:	681e      	ldr	r6, [r3, #0]
 800572e:	e002      	b.n	8005736 <_printf_i+0xf2>
 8005730:	0646      	lsls	r6, r0, #25
 8005732:	d5fb      	bpl.n	800572c <_printf_i+0xe8>
 8005734:	881e      	ldrh	r6, [r3, #0]
 8005736:	2f6f      	cmp	r7, #111	; 0x6f
 8005738:	bf0c      	ite	eq
 800573a:	2308      	moveq	r3, #8
 800573c:	230a      	movne	r3, #10
 800573e:	4852      	ldr	r0, [pc, #328]	; (8005888 <_printf_i+0x244>)
 8005740:	2100      	movs	r1, #0
 8005742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005746:	6865      	ldr	r5, [r4, #4]
 8005748:	2d00      	cmp	r5, #0
 800574a:	bfa8      	it	ge
 800574c:	6821      	ldrge	r1, [r4, #0]
 800574e:	60a5      	str	r5, [r4, #8]
 8005750:	bfa4      	itt	ge
 8005752:	f021 0104 	bicge.w	r1, r1, #4
 8005756:	6021      	strge	r1, [r4, #0]
 8005758:	b90e      	cbnz	r6, 800575e <_printf_i+0x11a>
 800575a:	2d00      	cmp	r5, #0
 800575c:	d04d      	beq.n	80057fa <_printf_i+0x1b6>
 800575e:	4615      	mov	r5, r2
 8005760:	fbb6 f1f3 	udiv	r1, r6, r3
 8005764:	fb03 6711 	mls	r7, r3, r1, r6
 8005768:	5dc7      	ldrb	r7, [r0, r7]
 800576a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800576e:	4637      	mov	r7, r6
 8005770:	42bb      	cmp	r3, r7
 8005772:	460e      	mov	r6, r1
 8005774:	d9f4      	bls.n	8005760 <_printf_i+0x11c>
 8005776:	2b08      	cmp	r3, #8
 8005778:	d10b      	bne.n	8005792 <_printf_i+0x14e>
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	07de      	lsls	r6, r3, #31
 800577e:	d508      	bpl.n	8005792 <_printf_i+0x14e>
 8005780:	6923      	ldr	r3, [r4, #16]
 8005782:	6861      	ldr	r1, [r4, #4]
 8005784:	4299      	cmp	r1, r3
 8005786:	bfde      	ittt	le
 8005788:	2330      	movle	r3, #48	; 0x30
 800578a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800578e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005792:	1b52      	subs	r2, r2, r5
 8005794:	6122      	str	r2, [r4, #16]
 8005796:	464b      	mov	r3, r9
 8005798:	4621      	mov	r1, r4
 800579a:	4640      	mov	r0, r8
 800579c:	f8cd a000 	str.w	sl, [sp]
 80057a0:	aa03      	add	r2, sp, #12
 80057a2:	f7ff fedf 	bl	8005564 <_printf_common>
 80057a6:	3001      	adds	r0, #1
 80057a8:	d14c      	bne.n	8005844 <_printf_i+0x200>
 80057aa:	f04f 30ff 	mov.w	r0, #4294967295
 80057ae:	b004      	add	sp, #16
 80057b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b4:	4834      	ldr	r0, [pc, #208]	; (8005888 <_printf_i+0x244>)
 80057b6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80057ba:	6829      	ldr	r1, [r5, #0]
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	f851 6b04 	ldr.w	r6, [r1], #4
 80057c2:	6029      	str	r1, [r5, #0]
 80057c4:	061d      	lsls	r5, r3, #24
 80057c6:	d514      	bpl.n	80057f2 <_printf_i+0x1ae>
 80057c8:	07df      	lsls	r7, r3, #31
 80057ca:	bf44      	itt	mi
 80057cc:	f043 0320 	orrmi.w	r3, r3, #32
 80057d0:	6023      	strmi	r3, [r4, #0]
 80057d2:	b91e      	cbnz	r6, 80057dc <_printf_i+0x198>
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	f023 0320 	bic.w	r3, r3, #32
 80057da:	6023      	str	r3, [r4, #0]
 80057dc:	2310      	movs	r3, #16
 80057de:	e7af      	b.n	8005740 <_printf_i+0xfc>
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	f043 0320 	orr.w	r3, r3, #32
 80057e6:	6023      	str	r3, [r4, #0]
 80057e8:	2378      	movs	r3, #120	; 0x78
 80057ea:	4828      	ldr	r0, [pc, #160]	; (800588c <_printf_i+0x248>)
 80057ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057f0:	e7e3      	b.n	80057ba <_printf_i+0x176>
 80057f2:	0659      	lsls	r1, r3, #25
 80057f4:	bf48      	it	mi
 80057f6:	b2b6      	uxthmi	r6, r6
 80057f8:	e7e6      	b.n	80057c8 <_printf_i+0x184>
 80057fa:	4615      	mov	r5, r2
 80057fc:	e7bb      	b.n	8005776 <_printf_i+0x132>
 80057fe:	682b      	ldr	r3, [r5, #0]
 8005800:	6826      	ldr	r6, [r4, #0]
 8005802:	1d18      	adds	r0, r3, #4
 8005804:	6961      	ldr	r1, [r4, #20]
 8005806:	6028      	str	r0, [r5, #0]
 8005808:	0635      	lsls	r5, r6, #24
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	d501      	bpl.n	8005812 <_printf_i+0x1ce>
 800580e:	6019      	str	r1, [r3, #0]
 8005810:	e002      	b.n	8005818 <_printf_i+0x1d4>
 8005812:	0670      	lsls	r0, r6, #25
 8005814:	d5fb      	bpl.n	800580e <_printf_i+0x1ca>
 8005816:	8019      	strh	r1, [r3, #0]
 8005818:	2300      	movs	r3, #0
 800581a:	4615      	mov	r5, r2
 800581c:	6123      	str	r3, [r4, #16]
 800581e:	e7ba      	b.n	8005796 <_printf_i+0x152>
 8005820:	682b      	ldr	r3, [r5, #0]
 8005822:	2100      	movs	r1, #0
 8005824:	1d1a      	adds	r2, r3, #4
 8005826:	602a      	str	r2, [r5, #0]
 8005828:	681d      	ldr	r5, [r3, #0]
 800582a:	6862      	ldr	r2, [r4, #4]
 800582c:	4628      	mov	r0, r5
 800582e:	f000 fed5 	bl	80065dc <memchr>
 8005832:	b108      	cbz	r0, 8005838 <_printf_i+0x1f4>
 8005834:	1b40      	subs	r0, r0, r5
 8005836:	6060      	str	r0, [r4, #4]
 8005838:	6863      	ldr	r3, [r4, #4]
 800583a:	6123      	str	r3, [r4, #16]
 800583c:	2300      	movs	r3, #0
 800583e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005842:	e7a8      	b.n	8005796 <_printf_i+0x152>
 8005844:	462a      	mov	r2, r5
 8005846:	4649      	mov	r1, r9
 8005848:	4640      	mov	r0, r8
 800584a:	6923      	ldr	r3, [r4, #16]
 800584c:	47d0      	blx	sl
 800584e:	3001      	adds	r0, #1
 8005850:	d0ab      	beq.n	80057aa <_printf_i+0x166>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	079b      	lsls	r3, r3, #30
 8005856:	d413      	bmi.n	8005880 <_printf_i+0x23c>
 8005858:	68e0      	ldr	r0, [r4, #12]
 800585a:	9b03      	ldr	r3, [sp, #12]
 800585c:	4298      	cmp	r0, r3
 800585e:	bfb8      	it	lt
 8005860:	4618      	movlt	r0, r3
 8005862:	e7a4      	b.n	80057ae <_printf_i+0x16a>
 8005864:	2301      	movs	r3, #1
 8005866:	4632      	mov	r2, r6
 8005868:	4649      	mov	r1, r9
 800586a:	4640      	mov	r0, r8
 800586c:	47d0      	blx	sl
 800586e:	3001      	adds	r0, #1
 8005870:	d09b      	beq.n	80057aa <_printf_i+0x166>
 8005872:	3501      	adds	r5, #1
 8005874:	68e3      	ldr	r3, [r4, #12]
 8005876:	9903      	ldr	r1, [sp, #12]
 8005878:	1a5b      	subs	r3, r3, r1
 800587a:	42ab      	cmp	r3, r5
 800587c:	dcf2      	bgt.n	8005864 <_printf_i+0x220>
 800587e:	e7eb      	b.n	8005858 <_printf_i+0x214>
 8005880:	2500      	movs	r5, #0
 8005882:	f104 0619 	add.w	r6, r4, #25
 8005886:	e7f5      	b.n	8005874 <_printf_i+0x230>
 8005888:	080082ba 	.word	0x080082ba
 800588c:	080082cb 	.word	0x080082cb

08005890 <siprintf>:
 8005890:	b40e      	push	{r1, r2, r3}
 8005892:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005896:	b500      	push	{lr}
 8005898:	b09c      	sub	sp, #112	; 0x70
 800589a:	ab1d      	add	r3, sp, #116	; 0x74
 800589c:	9002      	str	r0, [sp, #8]
 800589e:	9006      	str	r0, [sp, #24]
 80058a0:	9107      	str	r1, [sp, #28]
 80058a2:	9104      	str	r1, [sp, #16]
 80058a4:	4808      	ldr	r0, [pc, #32]	; (80058c8 <siprintf+0x38>)
 80058a6:	4909      	ldr	r1, [pc, #36]	; (80058cc <siprintf+0x3c>)
 80058a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ac:	9105      	str	r1, [sp, #20]
 80058ae:	6800      	ldr	r0, [r0, #0]
 80058b0:	a902      	add	r1, sp, #8
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	f001 fb7c 	bl	8006fb0 <_svfiprintf_r>
 80058b8:	2200      	movs	r2, #0
 80058ba:	9b02      	ldr	r3, [sp, #8]
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	b01c      	add	sp, #112	; 0x70
 80058c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80058c4:	b003      	add	sp, #12
 80058c6:	4770      	bx	lr
 80058c8:	2000003c 	.word	0x2000003c
 80058cc:	ffff0208 	.word	0xffff0208

080058d0 <quorem>:
 80058d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d4:	6903      	ldr	r3, [r0, #16]
 80058d6:	690c      	ldr	r4, [r1, #16]
 80058d8:	4607      	mov	r7, r0
 80058da:	42a3      	cmp	r3, r4
 80058dc:	f2c0 8082 	blt.w	80059e4 <quorem+0x114>
 80058e0:	3c01      	subs	r4, #1
 80058e2:	f100 0514 	add.w	r5, r0, #20
 80058e6:	f101 0814 	add.w	r8, r1, #20
 80058ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058ee:	9301      	str	r3, [sp, #4]
 80058f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80058f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058f8:	3301      	adds	r3, #1
 80058fa:	429a      	cmp	r2, r3
 80058fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005900:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005904:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005908:	d331      	bcc.n	800596e <quorem+0x9e>
 800590a:	f04f 0e00 	mov.w	lr, #0
 800590e:	4640      	mov	r0, r8
 8005910:	46ac      	mov	ip, r5
 8005912:	46f2      	mov	sl, lr
 8005914:	f850 2b04 	ldr.w	r2, [r0], #4
 8005918:	b293      	uxth	r3, r2
 800591a:	fb06 e303 	mla	r3, r6, r3, lr
 800591e:	0c12      	lsrs	r2, r2, #16
 8005920:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005924:	b29b      	uxth	r3, r3
 8005926:	fb06 e202 	mla	r2, r6, r2, lr
 800592a:	ebaa 0303 	sub.w	r3, sl, r3
 800592e:	f8dc a000 	ldr.w	sl, [ip]
 8005932:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005936:	fa1f fa8a 	uxth.w	sl, sl
 800593a:	4453      	add	r3, sl
 800593c:	f8dc a000 	ldr.w	sl, [ip]
 8005940:	b292      	uxth	r2, r2
 8005942:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005946:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800594a:	b29b      	uxth	r3, r3
 800594c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005950:	4581      	cmp	r9, r0
 8005952:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005956:	f84c 3b04 	str.w	r3, [ip], #4
 800595a:	d2db      	bcs.n	8005914 <quorem+0x44>
 800595c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005960:	b92b      	cbnz	r3, 800596e <quorem+0x9e>
 8005962:	9b01      	ldr	r3, [sp, #4]
 8005964:	3b04      	subs	r3, #4
 8005966:	429d      	cmp	r5, r3
 8005968:	461a      	mov	r2, r3
 800596a:	d32f      	bcc.n	80059cc <quorem+0xfc>
 800596c:	613c      	str	r4, [r7, #16]
 800596e:	4638      	mov	r0, r7
 8005970:	f001 f8ce 	bl	8006b10 <__mcmp>
 8005974:	2800      	cmp	r0, #0
 8005976:	db25      	blt.n	80059c4 <quorem+0xf4>
 8005978:	4628      	mov	r0, r5
 800597a:	f04f 0c00 	mov.w	ip, #0
 800597e:	3601      	adds	r6, #1
 8005980:	f858 1b04 	ldr.w	r1, [r8], #4
 8005984:	f8d0 e000 	ldr.w	lr, [r0]
 8005988:	b28b      	uxth	r3, r1
 800598a:	ebac 0303 	sub.w	r3, ip, r3
 800598e:	fa1f f28e 	uxth.w	r2, lr
 8005992:	4413      	add	r3, r2
 8005994:	0c0a      	lsrs	r2, r1, #16
 8005996:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800599a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800599e:	b29b      	uxth	r3, r3
 80059a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059a4:	45c1      	cmp	r9, r8
 80059a6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80059aa:	f840 3b04 	str.w	r3, [r0], #4
 80059ae:	d2e7      	bcs.n	8005980 <quorem+0xb0>
 80059b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059b8:	b922      	cbnz	r2, 80059c4 <quorem+0xf4>
 80059ba:	3b04      	subs	r3, #4
 80059bc:	429d      	cmp	r5, r3
 80059be:	461a      	mov	r2, r3
 80059c0:	d30a      	bcc.n	80059d8 <quorem+0x108>
 80059c2:	613c      	str	r4, [r7, #16]
 80059c4:	4630      	mov	r0, r6
 80059c6:	b003      	add	sp, #12
 80059c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	3b04      	subs	r3, #4
 80059d0:	2a00      	cmp	r2, #0
 80059d2:	d1cb      	bne.n	800596c <quorem+0x9c>
 80059d4:	3c01      	subs	r4, #1
 80059d6:	e7c6      	b.n	8005966 <quorem+0x96>
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	3b04      	subs	r3, #4
 80059dc:	2a00      	cmp	r2, #0
 80059de:	d1f0      	bne.n	80059c2 <quorem+0xf2>
 80059e0:	3c01      	subs	r4, #1
 80059e2:	e7eb      	b.n	80059bc <quorem+0xec>
 80059e4:	2000      	movs	r0, #0
 80059e6:	e7ee      	b.n	80059c6 <quorem+0xf6>

080059e8 <_dtoa_r>:
 80059e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	4616      	mov	r6, r2
 80059ee:	461f      	mov	r7, r3
 80059f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80059f2:	b099      	sub	sp, #100	; 0x64
 80059f4:	4605      	mov	r5, r0
 80059f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80059fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80059fe:	b974      	cbnz	r4, 8005a1e <_dtoa_r+0x36>
 8005a00:	2010      	movs	r0, #16
 8005a02:	f000 fde3 	bl	80065cc <malloc>
 8005a06:	4602      	mov	r2, r0
 8005a08:	6268      	str	r0, [r5, #36]	; 0x24
 8005a0a:	b920      	cbnz	r0, 8005a16 <_dtoa_r+0x2e>
 8005a0c:	21ea      	movs	r1, #234	; 0xea
 8005a0e:	4ba8      	ldr	r3, [pc, #672]	; (8005cb0 <_dtoa_r+0x2c8>)
 8005a10:	48a8      	ldr	r0, [pc, #672]	; (8005cb4 <_dtoa_r+0x2cc>)
 8005a12:	f001 fbdd 	bl	80071d0 <__assert_func>
 8005a16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a1a:	6004      	str	r4, [r0, #0]
 8005a1c:	60c4      	str	r4, [r0, #12]
 8005a1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a20:	6819      	ldr	r1, [r3, #0]
 8005a22:	b151      	cbz	r1, 8005a3a <_dtoa_r+0x52>
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	2301      	movs	r3, #1
 8005a28:	4093      	lsls	r3, r2
 8005a2a:	604a      	str	r2, [r1, #4]
 8005a2c:	608b      	str	r3, [r1, #8]
 8005a2e:	4628      	mov	r0, r5
 8005a30:	f000 fe30 	bl	8006694 <_Bfree>
 8005a34:	2200      	movs	r2, #0
 8005a36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	1e3b      	subs	r3, r7, #0
 8005a3c:	bfaf      	iteee	ge
 8005a3e:	2300      	movge	r3, #0
 8005a40:	2201      	movlt	r2, #1
 8005a42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a46:	9305      	strlt	r3, [sp, #20]
 8005a48:	bfa8      	it	ge
 8005a4a:	f8c8 3000 	strge.w	r3, [r8]
 8005a4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005a52:	4b99      	ldr	r3, [pc, #612]	; (8005cb8 <_dtoa_r+0x2d0>)
 8005a54:	bfb8      	it	lt
 8005a56:	f8c8 2000 	strlt.w	r2, [r8]
 8005a5a:	ea33 0309 	bics.w	r3, r3, r9
 8005a5e:	d119      	bne.n	8005a94 <_dtoa_r+0xac>
 8005a60:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a6c:	4333      	orrs	r3, r6
 8005a6e:	f000 857f 	beq.w	8006570 <_dtoa_r+0xb88>
 8005a72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a74:	b953      	cbnz	r3, 8005a8c <_dtoa_r+0xa4>
 8005a76:	4b91      	ldr	r3, [pc, #580]	; (8005cbc <_dtoa_r+0x2d4>)
 8005a78:	e022      	b.n	8005ac0 <_dtoa_r+0xd8>
 8005a7a:	4b91      	ldr	r3, [pc, #580]	; (8005cc0 <_dtoa_r+0x2d8>)
 8005a7c:	9303      	str	r3, [sp, #12]
 8005a7e:	3308      	adds	r3, #8
 8005a80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	9803      	ldr	r0, [sp, #12]
 8005a86:	b019      	add	sp, #100	; 0x64
 8005a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8c:	4b8b      	ldr	r3, [pc, #556]	; (8005cbc <_dtoa_r+0x2d4>)
 8005a8e:	9303      	str	r3, [sp, #12]
 8005a90:	3303      	adds	r3, #3
 8005a92:	e7f5      	b.n	8005a80 <_dtoa_r+0x98>
 8005a94:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005a98:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005a9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f7fa ff80 	bl	80009a8 <__aeabi_dcmpeq>
 8005aa8:	4680      	mov	r8, r0
 8005aaa:	b158      	cbz	r0, 8005ac4 <_dtoa_r+0xdc>
 8005aac:	2301      	movs	r3, #1
 8005aae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 8558 	beq.w	800656a <_dtoa_r+0xb82>
 8005aba:	4882      	ldr	r0, [pc, #520]	; (8005cc4 <_dtoa_r+0x2dc>)
 8005abc:	6018      	str	r0, [r3, #0]
 8005abe:	1e43      	subs	r3, r0, #1
 8005ac0:	9303      	str	r3, [sp, #12]
 8005ac2:	e7df      	b.n	8005a84 <_dtoa_r+0x9c>
 8005ac4:	ab16      	add	r3, sp, #88	; 0x58
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	ab17      	add	r3, sp, #92	; 0x5c
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	4628      	mov	r0, r5
 8005ace:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005ad2:	f001 f8c5 	bl	8006c60 <__d2b>
 8005ad6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005ada:	4683      	mov	fp, r0
 8005adc:	2c00      	cmp	r4, #0
 8005ade:	d07f      	beq.n	8005be0 <_dtoa_r+0x1f8>
 8005ae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ae6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005aea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005aee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005af2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005af6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005afa:	2200      	movs	r2, #0
 8005afc:	4b72      	ldr	r3, [pc, #456]	; (8005cc8 <_dtoa_r+0x2e0>)
 8005afe:	f7fa fb33 	bl	8000168 <__aeabi_dsub>
 8005b02:	a365      	add	r3, pc, #404	; (adr r3, 8005c98 <_dtoa_r+0x2b0>)
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	f7fa fce6 	bl	80004d8 <__aeabi_dmul>
 8005b0c:	a364      	add	r3, pc, #400	; (adr r3, 8005ca0 <_dtoa_r+0x2b8>)
 8005b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b12:	f7fa fb2b 	bl	800016c <__adddf3>
 8005b16:	4606      	mov	r6, r0
 8005b18:	4620      	mov	r0, r4
 8005b1a:	460f      	mov	r7, r1
 8005b1c:	f7fa fc72 	bl	8000404 <__aeabi_i2d>
 8005b20:	a361      	add	r3, pc, #388	; (adr r3, 8005ca8 <_dtoa_r+0x2c0>)
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	f7fa fcd7 	bl	80004d8 <__aeabi_dmul>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	4630      	mov	r0, r6
 8005b30:	4639      	mov	r1, r7
 8005b32:	f7fa fb1b 	bl	800016c <__adddf3>
 8005b36:	4606      	mov	r6, r0
 8005b38:	460f      	mov	r7, r1
 8005b3a:	f7fa ff7d 	bl	8000a38 <__aeabi_d2iz>
 8005b3e:	2200      	movs	r2, #0
 8005b40:	4682      	mov	sl, r0
 8005b42:	2300      	movs	r3, #0
 8005b44:	4630      	mov	r0, r6
 8005b46:	4639      	mov	r1, r7
 8005b48:	f7fa ff38 	bl	80009bc <__aeabi_dcmplt>
 8005b4c:	b148      	cbz	r0, 8005b62 <_dtoa_r+0x17a>
 8005b4e:	4650      	mov	r0, sl
 8005b50:	f7fa fc58 	bl	8000404 <__aeabi_i2d>
 8005b54:	4632      	mov	r2, r6
 8005b56:	463b      	mov	r3, r7
 8005b58:	f7fa ff26 	bl	80009a8 <__aeabi_dcmpeq>
 8005b5c:	b908      	cbnz	r0, 8005b62 <_dtoa_r+0x17a>
 8005b5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b62:	f1ba 0f16 	cmp.w	sl, #22
 8005b66:	d858      	bhi.n	8005c1a <_dtoa_r+0x232>
 8005b68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b6c:	4b57      	ldr	r3, [pc, #348]	; (8005ccc <_dtoa_r+0x2e4>)
 8005b6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	f7fa ff21 	bl	80009bc <__aeabi_dcmplt>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d04f      	beq.n	8005c1e <_dtoa_r+0x236>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b84:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b88:	1b1c      	subs	r4, r3, r4
 8005b8a:	1e63      	subs	r3, r4, #1
 8005b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b8e:	bf49      	itett	mi
 8005b90:	f1c4 0301 	rsbmi	r3, r4, #1
 8005b94:	2300      	movpl	r3, #0
 8005b96:	9306      	strmi	r3, [sp, #24]
 8005b98:	2300      	movmi	r3, #0
 8005b9a:	bf54      	ite	pl
 8005b9c:	9306      	strpl	r3, [sp, #24]
 8005b9e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005ba0:	f1ba 0f00 	cmp.w	sl, #0
 8005ba4:	db3d      	blt.n	8005c22 <_dtoa_r+0x23a>
 8005ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005bac:	4453      	add	r3, sl
 8005bae:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8005bb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bb6:	2b09      	cmp	r3, #9
 8005bb8:	f200 808c 	bhi.w	8005cd4 <_dtoa_r+0x2ec>
 8005bbc:	2b05      	cmp	r3, #5
 8005bbe:	bfc4      	itt	gt
 8005bc0:	3b04      	subgt	r3, #4
 8005bc2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005bc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bc6:	bfc8      	it	gt
 8005bc8:	2400      	movgt	r4, #0
 8005bca:	f1a3 0302 	sub.w	r3, r3, #2
 8005bce:	bfd8      	it	le
 8005bd0:	2401      	movle	r4, #1
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	f200 808a 	bhi.w	8005cec <_dtoa_r+0x304>
 8005bd8:	e8df f003 	tbb	[pc, r3]
 8005bdc:	5b4d4f2d 	.word	0x5b4d4f2d
 8005be0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005be4:	441c      	add	r4, r3
 8005be6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	bfc3      	ittte	gt
 8005bee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005bf2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005bf6:	fa09 f303 	lslgt.w	r3, r9, r3
 8005bfa:	f1c3 0320 	rsble	r3, r3, #32
 8005bfe:	bfc6      	itte	gt
 8005c00:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c04:	4318      	orrgt	r0, r3
 8005c06:	fa06 f003 	lslle.w	r0, r6, r3
 8005c0a:	f7fa fbeb 	bl	80003e4 <__aeabi_ui2d>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005c14:	3c01      	subs	r4, #1
 8005c16:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c18:	e76f      	b.n	8005afa <_dtoa_r+0x112>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e7b2      	b.n	8005b84 <_dtoa_r+0x19c>
 8005c1e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005c20:	e7b1      	b.n	8005b86 <_dtoa_r+0x19e>
 8005c22:	9b06      	ldr	r3, [sp, #24]
 8005c24:	eba3 030a 	sub.w	r3, r3, sl
 8005c28:	9306      	str	r3, [sp, #24]
 8005c2a:	f1ca 0300 	rsb	r3, sl, #0
 8005c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8005c30:	2300      	movs	r3, #0
 8005c32:	930e      	str	r3, [sp, #56]	; 0x38
 8005c34:	e7be      	b.n	8005bb4 <_dtoa_r+0x1cc>
 8005c36:	2300      	movs	r3, #0
 8005c38:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	dc58      	bgt.n	8005cf2 <_dtoa_r+0x30a>
 8005c40:	f04f 0901 	mov.w	r9, #1
 8005c44:	464b      	mov	r3, r9
 8005c46:	f8cd 9020 	str.w	r9, [sp, #32]
 8005c4a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005c4e:	2200      	movs	r2, #0
 8005c50:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005c52:	6042      	str	r2, [r0, #4]
 8005c54:	2204      	movs	r2, #4
 8005c56:	f102 0614 	add.w	r6, r2, #20
 8005c5a:	429e      	cmp	r6, r3
 8005c5c:	6841      	ldr	r1, [r0, #4]
 8005c5e:	d94e      	bls.n	8005cfe <_dtoa_r+0x316>
 8005c60:	4628      	mov	r0, r5
 8005c62:	f000 fcd7 	bl	8006614 <_Balloc>
 8005c66:	9003      	str	r0, [sp, #12]
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d14c      	bne.n	8005d06 <_dtoa_r+0x31e>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005c72:	4b17      	ldr	r3, [pc, #92]	; (8005cd0 <_dtoa_r+0x2e8>)
 8005c74:	e6cc      	b.n	8005a10 <_dtoa_r+0x28>
 8005c76:	2301      	movs	r3, #1
 8005c78:	e7de      	b.n	8005c38 <_dtoa_r+0x250>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c80:	eb0a 0903 	add.w	r9, sl, r3
 8005c84:	f109 0301 	add.w	r3, r9, #1
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	9308      	str	r3, [sp, #32]
 8005c8c:	bfb8      	it	lt
 8005c8e:	2301      	movlt	r3, #1
 8005c90:	e7dd      	b.n	8005c4e <_dtoa_r+0x266>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e7f2      	b.n	8005c7c <_dtoa_r+0x294>
 8005c96:	bf00      	nop
 8005c98:	636f4361 	.word	0x636f4361
 8005c9c:	3fd287a7 	.word	0x3fd287a7
 8005ca0:	8b60c8b3 	.word	0x8b60c8b3
 8005ca4:	3fc68a28 	.word	0x3fc68a28
 8005ca8:	509f79fb 	.word	0x509f79fb
 8005cac:	3fd34413 	.word	0x3fd34413
 8005cb0:	080082e9 	.word	0x080082e9
 8005cb4:	08008300 	.word	0x08008300
 8005cb8:	7ff00000 	.word	0x7ff00000
 8005cbc:	080082e5 	.word	0x080082e5
 8005cc0:	080082dc 	.word	0x080082dc
 8005cc4:	080082b9 	.word	0x080082b9
 8005cc8:	3ff80000 	.word	0x3ff80000
 8005ccc:	080083f0 	.word	0x080083f0
 8005cd0:	0800835b 	.word	0x0800835b
 8005cd4:	2401      	movs	r4, #1
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005cda:	9322      	str	r3, [sp, #136]	; 0x88
 8005cdc:	f04f 39ff 	mov.w	r9, #4294967295
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2312      	movs	r3, #18
 8005ce4:	f8cd 9020 	str.w	r9, [sp, #32]
 8005ce8:	9223      	str	r2, [sp, #140]	; 0x8c
 8005cea:	e7b0      	b.n	8005c4e <_dtoa_r+0x266>
 8005cec:	2301      	movs	r3, #1
 8005cee:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf0:	e7f4      	b.n	8005cdc <_dtoa_r+0x2f4>
 8005cf2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	f8cd 9020 	str.w	r9, [sp, #32]
 8005cfc:	e7a7      	b.n	8005c4e <_dtoa_r+0x266>
 8005cfe:	3101      	adds	r1, #1
 8005d00:	6041      	str	r1, [r0, #4]
 8005d02:	0052      	lsls	r2, r2, #1
 8005d04:	e7a7      	b.n	8005c56 <_dtoa_r+0x26e>
 8005d06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d08:	9a03      	ldr	r2, [sp, #12]
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	9b08      	ldr	r3, [sp, #32]
 8005d0e:	2b0e      	cmp	r3, #14
 8005d10:	f200 80a8 	bhi.w	8005e64 <_dtoa_r+0x47c>
 8005d14:	2c00      	cmp	r4, #0
 8005d16:	f000 80a5 	beq.w	8005e64 <_dtoa_r+0x47c>
 8005d1a:	f1ba 0f00 	cmp.w	sl, #0
 8005d1e:	dd34      	ble.n	8005d8a <_dtoa_r+0x3a2>
 8005d20:	4a9a      	ldr	r2, [pc, #616]	; (8005f8c <_dtoa_r+0x5a4>)
 8005d22:	f00a 030f 	and.w	r3, sl, #15
 8005d26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d2a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005d2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005d36:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005d3a:	d016      	beq.n	8005d6a <_dtoa_r+0x382>
 8005d3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d40:	4b93      	ldr	r3, [pc, #588]	; (8005f90 <_dtoa_r+0x5a8>)
 8005d42:	2703      	movs	r7, #3
 8005d44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d48:	f7fa fcf0 	bl	800072c <__aeabi_ddiv>
 8005d4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d50:	f004 040f 	and.w	r4, r4, #15
 8005d54:	4e8e      	ldr	r6, [pc, #568]	; (8005f90 <_dtoa_r+0x5a8>)
 8005d56:	b954      	cbnz	r4, 8005d6e <_dtoa_r+0x386>
 8005d58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d60:	f7fa fce4 	bl	800072c <__aeabi_ddiv>
 8005d64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d68:	e029      	b.n	8005dbe <_dtoa_r+0x3d6>
 8005d6a:	2702      	movs	r7, #2
 8005d6c:	e7f2      	b.n	8005d54 <_dtoa_r+0x36c>
 8005d6e:	07e1      	lsls	r1, r4, #31
 8005d70:	d508      	bpl.n	8005d84 <_dtoa_r+0x39c>
 8005d72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d7a:	f7fa fbad 	bl	80004d8 <__aeabi_dmul>
 8005d7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d82:	3701      	adds	r7, #1
 8005d84:	1064      	asrs	r4, r4, #1
 8005d86:	3608      	adds	r6, #8
 8005d88:	e7e5      	b.n	8005d56 <_dtoa_r+0x36e>
 8005d8a:	f000 80a5 	beq.w	8005ed8 <_dtoa_r+0x4f0>
 8005d8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d92:	f1ca 0400 	rsb	r4, sl, #0
 8005d96:	4b7d      	ldr	r3, [pc, #500]	; (8005f8c <_dtoa_r+0x5a4>)
 8005d98:	f004 020f 	and.w	r2, r4, #15
 8005d9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	f7fa fb98 	bl	80004d8 <__aeabi_dmul>
 8005da8:	2702      	movs	r7, #2
 8005daa:	2300      	movs	r3, #0
 8005dac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005db0:	4e77      	ldr	r6, [pc, #476]	; (8005f90 <_dtoa_r+0x5a8>)
 8005db2:	1124      	asrs	r4, r4, #4
 8005db4:	2c00      	cmp	r4, #0
 8005db6:	f040 8084 	bne.w	8005ec2 <_dtoa_r+0x4da>
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1d2      	bne.n	8005d64 <_dtoa_r+0x37c>
 8005dbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 808b 	beq.w	8005edc <_dtoa_r+0x4f4>
 8005dc6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005dca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005dce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	4b6f      	ldr	r3, [pc, #444]	; (8005f94 <_dtoa_r+0x5ac>)
 8005dd6:	f7fa fdf1 	bl	80009bc <__aeabi_dcmplt>
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	d07e      	beq.n	8005edc <_dtoa_r+0x4f4>
 8005dde:	9b08      	ldr	r3, [sp, #32]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d07b      	beq.n	8005edc <_dtoa_r+0x4f4>
 8005de4:	f1b9 0f00 	cmp.w	r9, #0
 8005de8:	dd38      	ble.n	8005e5c <_dtoa_r+0x474>
 8005dea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005dee:	2200      	movs	r2, #0
 8005df0:	4b69      	ldr	r3, [pc, #420]	; (8005f98 <_dtoa_r+0x5b0>)
 8005df2:	f7fa fb71 	bl	80004d8 <__aeabi_dmul>
 8005df6:	464c      	mov	r4, r9
 8005df8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dfc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005e00:	3701      	adds	r7, #1
 8005e02:	4638      	mov	r0, r7
 8005e04:	f7fa fafe 	bl	8000404 <__aeabi_i2d>
 8005e08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e0c:	f7fa fb64 	bl	80004d8 <__aeabi_dmul>
 8005e10:	2200      	movs	r2, #0
 8005e12:	4b62      	ldr	r3, [pc, #392]	; (8005f9c <_dtoa_r+0x5b4>)
 8005e14:	f7fa f9aa 	bl	800016c <__adddf3>
 8005e18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005e1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e20:	9611      	str	r6, [sp, #68]	; 0x44
 8005e22:	2c00      	cmp	r4, #0
 8005e24:	d15d      	bne.n	8005ee2 <_dtoa_r+0x4fa>
 8005e26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	4b5c      	ldr	r3, [pc, #368]	; (8005fa0 <_dtoa_r+0x5b8>)
 8005e2e:	f7fa f99b 	bl	8000168 <__aeabi_dsub>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e3a:	4633      	mov	r3, r6
 8005e3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e3e:	f7fa fddb 	bl	80009f8 <__aeabi_dcmpgt>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	f040 829c 	bne.w	8006380 <_dtoa_r+0x998>
 8005e48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005e52:	f7fa fdb3 	bl	80009bc <__aeabi_dcmplt>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	f040 8290 	bne.w	800637c <_dtoa_r+0x994>
 8005e5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005e60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f2c0 8152 	blt.w	8006110 <_dtoa_r+0x728>
 8005e6c:	f1ba 0f0e 	cmp.w	sl, #14
 8005e70:	f300 814e 	bgt.w	8006110 <_dtoa_r+0x728>
 8005e74:	4b45      	ldr	r3, [pc, #276]	; (8005f8c <_dtoa_r+0x5a4>)
 8005e76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005e82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f280 80db 	bge.w	8006040 <_dtoa_r+0x658>
 8005e8a:	9b08      	ldr	r3, [sp, #32]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f300 80d7 	bgt.w	8006040 <_dtoa_r+0x658>
 8005e92:	f040 8272 	bne.w	800637a <_dtoa_r+0x992>
 8005e96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	4b40      	ldr	r3, [pc, #256]	; (8005fa0 <_dtoa_r+0x5b8>)
 8005e9e:	f7fa fb1b 	bl	80004d8 <__aeabi_dmul>
 8005ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ea6:	f7fa fd9d 	bl	80009e4 <__aeabi_dcmpge>
 8005eaa:	9c08      	ldr	r4, [sp, #32]
 8005eac:	4626      	mov	r6, r4
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	f040 8248 	bne.w	8006344 <_dtoa_r+0x95c>
 8005eb4:	2331      	movs	r3, #49	; 0x31
 8005eb6:	9f03      	ldr	r7, [sp, #12]
 8005eb8:	f10a 0a01 	add.w	sl, sl, #1
 8005ebc:	f807 3b01 	strb.w	r3, [r7], #1
 8005ec0:	e244      	b.n	800634c <_dtoa_r+0x964>
 8005ec2:	07e2      	lsls	r2, r4, #31
 8005ec4:	d505      	bpl.n	8005ed2 <_dtoa_r+0x4ea>
 8005ec6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005eca:	f7fa fb05 	bl	80004d8 <__aeabi_dmul>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	3701      	adds	r7, #1
 8005ed2:	1064      	asrs	r4, r4, #1
 8005ed4:	3608      	adds	r6, #8
 8005ed6:	e76d      	b.n	8005db4 <_dtoa_r+0x3cc>
 8005ed8:	2702      	movs	r7, #2
 8005eda:	e770      	b.n	8005dbe <_dtoa_r+0x3d6>
 8005edc:	46d0      	mov	r8, sl
 8005ede:	9c08      	ldr	r4, [sp, #32]
 8005ee0:	e78f      	b.n	8005e02 <_dtoa_r+0x41a>
 8005ee2:	9903      	ldr	r1, [sp, #12]
 8005ee4:	4b29      	ldr	r3, [pc, #164]	; (8005f8c <_dtoa_r+0x5a4>)
 8005ee6:	4421      	add	r1, r4
 8005ee8:	9112      	str	r1, [sp, #72]	; 0x48
 8005eea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005eec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ef0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005ef4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ef8:	2900      	cmp	r1, #0
 8005efa:	d055      	beq.n	8005fa8 <_dtoa_r+0x5c0>
 8005efc:	2000      	movs	r0, #0
 8005efe:	4929      	ldr	r1, [pc, #164]	; (8005fa4 <_dtoa_r+0x5bc>)
 8005f00:	f7fa fc14 	bl	800072c <__aeabi_ddiv>
 8005f04:	463b      	mov	r3, r7
 8005f06:	4632      	mov	r2, r6
 8005f08:	f7fa f92e 	bl	8000168 <__aeabi_dsub>
 8005f0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f10:	9f03      	ldr	r7, [sp, #12]
 8005f12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f16:	f7fa fd8f 	bl	8000a38 <__aeabi_d2iz>
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	f7fa fa72 	bl	8000404 <__aeabi_i2d>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f28:	f7fa f91e 	bl	8000168 <__aeabi_dsub>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	3430      	adds	r4, #48	; 0x30
 8005f32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f3a:	f807 4b01 	strb.w	r4, [r7], #1
 8005f3e:	f7fa fd3d 	bl	80009bc <__aeabi_dcmplt>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d174      	bne.n	8006030 <_dtoa_r+0x648>
 8005f46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	4911      	ldr	r1, [pc, #68]	; (8005f94 <_dtoa_r+0x5ac>)
 8005f4e:	f7fa f90b 	bl	8000168 <__aeabi_dsub>
 8005f52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f56:	f7fa fd31 	bl	80009bc <__aeabi_dcmplt>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	f040 80b7 	bne.w	80060ce <_dtoa_r+0x6e6>
 8005f60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f62:	429f      	cmp	r7, r3
 8005f64:	f43f af7a 	beq.w	8005e5c <_dtoa_r+0x474>
 8005f68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <_dtoa_r+0x5b0>)
 8005f70:	f7fa fab2 	bl	80004d8 <__aeabi_dmul>
 8005f74:	2200      	movs	r2, #0
 8005f76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f7e:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <_dtoa_r+0x5b0>)
 8005f80:	f7fa faaa 	bl	80004d8 <__aeabi_dmul>
 8005f84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f88:	e7c3      	b.n	8005f12 <_dtoa_r+0x52a>
 8005f8a:	bf00      	nop
 8005f8c:	080083f0 	.word	0x080083f0
 8005f90:	080083c8 	.word	0x080083c8
 8005f94:	3ff00000 	.word	0x3ff00000
 8005f98:	40240000 	.word	0x40240000
 8005f9c:	401c0000 	.word	0x401c0000
 8005fa0:	40140000 	.word	0x40140000
 8005fa4:	3fe00000 	.word	0x3fe00000
 8005fa8:	4630      	mov	r0, r6
 8005faa:	4639      	mov	r1, r7
 8005fac:	f7fa fa94 	bl	80004d8 <__aeabi_dmul>
 8005fb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fb6:	9c03      	ldr	r4, [sp, #12]
 8005fb8:	9314      	str	r3, [sp, #80]	; 0x50
 8005fba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fbe:	f7fa fd3b 	bl	8000a38 <__aeabi_d2iz>
 8005fc2:	9015      	str	r0, [sp, #84]	; 0x54
 8005fc4:	f7fa fa1e 	bl	8000404 <__aeabi_i2d>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fd0:	f7fa f8ca 	bl	8000168 <__aeabi_dsub>
 8005fd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	3330      	adds	r3, #48	; 0x30
 8005fda:	f804 3b01 	strb.w	r3, [r4], #1
 8005fde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fe0:	460f      	mov	r7, r1
 8005fe2:	429c      	cmp	r4, r3
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	d124      	bne.n	8006034 <_dtoa_r+0x64c>
 8005fea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fee:	4bb0      	ldr	r3, [pc, #704]	; (80062b0 <_dtoa_r+0x8c8>)
 8005ff0:	f7fa f8bc 	bl	800016c <__adddf3>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	4639      	mov	r1, r7
 8005ffc:	f7fa fcfc 	bl	80009f8 <__aeabi_dcmpgt>
 8006000:	2800      	cmp	r0, #0
 8006002:	d163      	bne.n	80060cc <_dtoa_r+0x6e4>
 8006004:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006008:	2000      	movs	r0, #0
 800600a:	49a9      	ldr	r1, [pc, #676]	; (80062b0 <_dtoa_r+0x8c8>)
 800600c:	f7fa f8ac 	bl	8000168 <__aeabi_dsub>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4630      	mov	r0, r6
 8006016:	4639      	mov	r1, r7
 8006018:	f7fa fcd0 	bl	80009bc <__aeabi_dcmplt>
 800601c:	2800      	cmp	r0, #0
 800601e:	f43f af1d 	beq.w	8005e5c <_dtoa_r+0x474>
 8006022:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006024:	1e7b      	subs	r3, r7, #1
 8006026:	9314      	str	r3, [sp, #80]	; 0x50
 8006028:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800602c:	2b30      	cmp	r3, #48	; 0x30
 800602e:	d0f8      	beq.n	8006022 <_dtoa_r+0x63a>
 8006030:	46c2      	mov	sl, r8
 8006032:	e03b      	b.n	80060ac <_dtoa_r+0x6c4>
 8006034:	4b9f      	ldr	r3, [pc, #636]	; (80062b4 <_dtoa_r+0x8cc>)
 8006036:	f7fa fa4f 	bl	80004d8 <__aeabi_dmul>
 800603a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800603e:	e7bc      	b.n	8005fba <_dtoa_r+0x5d2>
 8006040:	9f03      	ldr	r7, [sp, #12]
 8006042:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006046:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800604a:	4640      	mov	r0, r8
 800604c:	4649      	mov	r1, r9
 800604e:	f7fa fb6d 	bl	800072c <__aeabi_ddiv>
 8006052:	f7fa fcf1 	bl	8000a38 <__aeabi_d2iz>
 8006056:	4604      	mov	r4, r0
 8006058:	f7fa f9d4 	bl	8000404 <__aeabi_i2d>
 800605c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006060:	f7fa fa3a 	bl	80004d8 <__aeabi_dmul>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4640      	mov	r0, r8
 800606a:	4649      	mov	r1, r9
 800606c:	f7fa f87c 	bl	8000168 <__aeabi_dsub>
 8006070:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006074:	f807 6b01 	strb.w	r6, [r7], #1
 8006078:	9e03      	ldr	r6, [sp, #12]
 800607a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800607e:	1bbe      	subs	r6, r7, r6
 8006080:	45b4      	cmp	ip, r6
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	d136      	bne.n	80060f6 <_dtoa_r+0x70e>
 8006088:	f7fa f870 	bl	800016c <__adddf3>
 800608c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006090:	4680      	mov	r8, r0
 8006092:	4689      	mov	r9, r1
 8006094:	f7fa fcb0 	bl	80009f8 <__aeabi_dcmpgt>
 8006098:	bb58      	cbnz	r0, 80060f2 <_dtoa_r+0x70a>
 800609a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800609e:	4640      	mov	r0, r8
 80060a0:	4649      	mov	r1, r9
 80060a2:	f7fa fc81 	bl	80009a8 <__aeabi_dcmpeq>
 80060a6:	b108      	cbz	r0, 80060ac <_dtoa_r+0x6c4>
 80060a8:	07e1      	lsls	r1, r4, #31
 80060aa:	d422      	bmi.n	80060f2 <_dtoa_r+0x70a>
 80060ac:	4628      	mov	r0, r5
 80060ae:	4659      	mov	r1, fp
 80060b0:	f000 faf0 	bl	8006694 <_Bfree>
 80060b4:	2300      	movs	r3, #0
 80060b6:	703b      	strb	r3, [r7, #0]
 80060b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80060ba:	f10a 0001 	add.w	r0, sl, #1
 80060be:	6018      	str	r0, [r3, #0]
 80060c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f43f acde 	beq.w	8005a84 <_dtoa_r+0x9c>
 80060c8:	601f      	str	r7, [r3, #0]
 80060ca:	e4db      	b.n	8005a84 <_dtoa_r+0x9c>
 80060cc:	4627      	mov	r7, r4
 80060ce:	463b      	mov	r3, r7
 80060d0:	461f      	mov	r7, r3
 80060d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060d6:	2a39      	cmp	r2, #57	; 0x39
 80060d8:	d107      	bne.n	80060ea <_dtoa_r+0x702>
 80060da:	9a03      	ldr	r2, [sp, #12]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d1f7      	bne.n	80060d0 <_dtoa_r+0x6e8>
 80060e0:	2230      	movs	r2, #48	; 0x30
 80060e2:	9903      	ldr	r1, [sp, #12]
 80060e4:	f108 0801 	add.w	r8, r8, #1
 80060e8:	700a      	strb	r2, [r1, #0]
 80060ea:	781a      	ldrb	r2, [r3, #0]
 80060ec:	3201      	adds	r2, #1
 80060ee:	701a      	strb	r2, [r3, #0]
 80060f0:	e79e      	b.n	8006030 <_dtoa_r+0x648>
 80060f2:	46d0      	mov	r8, sl
 80060f4:	e7eb      	b.n	80060ce <_dtoa_r+0x6e6>
 80060f6:	2200      	movs	r2, #0
 80060f8:	4b6e      	ldr	r3, [pc, #440]	; (80062b4 <_dtoa_r+0x8cc>)
 80060fa:	f7fa f9ed 	bl	80004d8 <__aeabi_dmul>
 80060fe:	2200      	movs	r2, #0
 8006100:	2300      	movs	r3, #0
 8006102:	4680      	mov	r8, r0
 8006104:	4689      	mov	r9, r1
 8006106:	f7fa fc4f 	bl	80009a8 <__aeabi_dcmpeq>
 800610a:	2800      	cmp	r0, #0
 800610c:	d09b      	beq.n	8006046 <_dtoa_r+0x65e>
 800610e:	e7cd      	b.n	80060ac <_dtoa_r+0x6c4>
 8006110:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006112:	2a00      	cmp	r2, #0
 8006114:	f000 80d0 	beq.w	80062b8 <_dtoa_r+0x8d0>
 8006118:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800611a:	2a01      	cmp	r2, #1
 800611c:	f300 80ae 	bgt.w	800627c <_dtoa_r+0x894>
 8006120:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006122:	2a00      	cmp	r2, #0
 8006124:	f000 80a6 	beq.w	8006274 <_dtoa_r+0x88c>
 8006128:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800612c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800612e:	9f06      	ldr	r7, [sp, #24]
 8006130:	9a06      	ldr	r2, [sp, #24]
 8006132:	2101      	movs	r1, #1
 8006134:	441a      	add	r2, r3
 8006136:	9206      	str	r2, [sp, #24]
 8006138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800613a:	4628      	mov	r0, r5
 800613c:	441a      	add	r2, r3
 800613e:	9209      	str	r2, [sp, #36]	; 0x24
 8006140:	f000 fb5e 	bl	8006800 <__i2b>
 8006144:	4606      	mov	r6, r0
 8006146:	2f00      	cmp	r7, #0
 8006148:	dd0c      	ble.n	8006164 <_dtoa_r+0x77c>
 800614a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800614c:	2b00      	cmp	r3, #0
 800614e:	dd09      	ble.n	8006164 <_dtoa_r+0x77c>
 8006150:	42bb      	cmp	r3, r7
 8006152:	bfa8      	it	ge
 8006154:	463b      	movge	r3, r7
 8006156:	9a06      	ldr	r2, [sp, #24]
 8006158:	1aff      	subs	r7, r7, r3
 800615a:	1ad2      	subs	r2, r2, r3
 800615c:	9206      	str	r2, [sp, #24]
 800615e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	9309      	str	r3, [sp, #36]	; 0x24
 8006164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006166:	b1f3      	cbz	r3, 80061a6 <_dtoa_r+0x7be>
 8006168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 80a8 	beq.w	80062c0 <_dtoa_r+0x8d8>
 8006170:	2c00      	cmp	r4, #0
 8006172:	dd10      	ble.n	8006196 <_dtoa_r+0x7ae>
 8006174:	4631      	mov	r1, r6
 8006176:	4622      	mov	r2, r4
 8006178:	4628      	mov	r0, r5
 800617a:	f000 fbff 	bl	800697c <__pow5mult>
 800617e:	465a      	mov	r2, fp
 8006180:	4601      	mov	r1, r0
 8006182:	4606      	mov	r6, r0
 8006184:	4628      	mov	r0, r5
 8006186:	f000 fb51 	bl	800682c <__multiply>
 800618a:	4680      	mov	r8, r0
 800618c:	4659      	mov	r1, fp
 800618e:	4628      	mov	r0, r5
 8006190:	f000 fa80 	bl	8006694 <_Bfree>
 8006194:	46c3      	mov	fp, r8
 8006196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006198:	1b1a      	subs	r2, r3, r4
 800619a:	d004      	beq.n	80061a6 <_dtoa_r+0x7be>
 800619c:	4659      	mov	r1, fp
 800619e:	4628      	mov	r0, r5
 80061a0:	f000 fbec 	bl	800697c <__pow5mult>
 80061a4:	4683      	mov	fp, r0
 80061a6:	2101      	movs	r1, #1
 80061a8:	4628      	mov	r0, r5
 80061aa:	f000 fb29 	bl	8006800 <__i2b>
 80061ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061b0:	4604      	mov	r4, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f340 8086 	ble.w	80062c4 <_dtoa_r+0x8dc>
 80061b8:	461a      	mov	r2, r3
 80061ba:	4601      	mov	r1, r0
 80061bc:	4628      	mov	r0, r5
 80061be:	f000 fbdd 	bl	800697c <__pow5mult>
 80061c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061c4:	4604      	mov	r4, r0
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	dd7f      	ble.n	80062ca <_dtoa_r+0x8e2>
 80061ca:	f04f 0800 	mov.w	r8, #0
 80061ce:	6923      	ldr	r3, [r4, #16]
 80061d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80061d4:	6918      	ldr	r0, [r3, #16]
 80061d6:	f000 fac5 	bl	8006764 <__hi0bits>
 80061da:	f1c0 0020 	rsb	r0, r0, #32
 80061de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e0:	4418      	add	r0, r3
 80061e2:	f010 001f 	ands.w	r0, r0, #31
 80061e6:	f000 8092 	beq.w	800630e <_dtoa_r+0x926>
 80061ea:	f1c0 0320 	rsb	r3, r0, #32
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	f340 808a 	ble.w	8006308 <_dtoa_r+0x920>
 80061f4:	f1c0 001c 	rsb	r0, r0, #28
 80061f8:	9b06      	ldr	r3, [sp, #24]
 80061fa:	4407      	add	r7, r0
 80061fc:	4403      	add	r3, r0
 80061fe:	9306      	str	r3, [sp, #24]
 8006200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006202:	4403      	add	r3, r0
 8006204:	9309      	str	r3, [sp, #36]	; 0x24
 8006206:	9b06      	ldr	r3, [sp, #24]
 8006208:	2b00      	cmp	r3, #0
 800620a:	dd05      	ble.n	8006218 <_dtoa_r+0x830>
 800620c:	4659      	mov	r1, fp
 800620e:	461a      	mov	r2, r3
 8006210:	4628      	mov	r0, r5
 8006212:	f000 fc0d 	bl	8006a30 <__lshift>
 8006216:	4683      	mov	fp, r0
 8006218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800621a:	2b00      	cmp	r3, #0
 800621c:	dd05      	ble.n	800622a <_dtoa_r+0x842>
 800621e:	4621      	mov	r1, r4
 8006220:	461a      	mov	r2, r3
 8006222:	4628      	mov	r0, r5
 8006224:	f000 fc04 	bl	8006a30 <__lshift>
 8006228:	4604      	mov	r4, r0
 800622a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d070      	beq.n	8006312 <_dtoa_r+0x92a>
 8006230:	4621      	mov	r1, r4
 8006232:	4658      	mov	r0, fp
 8006234:	f000 fc6c 	bl	8006b10 <__mcmp>
 8006238:	2800      	cmp	r0, #0
 800623a:	da6a      	bge.n	8006312 <_dtoa_r+0x92a>
 800623c:	2300      	movs	r3, #0
 800623e:	4659      	mov	r1, fp
 8006240:	220a      	movs	r2, #10
 8006242:	4628      	mov	r0, r5
 8006244:	f000 fa48 	bl	80066d8 <__multadd>
 8006248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800624a:	4683      	mov	fp, r0
 800624c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 8194 	beq.w	800657e <_dtoa_r+0xb96>
 8006256:	4631      	mov	r1, r6
 8006258:	2300      	movs	r3, #0
 800625a:	220a      	movs	r2, #10
 800625c:	4628      	mov	r0, r5
 800625e:	f000 fa3b 	bl	80066d8 <__multadd>
 8006262:	f1b9 0f00 	cmp.w	r9, #0
 8006266:	4606      	mov	r6, r0
 8006268:	f300 8093 	bgt.w	8006392 <_dtoa_r+0x9aa>
 800626c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800626e:	2b02      	cmp	r3, #2
 8006270:	dc57      	bgt.n	8006322 <_dtoa_r+0x93a>
 8006272:	e08e      	b.n	8006392 <_dtoa_r+0x9aa>
 8006274:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006276:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800627a:	e757      	b.n	800612c <_dtoa_r+0x744>
 800627c:	9b08      	ldr	r3, [sp, #32]
 800627e:	1e5c      	subs	r4, r3, #1
 8006280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006282:	42a3      	cmp	r3, r4
 8006284:	bfb7      	itett	lt
 8006286:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006288:	1b1c      	subge	r4, r3, r4
 800628a:	1ae2      	sublt	r2, r4, r3
 800628c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800628e:	bfbe      	ittt	lt
 8006290:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006292:	189b      	addlt	r3, r3, r2
 8006294:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006296:	9b08      	ldr	r3, [sp, #32]
 8006298:	bfb8      	it	lt
 800629a:	2400      	movlt	r4, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	bfbb      	ittet	lt
 80062a0:	9b06      	ldrlt	r3, [sp, #24]
 80062a2:	9a08      	ldrlt	r2, [sp, #32]
 80062a4:	9f06      	ldrge	r7, [sp, #24]
 80062a6:	1a9f      	sublt	r7, r3, r2
 80062a8:	bfac      	ite	ge
 80062aa:	9b08      	ldrge	r3, [sp, #32]
 80062ac:	2300      	movlt	r3, #0
 80062ae:	e73f      	b.n	8006130 <_dtoa_r+0x748>
 80062b0:	3fe00000 	.word	0x3fe00000
 80062b4:	40240000 	.word	0x40240000
 80062b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80062ba:	9f06      	ldr	r7, [sp, #24]
 80062bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80062be:	e742      	b.n	8006146 <_dtoa_r+0x75e>
 80062c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062c2:	e76b      	b.n	800619c <_dtoa_r+0x7b4>
 80062c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	dc19      	bgt.n	80062fe <_dtoa_r+0x916>
 80062ca:	9b04      	ldr	r3, [sp, #16]
 80062cc:	b9bb      	cbnz	r3, 80062fe <_dtoa_r+0x916>
 80062ce:	9b05      	ldr	r3, [sp, #20]
 80062d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062d4:	b99b      	cbnz	r3, 80062fe <_dtoa_r+0x916>
 80062d6:	9b05      	ldr	r3, [sp, #20]
 80062d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062dc:	0d1b      	lsrs	r3, r3, #20
 80062de:	051b      	lsls	r3, r3, #20
 80062e0:	b183      	cbz	r3, 8006304 <_dtoa_r+0x91c>
 80062e2:	f04f 0801 	mov.w	r8, #1
 80062e6:	9b06      	ldr	r3, [sp, #24]
 80062e8:	3301      	adds	r3, #1
 80062ea:	9306      	str	r3, [sp, #24]
 80062ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ee:	3301      	adds	r3, #1
 80062f0:	9309      	str	r3, [sp, #36]	; 0x24
 80062f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f47f af6a 	bne.w	80061ce <_dtoa_r+0x7e6>
 80062fa:	2001      	movs	r0, #1
 80062fc:	e76f      	b.n	80061de <_dtoa_r+0x7f6>
 80062fe:	f04f 0800 	mov.w	r8, #0
 8006302:	e7f6      	b.n	80062f2 <_dtoa_r+0x90a>
 8006304:	4698      	mov	r8, r3
 8006306:	e7f4      	b.n	80062f2 <_dtoa_r+0x90a>
 8006308:	f43f af7d 	beq.w	8006206 <_dtoa_r+0x81e>
 800630c:	4618      	mov	r0, r3
 800630e:	301c      	adds	r0, #28
 8006310:	e772      	b.n	80061f8 <_dtoa_r+0x810>
 8006312:	9b08      	ldr	r3, [sp, #32]
 8006314:	2b00      	cmp	r3, #0
 8006316:	dc36      	bgt.n	8006386 <_dtoa_r+0x99e>
 8006318:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800631a:	2b02      	cmp	r3, #2
 800631c:	dd33      	ble.n	8006386 <_dtoa_r+0x99e>
 800631e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006322:	f1b9 0f00 	cmp.w	r9, #0
 8006326:	d10d      	bne.n	8006344 <_dtoa_r+0x95c>
 8006328:	4621      	mov	r1, r4
 800632a:	464b      	mov	r3, r9
 800632c:	2205      	movs	r2, #5
 800632e:	4628      	mov	r0, r5
 8006330:	f000 f9d2 	bl	80066d8 <__multadd>
 8006334:	4601      	mov	r1, r0
 8006336:	4604      	mov	r4, r0
 8006338:	4658      	mov	r0, fp
 800633a:	f000 fbe9 	bl	8006b10 <__mcmp>
 800633e:	2800      	cmp	r0, #0
 8006340:	f73f adb8 	bgt.w	8005eb4 <_dtoa_r+0x4cc>
 8006344:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006346:	9f03      	ldr	r7, [sp, #12]
 8006348:	ea6f 0a03 	mvn.w	sl, r3
 800634c:	f04f 0800 	mov.w	r8, #0
 8006350:	4621      	mov	r1, r4
 8006352:	4628      	mov	r0, r5
 8006354:	f000 f99e 	bl	8006694 <_Bfree>
 8006358:	2e00      	cmp	r6, #0
 800635a:	f43f aea7 	beq.w	80060ac <_dtoa_r+0x6c4>
 800635e:	f1b8 0f00 	cmp.w	r8, #0
 8006362:	d005      	beq.n	8006370 <_dtoa_r+0x988>
 8006364:	45b0      	cmp	r8, r6
 8006366:	d003      	beq.n	8006370 <_dtoa_r+0x988>
 8006368:	4641      	mov	r1, r8
 800636a:	4628      	mov	r0, r5
 800636c:	f000 f992 	bl	8006694 <_Bfree>
 8006370:	4631      	mov	r1, r6
 8006372:	4628      	mov	r0, r5
 8006374:	f000 f98e 	bl	8006694 <_Bfree>
 8006378:	e698      	b.n	80060ac <_dtoa_r+0x6c4>
 800637a:	2400      	movs	r4, #0
 800637c:	4626      	mov	r6, r4
 800637e:	e7e1      	b.n	8006344 <_dtoa_r+0x95c>
 8006380:	46c2      	mov	sl, r8
 8006382:	4626      	mov	r6, r4
 8006384:	e596      	b.n	8005eb4 <_dtoa_r+0x4cc>
 8006386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006388:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 80fd 	beq.w	800658c <_dtoa_r+0xba4>
 8006392:	2f00      	cmp	r7, #0
 8006394:	dd05      	ble.n	80063a2 <_dtoa_r+0x9ba>
 8006396:	4631      	mov	r1, r6
 8006398:	463a      	mov	r2, r7
 800639a:	4628      	mov	r0, r5
 800639c:	f000 fb48 	bl	8006a30 <__lshift>
 80063a0:	4606      	mov	r6, r0
 80063a2:	f1b8 0f00 	cmp.w	r8, #0
 80063a6:	d05c      	beq.n	8006462 <_dtoa_r+0xa7a>
 80063a8:	4628      	mov	r0, r5
 80063aa:	6871      	ldr	r1, [r6, #4]
 80063ac:	f000 f932 	bl	8006614 <_Balloc>
 80063b0:	4607      	mov	r7, r0
 80063b2:	b928      	cbnz	r0, 80063c0 <_dtoa_r+0x9d8>
 80063b4:	4602      	mov	r2, r0
 80063b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80063ba:	4b7f      	ldr	r3, [pc, #508]	; (80065b8 <_dtoa_r+0xbd0>)
 80063bc:	f7ff bb28 	b.w	8005a10 <_dtoa_r+0x28>
 80063c0:	6932      	ldr	r2, [r6, #16]
 80063c2:	f106 010c 	add.w	r1, r6, #12
 80063c6:	3202      	adds	r2, #2
 80063c8:	0092      	lsls	r2, r2, #2
 80063ca:	300c      	adds	r0, #12
 80063cc:	f000 f914 	bl	80065f8 <memcpy>
 80063d0:	2201      	movs	r2, #1
 80063d2:	4639      	mov	r1, r7
 80063d4:	4628      	mov	r0, r5
 80063d6:	f000 fb2b 	bl	8006a30 <__lshift>
 80063da:	46b0      	mov	r8, r6
 80063dc:	4606      	mov	r6, r0
 80063de:	9b03      	ldr	r3, [sp, #12]
 80063e0:	3301      	adds	r3, #1
 80063e2:	9308      	str	r3, [sp, #32]
 80063e4:	9b03      	ldr	r3, [sp, #12]
 80063e6:	444b      	add	r3, r9
 80063e8:	930a      	str	r3, [sp, #40]	; 0x28
 80063ea:	9b04      	ldr	r3, [sp, #16]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	9309      	str	r3, [sp, #36]	; 0x24
 80063f2:	9b08      	ldr	r3, [sp, #32]
 80063f4:	4621      	mov	r1, r4
 80063f6:	3b01      	subs	r3, #1
 80063f8:	4658      	mov	r0, fp
 80063fa:	9304      	str	r3, [sp, #16]
 80063fc:	f7ff fa68 	bl	80058d0 <quorem>
 8006400:	4603      	mov	r3, r0
 8006402:	4641      	mov	r1, r8
 8006404:	3330      	adds	r3, #48	; 0x30
 8006406:	9006      	str	r0, [sp, #24]
 8006408:	4658      	mov	r0, fp
 800640a:	930b      	str	r3, [sp, #44]	; 0x2c
 800640c:	f000 fb80 	bl	8006b10 <__mcmp>
 8006410:	4632      	mov	r2, r6
 8006412:	4681      	mov	r9, r0
 8006414:	4621      	mov	r1, r4
 8006416:	4628      	mov	r0, r5
 8006418:	f000 fb96 	bl	8006b48 <__mdiff>
 800641c:	68c2      	ldr	r2, [r0, #12]
 800641e:	4607      	mov	r7, r0
 8006420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006422:	bb02      	cbnz	r2, 8006466 <_dtoa_r+0xa7e>
 8006424:	4601      	mov	r1, r0
 8006426:	4658      	mov	r0, fp
 8006428:	f000 fb72 	bl	8006b10 <__mcmp>
 800642c:	4602      	mov	r2, r0
 800642e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006430:	4639      	mov	r1, r7
 8006432:	4628      	mov	r0, r5
 8006434:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006438:	f000 f92c 	bl	8006694 <_Bfree>
 800643c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800643e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006440:	9f08      	ldr	r7, [sp, #32]
 8006442:	ea43 0102 	orr.w	r1, r3, r2
 8006446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006448:	430b      	orrs	r3, r1
 800644a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800644c:	d10d      	bne.n	800646a <_dtoa_r+0xa82>
 800644e:	2b39      	cmp	r3, #57	; 0x39
 8006450:	d029      	beq.n	80064a6 <_dtoa_r+0xabe>
 8006452:	f1b9 0f00 	cmp.w	r9, #0
 8006456:	dd01      	ble.n	800645c <_dtoa_r+0xa74>
 8006458:	9b06      	ldr	r3, [sp, #24]
 800645a:	3331      	adds	r3, #49	; 0x31
 800645c:	9a04      	ldr	r2, [sp, #16]
 800645e:	7013      	strb	r3, [r2, #0]
 8006460:	e776      	b.n	8006350 <_dtoa_r+0x968>
 8006462:	4630      	mov	r0, r6
 8006464:	e7b9      	b.n	80063da <_dtoa_r+0x9f2>
 8006466:	2201      	movs	r2, #1
 8006468:	e7e2      	b.n	8006430 <_dtoa_r+0xa48>
 800646a:	f1b9 0f00 	cmp.w	r9, #0
 800646e:	db06      	blt.n	800647e <_dtoa_r+0xa96>
 8006470:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006472:	ea41 0909 	orr.w	r9, r1, r9
 8006476:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006478:	ea59 0101 	orrs.w	r1, r9, r1
 800647c:	d120      	bne.n	80064c0 <_dtoa_r+0xad8>
 800647e:	2a00      	cmp	r2, #0
 8006480:	ddec      	ble.n	800645c <_dtoa_r+0xa74>
 8006482:	4659      	mov	r1, fp
 8006484:	2201      	movs	r2, #1
 8006486:	4628      	mov	r0, r5
 8006488:	9308      	str	r3, [sp, #32]
 800648a:	f000 fad1 	bl	8006a30 <__lshift>
 800648e:	4621      	mov	r1, r4
 8006490:	4683      	mov	fp, r0
 8006492:	f000 fb3d 	bl	8006b10 <__mcmp>
 8006496:	2800      	cmp	r0, #0
 8006498:	9b08      	ldr	r3, [sp, #32]
 800649a:	dc02      	bgt.n	80064a2 <_dtoa_r+0xaba>
 800649c:	d1de      	bne.n	800645c <_dtoa_r+0xa74>
 800649e:	07da      	lsls	r2, r3, #31
 80064a0:	d5dc      	bpl.n	800645c <_dtoa_r+0xa74>
 80064a2:	2b39      	cmp	r3, #57	; 0x39
 80064a4:	d1d8      	bne.n	8006458 <_dtoa_r+0xa70>
 80064a6:	2339      	movs	r3, #57	; 0x39
 80064a8:	9a04      	ldr	r2, [sp, #16]
 80064aa:	7013      	strb	r3, [r2, #0]
 80064ac:	463b      	mov	r3, r7
 80064ae:	461f      	mov	r7, r3
 80064b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	2a39      	cmp	r2, #57	; 0x39
 80064b8:	d050      	beq.n	800655c <_dtoa_r+0xb74>
 80064ba:	3201      	adds	r2, #1
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	e747      	b.n	8006350 <_dtoa_r+0x968>
 80064c0:	2a00      	cmp	r2, #0
 80064c2:	dd03      	ble.n	80064cc <_dtoa_r+0xae4>
 80064c4:	2b39      	cmp	r3, #57	; 0x39
 80064c6:	d0ee      	beq.n	80064a6 <_dtoa_r+0xabe>
 80064c8:	3301      	adds	r3, #1
 80064ca:	e7c7      	b.n	800645c <_dtoa_r+0xa74>
 80064cc:	9a08      	ldr	r2, [sp, #32]
 80064ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80064d4:	428a      	cmp	r2, r1
 80064d6:	d02a      	beq.n	800652e <_dtoa_r+0xb46>
 80064d8:	4659      	mov	r1, fp
 80064da:	2300      	movs	r3, #0
 80064dc:	220a      	movs	r2, #10
 80064de:	4628      	mov	r0, r5
 80064e0:	f000 f8fa 	bl	80066d8 <__multadd>
 80064e4:	45b0      	cmp	r8, r6
 80064e6:	4683      	mov	fp, r0
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	f04f 020a 	mov.w	r2, #10
 80064f0:	4641      	mov	r1, r8
 80064f2:	4628      	mov	r0, r5
 80064f4:	d107      	bne.n	8006506 <_dtoa_r+0xb1e>
 80064f6:	f000 f8ef 	bl	80066d8 <__multadd>
 80064fa:	4680      	mov	r8, r0
 80064fc:	4606      	mov	r6, r0
 80064fe:	9b08      	ldr	r3, [sp, #32]
 8006500:	3301      	adds	r3, #1
 8006502:	9308      	str	r3, [sp, #32]
 8006504:	e775      	b.n	80063f2 <_dtoa_r+0xa0a>
 8006506:	f000 f8e7 	bl	80066d8 <__multadd>
 800650a:	4631      	mov	r1, r6
 800650c:	4680      	mov	r8, r0
 800650e:	2300      	movs	r3, #0
 8006510:	220a      	movs	r2, #10
 8006512:	4628      	mov	r0, r5
 8006514:	f000 f8e0 	bl	80066d8 <__multadd>
 8006518:	4606      	mov	r6, r0
 800651a:	e7f0      	b.n	80064fe <_dtoa_r+0xb16>
 800651c:	f1b9 0f00 	cmp.w	r9, #0
 8006520:	bfcc      	ite	gt
 8006522:	464f      	movgt	r7, r9
 8006524:	2701      	movle	r7, #1
 8006526:	f04f 0800 	mov.w	r8, #0
 800652a:	9a03      	ldr	r2, [sp, #12]
 800652c:	4417      	add	r7, r2
 800652e:	4659      	mov	r1, fp
 8006530:	2201      	movs	r2, #1
 8006532:	4628      	mov	r0, r5
 8006534:	9308      	str	r3, [sp, #32]
 8006536:	f000 fa7b 	bl	8006a30 <__lshift>
 800653a:	4621      	mov	r1, r4
 800653c:	4683      	mov	fp, r0
 800653e:	f000 fae7 	bl	8006b10 <__mcmp>
 8006542:	2800      	cmp	r0, #0
 8006544:	dcb2      	bgt.n	80064ac <_dtoa_r+0xac4>
 8006546:	d102      	bne.n	800654e <_dtoa_r+0xb66>
 8006548:	9b08      	ldr	r3, [sp, #32]
 800654a:	07db      	lsls	r3, r3, #31
 800654c:	d4ae      	bmi.n	80064ac <_dtoa_r+0xac4>
 800654e:	463b      	mov	r3, r7
 8006550:	461f      	mov	r7, r3
 8006552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006556:	2a30      	cmp	r2, #48	; 0x30
 8006558:	d0fa      	beq.n	8006550 <_dtoa_r+0xb68>
 800655a:	e6f9      	b.n	8006350 <_dtoa_r+0x968>
 800655c:	9a03      	ldr	r2, [sp, #12]
 800655e:	429a      	cmp	r2, r3
 8006560:	d1a5      	bne.n	80064ae <_dtoa_r+0xac6>
 8006562:	2331      	movs	r3, #49	; 0x31
 8006564:	f10a 0a01 	add.w	sl, sl, #1
 8006568:	e779      	b.n	800645e <_dtoa_r+0xa76>
 800656a:	4b14      	ldr	r3, [pc, #80]	; (80065bc <_dtoa_r+0xbd4>)
 800656c:	f7ff baa8 	b.w	8005ac0 <_dtoa_r+0xd8>
 8006570:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006572:	2b00      	cmp	r3, #0
 8006574:	f47f aa81 	bne.w	8005a7a <_dtoa_r+0x92>
 8006578:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <_dtoa_r+0xbd8>)
 800657a:	f7ff baa1 	b.w	8005ac0 <_dtoa_r+0xd8>
 800657e:	f1b9 0f00 	cmp.w	r9, #0
 8006582:	dc03      	bgt.n	800658c <_dtoa_r+0xba4>
 8006584:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006586:	2b02      	cmp	r3, #2
 8006588:	f73f aecb 	bgt.w	8006322 <_dtoa_r+0x93a>
 800658c:	9f03      	ldr	r7, [sp, #12]
 800658e:	4621      	mov	r1, r4
 8006590:	4658      	mov	r0, fp
 8006592:	f7ff f99d 	bl	80058d0 <quorem>
 8006596:	9a03      	ldr	r2, [sp, #12]
 8006598:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800659c:	f807 3b01 	strb.w	r3, [r7], #1
 80065a0:	1aba      	subs	r2, r7, r2
 80065a2:	4591      	cmp	r9, r2
 80065a4:	ddba      	ble.n	800651c <_dtoa_r+0xb34>
 80065a6:	4659      	mov	r1, fp
 80065a8:	2300      	movs	r3, #0
 80065aa:	220a      	movs	r2, #10
 80065ac:	4628      	mov	r0, r5
 80065ae:	f000 f893 	bl	80066d8 <__multadd>
 80065b2:	4683      	mov	fp, r0
 80065b4:	e7eb      	b.n	800658e <_dtoa_r+0xba6>
 80065b6:	bf00      	nop
 80065b8:	0800835b 	.word	0x0800835b
 80065bc:	080082b8 	.word	0x080082b8
 80065c0:	080082dc 	.word	0x080082dc

080065c4 <_localeconv_r>:
 80065c4:	4800      	ldr	r0, [pc, #0]	; (80065c8 <_localeconv_r+0x4>)
 80065c6:	4770      	bx	lr
 80065c8:	20000190 	.word	0x20000190

080065cc <malloc>:
 80065cc:	4b02      	ldr	r3, [pc, #8]	; (80065d8 <malloc+0xc>)
 80065ce:	4601      	mov	r1, r0
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	f000 bc1d 	b.w	8006e10 <_malloc_r>
 80065d6:	bf00      	nop
 80065d8:	2000003c 	.word	0x2000003c

080065dc <memchr>:
 80065dc:	4603      	mov	r3, r0
 80065de:	b510      	push	{r4, lr}
 80065e0:	b2c9      	uxtb	r1, r1
 80065e2:	4402      	add	r2, r0
 80065e4:	4293      	cmp	r3, r2
 80065e6:	4618      	mov	r0, r3
 80065e8:	d101      	bne.n	80065ee <memchr+0x12>
 80065ea:	2000      	movs	r0, #0
 80065ec:	e003      	b.n	80065f6 <memchr+0x1a>
 80065ee:	7804      	ldrb	r4, [r0, #0]
 80065f0:	3301      	adds	r3, #1
 80065f2:	428c      	cmp	r4, r1
 80065f4:	d1f6      	bne.n	80065e4 <memchr+0x8>
 80065f6:	bd10      	pop	{r4, pc}

080065f8 <memcpy>:
 80065f8:	440a      	add	r2, r1
 80065fa:	4291      	cmp	r1, r2
 80065fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006600:	d100      	bne.n	8006604 <memcpy+0xc>
 8006602:	4770      	bx	lr
 8006604:	b510      	push	{r4, lr}
 8006606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800660a:	4291      	cmp	r1, r2
 800660c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006610:	d1f9      	bne.n	8006606 <memcpy+0xe>
 8006612:	bd10      	pop	{r4, pc}

08006614 <_Balloc>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006618:	4604      	mov	r4, r0
 800661a:	460d      	mov	r5, r1
 800661c:	b976      	cbnz	r6, 800663c <_Balloc+0x28>
 800661e:	2010      	movs	r0, #16
 8006620:	f7ff ffd4 	bl	80065cc <malloc>
 8006624:	4602      	mov	r2, r0
 8006626:	6260      	str	r0, [r4, #36]	; 0x24
 8006628:	b920      	cbnz	r0, 8006634 <_Balloc+0x20>
 800662a:	2166      	movs	r1, #102	; 0x66
 800662c:	4b17      	ldr	r3, [pc, #92]	; (800668c <_Balloc+0x78>)
 800662e:	4818      	ldr	r0, [pc, #96]	; (8006690 <_Balloc+0x7c>)
 8006630:	f000 fdce 	bl	80071d0 <__assert_func>
 8006634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006638:	6006      	str	r6, [r0, #0]
 800663a:	60c6      	str	r6, [r0, #12]
 800663c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800663e:	68f3      	ldr	r3, [r6, #12]
 8006640:	b183      	cbz	r3, 8006664 <_Balloc+0x50>
 8006642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800664a:	b9b8      	cbnz	r0, 800667c <_Balloc+0x68>
 800664c:	2101      	movs	r1, #1
 800664e:	fa01 f605 	lsl.w	r6, r1, r5
 8006652:	1d72      	adds	r2, r6, #5
 8006654:	4620      	mov	r0, r4
 8006656:	0092      	lsls	r2, r2, #2
 8006658:	f000 fb5e 	bl	8006d18 <_calloc_r>
 800665c:	b160      	cbz	r0, 8006678 <_Balloc+0x64>
 800665e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006662:	e00e      	b.n	8006682 <_Balloc+0x6e>
 8006664:	2221      	movs	r2, #33	; 0x21
 8006666:	2104      	movs	r1, #4
 8006668:	4620      	mov	r0, r4
 800666a:	f000 fb55 	bl	8006d18 <_calloc_r>
 800666e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006670:	60f0      	str	r0, [r6, #12]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e4      	bne.n	8006642 <_Balloc+0x2e>
 8006678:	2000      	movs	r0, #0
 800667a:	bd70      	pop	{r4, r5, r6, pc}
 800667c:	6802      	ldr	r2, [r0, #0]
 800667e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006682:	2300      	movs	r3, #0
 8006684:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006688:	e7f7      	b.n	800667a <_Balloc+0x66>
 800668a:	bf00      	nop
 800668c:	080082e9 	.word	0x080082e9
 8006690:	0800836c 	.word	0x0800836c

08006694 <_Bfree>:
 8006694:	b570      	push	{r4, r5, r6, lr}
 8006696:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006698:	4605      	mov	r5, r0
 800669a:	460c      	mov	r4, r1
 800669c:	b976      	cbnz	r6, 80066bc <_Bfree+0x28>
 800669e:	2010      	movs	r0, #16
 80066a0:	f7ff ff94 	bl	80065cc <malloc>
 80066a4:	4602      	mov	r2, r0
 80066a6:	6268      	str	r0, [r5, #36]	; 0x24
 80066a8:	b920      	cbnz	r0, 80066b4 <_Bfree+0x20>
 80066aa:	218a      	movs	r1, #138	; 0x8a
 80066ac:	4b08      	ldr	r3, [pc, #32]	; (80066d0 <_Bfree+0x3c>)
 80066ae:	4809      	ldr	r0, [pc, #36]	; (80066d4 <_Bfree+0x40>)
 80066b0:	f000 fd8e 	bl	80071d0 <__assert_func>
 80066b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066b8:	6006      	str	r6, [r0, #0]
 80066ba:	60c6      	str	r6, [r0, #12]
 80066bc:	b13c      	cbz	r4, 80066ce <_Bfree+0x3a>
 80066be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80066c0:	6862      	ldr	r2, [r4, #4]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066c8:	6021      	str	r1, [r4, #0]
 80066ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066ce:	bd70      	pop	{r4, r5, r6, pc}
 80066d0:	080082e9 	.word	0x080082e9
 80066d4:	0800836c 	.word	0x0800836c

080066d8 <__multadd>:
 80066d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066dc:	4607      	mov	r7, r0
 80066de:	460c      	mov	r4, r1
 80066e0:	461e      	mov	r6, r3
 80066e2:	2000      	movs	r0, #0
 80066e4:	690d      	ldr	r5, [r1, #16]
 80066e6:	f101 0c14 	add.w	ip, r1, #20
 80066ea:	f8dc 3000 	ldr.w	r3, [ip]
 80066ee:	3001      	adds	r0, #1
 80066f0:	b299      	uxth	r1, r3
 80066f2:	fb02 6101 	mla	r1, r2, r1, r6
 80066f6:	0c1e      	lsrs	r6, r3, #16
 80066f8:	0c0b      	lsrs	r3, r1, #16
 80066fa:	fb02 3306 	mla	r3, r2, r6, r3
 80066fe:	b289      	uxth	r1, r1
 8006700:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006704:	4285      	cmp	r5, r0
 8006706:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800670a:	f84c 1b04 	str.w	r1, [ip], #4
 800670e:	dcec      	bgt.n	80066ea <__multadd+0x12>
 8006710:	b30e      	cbz	r6, 8006756 <__multadd+0x7e>
 8006712:	68a3      	ldr	r3, [r4, #8]
 8006714:	42ab      	cmp	r3, r5
 8006716:	dc19      	bgt.n	800674c <__multadd+0x74>
 8006718:	6861      	ldr	r1, [r4, #4]
 800671a:	4638      	mov	r0, r7
 800671c:	3101      	adds	r1, #1
 800671e:	f7ff ff79 	bl	8006614 <_Balloc>
 8006722:	4680      	mov	r8, r0
 8006724:	b928      	cbnz	r0, 8006732 <__multadd+0x5a>
 8006726:	4602      	mov	r2, r0
 8006728:	21b5      	movs	r1, #181	; 0xb5
 800672a:	4b0c      	ldr	r3, [pc, #48]	; (800675c <__multadd+0x84>)
 800672c:	480c      	ldr	r0, [pc, #48]	; (8006760 <__multadd+0x88>)
 800672e:	f000 fd4f 	bl	80071d0 <__assert_func>
 8006732:	6922      	ldr	r2, [r4, #16]
 8006734:	f104 010c 	add.w	r1, r4, #12
 8006738:	3202      	adds	r2, #2
 800673a:	0092      	lsls	r2, r2, #2
 800673c:	300c      	adds	r0, #12
 800673e:	f7ff ff5b 	bl	80065f8 <memcpy>
 8006742:	4621      	mov	r1, r4
 8006744:	4638      	mov	r0, r7
 8006746:	f7ff ffa5 	bl	8006694 <_Bfree>
 800674a:	4644      	mov	r4, r8
 800674c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006750:	3501      	adds	r5, #1
 8006752:	615e      	str	r6, [r3, #20]
 8006754:	6125      	str	r5, [r4, #16]
 8006756:	4620      	mov	r0, r4
 8006758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800675c:	0800835b 	.word	0x0800835b
 8006760:	0800836c 	.word	0x0800836c

08006764 <__hi0bits>:
 8006764:	0c02      	lsrs	r2, r0, #16
 8006766:	0412      	lsls	r2, r2, #16
 8006768:	4603      	mov	r3, r0
 800676a:	b9ca      	cbnz	r2, 80067a0 <__hi0bits+0x3c>
 800676c:	0403      	lsls	r3, r0, #16
 800676e:	2010      	movs	r0, #16
 8006770:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006774:	bf04      	itt	eq
 8006776:	021b      	lsleq	r3, r3, #8
 8006778:	3008      	addeq	r0, #8
 800677a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800677e:	bf04      	itt	eq
 8006780:	011b      	lsleq	r3, r3, #4
 8006782:	3004      	addeq	r0, #4
 8006784:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006788:	bf04      	itt	eq
 800678a:	009b      	lsleq	r3, r3, #2
 800678c:	3002      	addeq	r0, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	db05      	blt.n	800679e <__hi0bits+0x3a>
 8006792:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006796:	f100 0001 	add.w	r0, r0, #1
 800679a:	bf08      	it	eq
 800679c:	2020      	moveq	r0, #32
 800679e:	4770      	bx	lr
 80067a0:	2000      	movs	r0, #0
 80067a2:	e7e5      	b.n	8006770 <__hi0bits+0xc>

080067a4 <__lo0bits>:
 80067a4:	6803      	ldr	r3, [r0, #0]
 80067a6:	4602      	mov	r2, r0
 80067a8:	f013 0007 	ands.w	r0, r3, #7
 80067ac:	d00b      	beq.n	80067c6 <__lo0bits+0x22>
 80067ae:	07d9      	lsls	r1, r3, #31
 80067b0:	d421      	bmi.n	80067f6 <__lo0bits+0x52>
 80067b2:	0798      	lsls	r0, r3, #30
 80067b4:	bf49      	itett	mi
 80067b6:	085b      	lsrmi	r3, r3, #1
 80067b8:	089b      	lsrpl	r3, r3, #2
 80067ba:	2001      	movmi	r0, #1
 80067bc:	6013      	strmi	r3, [r2, #0]
 80067be:	bf5c      	itt	pl
 80067c0:	2002      	movpl	r0, #2
 80067c2:	6013      	strpl	r3, [r2, #0]
 80067c4:	4770      	bx	lr
 80067c6:	b299      	uxth	r1, r3
 80067c8:	b909      	cbnz	r1, 80067ce <__lo0bits+0x2a>
 80067ca:	2010      	movs	r0, #16
 80067cc:	0c1b      	lsrs	r3, r3, #16
 80067ce:	b2d9      	uxtb	r1, r3
 80067d0:	b909      	cbnz	r1, 80067d6 <__lo0bits+0x32>
 80067d2:	3008      	adds	r0, #8
 80067d4:	0a1b      	lsrs	r3, r3, #8
 80067d6:	0719      	lsls	r1, r3, #28
 80067d8:	bf04      	itt	eq
 80067da:	091b      	lsreq	r3, r3, #4
 80067dc:	3004      	addeq	r0, #4
 80067de:	0799      	lsls	r1, r3, #30
 80067e0:	bf04      	itt	eq
 80067e2:	089b      	lsreq	r3, r3, #2
 80067e4:	3002      	addeq	r0, #2
 80067e6:	07d9      	lsls	r1, r3, #31
 80067e8:	d403      	bmi.n	80067f2 <__lo0bits+0x4e>
 80067ea:	085b      	lsrs	r3, r3, #1
 80067ec:	f100 0001 	add.w	r0, r0, #1
 80067f0:	d003      	beq.n	80067fa <__lo0bits+0x56>
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	4770      	bx	lr
 80067f6:	2000      	movs	r0, #0
 80067f8:	4770      	bx	lr
 80067fa:	2020      	movs	r0, #32
 80067fc:	4770      	bx	lr
	...

08006800 <__i2b>:
 8006800:	b510      	push	{r4, lr}
 8006802:	460c      	mov	r4, r1
 8006804:	2101      	movs	r1, #1
 8006806:	f7ff ff05 	bl	8006614 <_Balloc>
 800680a:	4602      	mov	r2, r0
 800680c:	b928      	cbnz	r0, 800681a <__i2b+0x1a>
 800680e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006812:	4b04      	ldr	r3, [pc, #16]	; (8006824 <__i2b+0x24>)
 8006814:	4804      	ldr	r0, [pc, #16]	; (8006828 <__i2b+0x28>)
 8006816:	f000 fcdb 	bl	80071d0 <__assert_func>
 800681a:	2301      	movs	r3, #1
 800681c:	6144      	str	r4, [r0, #20]
 800681e:	6103      	str	r3, [r0, #16]
 8006820:	bd10      	pop	{r4, pc}
 8006822:	bf00      	nop
 8006824:	0800835b 	.word	0x0800835b
 8006828:	0800836c 	.word	0x0800836c

0800682c <__multiply>:
 800682c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006830:	4691      	mov	r9, r2
 8006832:	690a      	ldr	r2, [r1, #16]
 8006834:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006838:	460c      	mov	r4, r1
 800683a:	429a      	cmp	r2, r3
 800683c:	bfbe      	ittt	lt
 800683e:	460b      	movlt	r3, r1
 8006840:	464c      	movlt	r4, r9
 8006842:	4699      	movlt	r9, r3
 8006844:	6927      	ldr	r7, [r4, #16]
 8006846:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800684a:	68a3      	ldr	r3, [r4, #8]
 800684c:	6861      	ldr	r1, [r4, #4]
 800684e:	eb07 060a 	add.w	r6, r7, sl
 8006852:	42b3      	cmp	r3, r6
 8006854:	b085      	sub	sp, #20
 8006856:	bfb8      	it	lt
 8006858:	3101      	addlt	r1, #1
 800685a:	f7ff fedb 	bl	8006614 <_Balloc>
 800685e:	b930      	cbnz	r0, 800686e <__multiply+0x42>
 8006860:	4602      	mov	r2, r0
 8006862:	f240 115d 	movw	r1, #349	; 0x15d
 8006866:	4b43      	ldr	r3, [pc, #268]	; (8006974 <__multiply+0x148>)
 8006868:	4843      	ldr	r0, [pc, #268]	; (8006978 <__multiply+0x14c>)
 800686a:	f000 fcb1 	bl	80071d0 <__assert_func>
 800686e:	f100 0514 	add.w	r5, r0, #20
 8006872:	462b      	mov	r3, r5
 8006874:	2200      	movs	r2, #0
 8006876:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800687a:	4543      	cmp	r3, r8
 800687c:	d321      	bcc.n	80068c2 <__multiply+0x96>
 800687e:	f104 0314 	add.w	r3, r4, #20
 8006882:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006886:	f109 0314 	add.w	r3, r9, #20
 800688a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800688e:	9202      	str	r2, [sp, #8]
 8006890:	1b3a      	subs	r2, r7, r4
 8006892:	3a15      	subs	r2, #21
 8006894:	f022 0203 	bic.w	r2, r2, #3
 8006898:	3204      	adds	r2, #4
 800689a:	f104 0115 	add.w	r1, r4, #21
 800689e:	428f      	cmp	r7, r1
 80068a0:	bf38      	it	cc
 80068a2:	2204      	movcc	r2, #4
 80068a4:	9201      	str	r2, [sp, #4]
 80068a6:	9a02      	ldr	r2, [sp, #8]
 80068a8:	9303      	str	r3, [sp, #12]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d80c      	bhi.n	80068c8 <__multiply+0x9c>
 80068ae:	2e00      	cmp	r6, #0
 80068b0:	dd03      	ble.n	80068ba <__multiply+0x8e>
 80068b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d059      	beq.n	800696e <__multiply+0x142>
 80068ba:	6106      	str	r6, [r0, #16]
 80068bc:	b005      	add	sp, #20
 80068be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c2:	f843 2b04 	str.w	r2, [r3], #4
 80068c6:	e7d8      	b.n	800687a <__multiply+0x4e>
 80068c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80068cc:	f1ba 0f00 	cmp.w	sl, #0
 80068d0:	d023      	beq.n	800691a <__multiply+0xee>
 80068d2:	46a9      	mov	r9, r5
 80068d4:	f04f 0c00 	mov.w	ip, #0
 80068d8:	f104 0e14 	add.w	lr, r4, #20
 80068dc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80068e0:	f8d9 1000 	ldr.w	r1, [r9]
 80068e4:	fa1f fb82 	uxth.w	fp, r2
 80068e8:	b289      	uxth	r1, r1
 80068ea:	fb0a 110b 	mla	r1, sl, fp, r1
 80068ee:	4461      	add	r1, ip
 80068f0:	f8d9 c000 	ldr.w	ip, [r9]
 80068f4:	0c12      	lsrs	r2, r2, #16
 80068f6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80068fa:	fb0a c202 	mla	r2, sl, r2, ip
 80068fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006902:	b289      	uxth	r1, r1
 8006904:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006908:	4577      	cmp	r7, lr
 800690a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800690e:	f849 1b04 	str.w	r1, [r9], #4
 8006912:	d8e3      	bhi.n	80068dc <__multiply+0xb0>
 8006914:	9a01      	ldr	r2, [sp, #4]
 8006916:	f845 c002 	str.w	ip, [r5, r2]
 800691a:	9a03      	ldr	r2, [sp, #12]
 800691c:	3304      	adds	r3, #4
 800691e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006922:	f1b9 0f00 	cmp.w	r9, #0
 8006926:	d020      	beq.n	800696a <__multiply+0x13e>
 8006928:	46ae      	mov	lr, r5
 800692a:	f04f 0a00 	mov.w	sl, #0
 800692e:	6829      	ldr	r1, [r5, #0]
 8006930:	f104 0c14 	add.w	ip, r4, #20
 8006934:	f8bc b000 	ldrh.w	fp, [ip]
 8006938:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800693c:	b289      	uxth	r1, r1
 800693e:	fb09 220b 	mla	r2, r9, fp, r2
 8006942:	4492      	add	sl, r2
 8006944:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006948:	f84e 1b04 	str.w	r1, [lr], #4
 800694c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006950:	f8be 1000 	ldrh.w	r1, [lr]
 8006954:	0c12      	lsrs	r2, r2, #16
 8006956:	fb09 1102 	mla	r1, r9, r2, r1
 800695a:	4567      	cmp	r7, ip
 800695c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006960:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006964:	d8e6      	bhi.n	8006934 <__multiply+0x108>
 8006966:	9a01      	ldr	r2, [sp, #4]
 8006968:	50a9      	str	r1, [r5, r2]
 800696a:	3504      	adds	r5, #4
 800696c:	e79b      	b.n	80068a6 <__multiply+0x7a>
 800696e:	3e01      	subs	r6, #1
 8006970:	e79d      	b.n	80068ae <__multiply+0x82>
 8006972:	bf00      	nop
 8006974:	0800835b 	.word	0x0800835b
 8006978:	0800836c 	.word	0x0800836c

0800697c <__pow5mult>:
 800697c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006980:	4615      	mov	r5, r2
 8006982:	f012 0203 	ands.w	r2, r2, #3
 8006986:	4606      	mov	r6, r0
 8006988:	460f      	mov	r7, r1
 800698a:	d007      	beq.n	800699c <__pow5mult+0x20>
 800698c:	4c25      	ldr	r4, [pc, #148]	; (8006a24 <__pow5mult+0xa8>)
 800698e:	3a01      	subs	r2, #1
 8006990:	2300      	movs	r3, #0
 8006992:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006996:	f7ff fe9f 	bl	80066d8 <__multadd>
 800699a:	4607      	mov	r7, r0
 800699c:	10ad      	asrs	r5, r5, #2
 800699e:	d03d      	beq.n	8006a1c <__pow5mult+0xa0>
 80069a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80069a2:	b97c      	cbnz	r4, 80069c4 <__pow5mult+0x48>
 80069a4:	2010      	movs	r0, #16
 80069a6:	f7ff fe11 	bl	80065cc <malloc>
 80069aa:	4602      	mov	r2, r0
 80069ac:	6270      	str	r0, [r6, #36]	; 0x24
 80069ae:	b928      	cbnz	r0, 80069bc <__pow5mult+0x40>
 80069b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80069b4:	4b1c      	ldr	r3, [pc, #112]	; (8006a28 <__pow5mult+0xac>)
 80069b6:	481d      	ldr	r0, [pc, #116]	; (8006a2c <__pow5mult+0xb0>)
 80069b8:	f000 fc0a 	bl	80071d0 <__assert_func>
 80069bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069c0:	6004      	str	r4, [r0, #0]
 80069c2:	60c4      	str	r4, [r0, #12]
 80069c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80069c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069cc:	b94c      	cbnz	r4, 80069e2 <__pow5mult+0x66>
 80069ce:	f240 2171 	movw	r1, #625	; 0x271
 80069d2:	4630      	mov	r0, r6
 80069d4:	f7ff ff14 	bl	8006800 <__i2b>
 80069d8:	2300      	movs	r3, #0
 80069da:	4604      	mov	r4, r0
 80069dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80069e0:	6003      	str	r3, [r0, #0]
 80069e2:	f04f 0900 	mov.w	r9, #0
 80069e6:	07eb      	lsls	r3, r5, #31
 80069e8:	d50a      	bpl.n	8006a00 <__pow5mult+0x84>
 80069ea:	4639      	mov	r1, r7
 80069ec:	4622      	mov	r2, r4
 80069ee:	4630      	mov	r0, r6
 80069f0:	f7ff ff1c 	bl	800682c <__multiply>
 80069f4:	4680      	mov	r8, r0
 80069f6:	4639      	mov	r1, r7
 80069f8:	4630      	mov	r0, r6
 80069fa:	f7ff fe4b 	bl	8006694 <_Bfree>
 80069fe:	4647      	mov	r7, r8
 8006a00:	106d      	asrs	r5, r5, #1
 8006a02:	d00b      	beq.n	8006a1c <__pow5mult+0xa0>
 8006a04:	6820      	ldr	r0, [r4, #0]
 8006a06:	b938      	cbnz	r0, 8006a18 <__pow5mult+0x9c>
 8006a08:	4622      	mov	r2, r4
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f7ff ff0d 	bl	800682c <__multiply>
 8006a12:	6020      	str	r0, [r4, #0]
 8006a14:	f8c0 9000 	str.w	r9, [r0]
 8006a18:	4604      	mov	r4, r0
 8006a1a:	e7e4      	b.n	80069e6 <__pow5mult+0x6a>
 8006a1c:	4638      	mov	r0, r7
 8006a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a22:	bf00      	nop
 8006a24:	080084b8 	.word	0x080084b8
 8006a28:	080082e9 	.word	0x080082e9
 8006a2c:	0800836c 	.word	0x0800836c

08006a30 <__lshift>:
 8006a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a34:	460c      	mov	r4, r1
 8006a36:	4607      	mov	r7, r0
 8006a38:	4691      	mov	r9, r2
 8006a3a:	6923      	ldr	r3, [r4, #16]
 8006a3c:	6849      	ldr	r1, [r1, #4]
 8006a3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a42:	68a3      	ldr	r3, [r4, #8]
 8006a44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a48:	f108 0601 	add.w	r6, r8, #1
 8006a4c:	42b3      	cmp	r3, r6
 8006a4e:	db0b      	blt.n	8006a68 <__lshift+0x38>
 8006a50:	4638      	mov	r0, r7
 8006a52:	f7ff fddf 	bl	8006614 <_Balloc>
 8006a56:	4605      	mov	r5, r0
 8006a58:	b948      	cbnz	r0, 8006a6e <__lshift+0x3e>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a60:	4b29      	ldr	r3, [pc, #164]	; (8006b08 <__lshift+0xd8>)
 8006a62:	482a      	ldr	r0, [pc, #168]	; (8006b0c <__lshift+0xdc>)
 8006a64:	f000 fbb4 	bl	80071d0 <__assert_func>
 8006a68:	3101      	adds	r1, #1
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	e7ee      	b.n	8006a4c <__lshift+0x1c>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f100 0114 	add.w	r1, r0, #20
 8006a74:	f100 0210 	add.w	r2, r0, #16
 8006a78:	4618      	mov	r0, r3
 8006a7a:	4553      	cmp	r3, sl
 8006a7c:	db37      	blt.n	8006aee <__lshift+0xbe>
 8006a7e:	6920      	ldr	r0, [r4, #16]
 8006a80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a84:	f104 0314 	add.w	r3, r4, #20
 8006a88:	f019 091f 	ands.w	r9, r9, #31
 8006a8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006a94:	d02f      	beq.n	8006af6 <__lshift+0xc6>
 8006a96:	468a      	mov	sl, r1
 8006a98:	f04f 0c00 	mov.w	ip, #0
 8006a9c:	f1c9 0e20 	rsb	lr, r9, #32
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	fa02 f209 	lsl.w	r2, r2, r9
 8006aa6:	ea42 020c 	orr.w	r2, r2, ip
 8006aaa:	f84a 2b04 	str.w	r2, [sl], #4
 8006aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ab2:	4298      	cmp	r0, r3
 8006ab4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006ab8:	d8f2      	bhi.n	8006aa0 <__lshift+0x70>
 8006aba:	1b03      	subs	r3, r0, r4
 8006abc:	3b15      	subs	r3, #21
 8006abe:	f023 0303 	bic.w	r3, r3, #3
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	f104 0215 	add.w	r2, r4, #21
 8006ac8:	4290      	cmp	r0, r2
 8006aca:	bf38      	it	cc
 8006acc:	2304      	movcc	r3, #4
 8006ace:	f841 c003 	str.w	ip, [r1, r3]
 8006ad2:	f1bc 0f00 	cmp.w	ip, #0
 8006ad6:	d001      	beq.n	8006adc <__lshift+0xac>
 8006ad8:	f108 0602 	add.w	r6, r8, #2
 8006adc:	3e01      	subs	r6, #1
 8006ade:	4638      	mov	r0, r7
 8006ae0:	4621      	mov	r1, r4
 8006ae2:	612e      	str	r6, [r5, #16]
 8006ae4:	f7ff fdd6 	bl	8006694 <_Bfree>
 8006ae8:	4628      	mov	r0, r5
 8006aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aee:	f842 0f04 	str.w	r0, [r2, #4]!
 8006af2:	3301      	adds	r3, #1
 8006af4:	e7c1      	b.n	8006a7a <__lshift+0x4a>
 8006af6:	3904      	subs	r1, #4
 8006af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006afc:	4298      	cmp	r0, r3
 8006afe:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b02:	d8f9      	bhi.n	8006af8 <__lshift+0xc8>
 8006b04:	e7ea      	b.n	8006adc <__lshift+0xac>
 8006b06:	bf00      	nop
 8006b08:	0800835b 	.word	0x0800835b
 8006b0c:	0800836c 	.word	0x0800836c

08006b10 <__mcmp>:
 8006b10:	4603      	mov	r3, r0
 8006b12:	690a      	ldr	r2, [r1, #16]
 8006b14:	6900      	ldr	r0, [r0, #16]
 8006b16:	b530      	push	{r4, r5, lr}
 8006b18:	1a80      	subs	r0, r0, r2
 8006b1a:	d10d      	bne.n	8006b38 <__mcmp+0x28>
 8006b1c:	3314      	adds	r3, #20
 8006b1e:	3114      	adds	r1, #20
 8006b20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b30:	4295      	cmp	r5, r2
 8006b32:	d002      	beq.n	8006b3a <__mcmp+0x2a>
 8006b34:	d304      	bcc.n	8006b40 <__mcmp+0x30>
 8006b36:	2001      	movs	r0, #1
 8006b38:	bd30      	pop	{r4, r5, pc}
 8006b3a:	42a3      	cmp	r3, r4
 8006b3c:	d3f4      	bcc.n	8006b28 <__mcmp+0x18>
 8006b3e:	e7fb      	b.n	8006b38 <__mcmp+0x28>
 8006b40:	f04f 30ff 	mov.w	r0, #4294967295
 8006b44:	e7f8      	b.n	8006b38 <__mcmp+0x28>
	...

08006b48 <__mdiff>:
 8006b48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4c:	460d      	mov	r5, r1
 8006b4e:	4607      	mov	r7, r0
 8006b50:	4611      	mov	r1, r2
 8006b52:	4628      	mov	r0, r5
 8006b54:	4614      	mov	r4, r2
 8006b56:	f7ff ffdb 	bl	8006b10 <__mcmp>
 8006b5a:	1e06      	subs	r6, r0, #0
 8006b5c:	d111      	bne.n	8006b82 <__mdiff+0x3a>
 8006b5e:	4631      	mov	r1, r6
 8006b60:	4638      	mov	r0, r7
 8006b62:	f7ff fd57 	bl	8006614 <_Balloc>
 8006b66:	4602      	mov	r2, r0
 8006b68:	b928      	cbnz	r0, 8006b76 <__mdiff+0x2e>
 8006b6a:	f240 2132 	movw	r1, #562	; 0x232
 8006b6e:	4b3a      	ldr	r3, [pc, #232]	; (8006c58 <__mdiff+0x110>)
 8006b70:	483a      	ldr	r0, [pc, #232]	; (8006c5c <__mdiff+0x114>)
 8006b72:	f000 fb2d 	bl	80071d0 <__assert_func>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b82:	bfa4      	itt	ge
 8006b84:	4623      	movge	r3, r4
 8006b86:	462c      	movge	r4, r5
 8006b88:	4638      	mov	r0, r7
 8006b8a:	6861      	ldr	r1, [r4, #4]
 8006b8c:	bfa6      	itte	ge
 8006b8e:	461d      	movge	r5, r3
 8006b90:	2600      	movge	r6, #0
 8006b92:	2601      	movlt	r6, #1
 8006b94:	f7ff fd3e 	bl	8006614 <_Balloc>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	b918      	cbnz	r0, 8006ba4 <__mdiff+0x5c>
 8006b9c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ba0:	4b2d      	ldr	r3, [pc, #180]	; (8006c58 <__mdiff+0x110>)
 8006ba2:	e7e5      	b.n	8006b70 <__mdiff+0x28>
 8006ba4:	f102 0814 	add.w	r8, r2, #20
 8006ba8:	46c2      	mov	sl, r8
 8006baa:	f04f 0c00 	mov.w	ip, #0
 8006bae:	6927      	ldr	r7, [r4, #16]
 8006bb0:	60c6      	str	r6, [r0, #12]
 8006bb2:	692e      	ldr	r6, [r5, #16]
 8006bb4:	f104 0014 	add.w	r0, r4, #20
 8006bb8:	f105 0914 	add.w	r9, r5, #20
 8006bbc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006bc0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006bc4:	3410      	adds	r4, #16
 8006bc6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006bca:	f859 3b04 	ldr.w	r3, [r9], #4
 8006bce:	fa1f f18b 	uxth.w	r1, fp
 8006bd2:	448c      	add	ip, r1
 8006bd4:	b299      	uxth	r1, r3
 8006bd6:	0c1b      	lsrs	r3, r3, #16
 8006bd8:	ebac 0101 	sub.w	r1, ip, r1
 8006bdc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006be0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006be4:	b289      	uxth	r1, r1
 8006be6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006bea:	454e      	cmp	r6, r9
 8006bec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006bf0:	f84a 3b04 	str.w	r3, [sl], #4
 8006bf4:	d8e7      	bhi.n	8006bc6 <__mdiff+0x7e>
 8006bf6:	1b73      	subs	r3, r6, r5
 8006bf8:	3b15      	subs	r3, #21
 8006bfa:	f023 0303 	bic.w	r3, r3, #3
 8006bfe:	3515      	adds	r5, #21
 8006c00:	3304      	adds	r3, #4
 8006c02:	42ae      	cmp	r6, r5
 8006c04:	bf38      	it	cc
 8006c06:	2304      	movcc	r3, #4
 8006c08:	4418      	add	r0, r3
 8006c0a:	4443      	add	r3, r8
 8006c0c:	461e      	mov	r6, r3
 8006c0e:	4605      	mov	r5, r0
 8006c10:	4575      	cmp	r5, lr
 8006c12:	d30e      	bcc.n	8006c32 <__mdiff+0xea>
 8006c14:	f10e 0103 	add.w	r1, lr, #3
 8006c18:	1a09      	subs	r1, r1, r0
 8006c1a:	f021 0103 	bic.w	r1, r1, #3
 8006c1e:	3803      	subs	r0, #3
 8006c20:	4586      	cmp	lr, r0
 8006c22:	bf38      	it	cc
 8006c24:	2100      	movcc	r1, #0
 8006c26:	4419      	add	r1, r3
 8006c28:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006c2c:	b18b      	cbz	r3, 8006c52 <__mdiff+0x10a>
 8006c2e:	6117      	str	r7, [r2, #16]
 8006c30:	e7a4      	b.n	8006b7c <__mdiff+0x34>
 8006c32:	f855 8b04 	ldr.w	r8, [r5], #4
 8006c36:	fa1f f188 	uxth.w	r1, r8
 8006c3a:	4461      	add	r1, ip
 8006c3c:	140c      	asrs	r4, r1, #16
 8006c3e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c42:	b289      	uxth	r1, r1
 8006c44:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c48:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006c4c:	f846 1b04 	str.w	r1, [r6], #4
 8006c50:	e7de      	b.n	8006c10 <__mdiff+0xc8>
 8006c52:	3f01      	subs	r7, #1
 8006c54:	e7e8      	b.n	8006c28 <__mdiff+0xe0>
 8006c56:	bf00      	nop
 8006c58:	0800835b 	.word	0x0800835b
 8006c5c:	0800836c 	.word	0x0800836c

08006c60 <__d2b>:
 8006c60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006c64:	2101      	movs	r1, #1
 8006c66:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006c6a:	4690      	mov	r8, r2
 8006c6c:	461d      	mov	r5, r3
 8006c6e:	f7ff fcd1 	bl	8006614 <_Balloc>
 8006c72:	4604      	mov	r4, r0
 8006c74:	b930      	cbnz	r0, 8006c84 <__d2b+0x24>
 8006c76:	4602      	mov	r2, r0
 8006c78:	f240 310a 	movw	r1, #778	; 0x30a
 8006c7c:	4b24      	ldr	r3, [pc, #144]	; (8006d10 <__d2b+0xb0>)
 8006c7e:	4825      	ldr	r0, [pc, #148]	; (8006d14 <__d2b+0xb4>)
 8006c80:	f000 faa6 	bl	80071d0 <__assert_func>
 8006c84:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006c88:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006c8c:	bb2d      	cbnz	r5, 8006cda <__d2b+0x7a>
 8006c8e:	9301      	str	r3, [sp, #4]
 8006c90:	f1b8 0300 	subs.w	r3, r8, #0
 8006c94:	d026      	beq.n	8006ce4 <__d2b+0x84>
 8006c96:	4668      	mov	r0, sp
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	f7ff fd83 	bl	80067a4 <__lo0bits>
 8006c9e:	9900      	ldr	r1, [sp, #0]
 8006ca0:	b1f0      	cbz	r0, 8006ce0 <__d2b+0x80>
 8006ca2:	9a01      	ldr	r2, [sp, #4]
 8006ca4:	f1c0 0320 	rsb	r3, r0, #32
 8006ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cac:	430b      	orrs	r3, r1
 8006cae:	40c2      	lsrs	r2, r0
 8006cb0:	6163      	str	r3, [r4, #20]
 8006cb2:	9201      	str	r2, [sp, #4]
 8006cb4:	9b01      	ldr	r3, [sp, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	bf14      	ite	ne
 8006cba:	2102      	movne	r1, #2
 8006cbc:	2101      	moveq	r1, #1
 8006cbe:	61a3      	str	r3, [r4, #24]
 8006cc0:	6121      	str	r1, [r4, #16]
 8006cc2:	b1c5      	cbz	r5, 8006cf6 <__d2b+0x96>
 8006cc4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006cc8:	4405      	add	r5, r0
 8006cca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006cce:	603d      	str	r5, [r7, #0]
 8006cd0:	6030      	str	r0, [r6, #0]
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	b002      	add	sp, #8
 8006cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cde:	e7d6      	b.n	8006c8e <__d2b+0x2e>
 8006ce0:	6161      	str	r1, [r4, #20]
 8006ce2:	e7e7      	b.n	8006cb4 <__d2b+0x54>
 8006ce4:	a801      	add	r0, sp, #4
 8006ce6:	f7ff fd5d 	bl	80067a4 <__lo0bits>
 8006cea:	2101      	movs	r1, #1
 8006cec:	9b01      	ldr	r3, [sp, #4]
 8006cee:	6121      	str	r1, [r4, #16]
 8006cf0:	6163      	str	r3, [r4, #20]
 8006cf2:	3020      	adds	r0, #32
 8006cf4:	e7e5      	b.n	8006cc2 <__d2b+0x62>
 8006cf6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006cfa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006cfe:	6038      	str	r0, [r7, #0]
 8006d00:	6918      	ldr	r0, [r3, #16]
 8006d02:	f7ff fd2f 	bl	8006764 <__hi0bits>
 8006d06:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006d0a:	6031      	str	r1, [r6, #0]
 8006d0c:	e7e1      	b.n	8006cd2 <__d2b+0x72>
 8006d0e:	bf00      	nop
 8006d10:	0800835b 	.word	0x0800835b
 8006d14:	0800836c 	.word	0x0800836c

08006d18 <_calloc_r>:
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	fba1 5402 	umull	r5, r4, r1, r2
 8006d1e:	b934      	cbnz	r4, 8006d2e <_calloc_r+0x16>
 8006d20:	4629      	mov	r1, r5
 8006d22:	f000 f875 	bl	8006e10 <_malloc_r>
 8006d26:	4606      	mov	r6, r0
 8006d28:	b928      	cbnz	r0, 8006d36 <_calloc_r+0x1e>
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	bd70      	pop	{r4, r5, r6, pc}
 8006d2e:	220c      	movs	r2, #12
 8006d30:	2600      	movs	r6, #0
 8006d32:	6002      	str	r2, [r0, #0]
 8006d34:	e7f9      	b.n	8006d2a <_calloc_r+0x12>
 8006d36:	462a      	mov	r2, r5
 8006d38:	4621      	mov	r1, r4
 8006d3a:	f7fe f941 	bl	8004fc0 <memset>
 8006d3e:	e7f4      	b.n	8006d2a <_calloc_r+0x12>

08006d40 <_free_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4605      	mov	r5, r0
 8006d44:	2900      	cmp	r1, #0
 8006d46:	d040      	beq.n	8006dca <_free_r+0x8a>
 8006d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d4c:	1f0c      	subs	r4, r1, #4
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bfb8      	it	lt
 8006d52:	18e4      	addlt	r4, r4, r3
 8006d54:	f000 fa98 	bl	8007288 <__malloc_lock>
 8006d58:	4a1c      	ldr	r2, [pc, #112]	; (8006dcc <_free_r+0x8c>)
 8006d5a:	6813      	ldr	r3, [r2, #0]
 8006d5c:	b933      	cbnz	r3, 8006d6c <_free_r+0x2c>
 8006d5e:	6063      	str	r3, [r4, #4]
 8006d60:	6014      	str	r4, [r2, #0]
 8006d62:	4628      	mov	r0, r5
 8006d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d68:	f000 ba94 	b.w	8007294 <__malloc_unlock>
 8006d6c:	42a3      	cmp	r3, r4
 8006d6e:	d908      	bls.n	8006d82 <_free_r+0x42>
 8006d70:	6820      	ldr	r0, [r4, #0]
 8006d72:	1821      	adds	r1, r4, r0
 8006d74:	428b      	cmp	r3, r1
 8006d76:	bf01      	itttt	eq
 8006d78:	6819      	ldreq	r1, [r3, #0]
 8006d7a:	685b      	ldreq	r3, [r3, #4]
 8006d7c:	1809      	addeq	r1, r1, r0
 8006d7e:	6021      	streq	r1, [r4, #0]
 8006d80:	e7ed      	b.n	8006d5e <_free_r+0x1e>
 8006d82:	461a      	mov	r2, r3
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	b10b      	cbz	r3, 8006d8c <_free_r+0x4c>
 8006d88:	42a3      	cmp	r3, r4
 8006d8a:	d9fa      	bls.n	8006d82 <_free_r+0x42>
 8006d8c:	6811      	ldr	r1, [r2, #0]
 8006d8e:	1850      	adds	r0, r2, r1
 8006d90:	42a0      	cmp	r0, r4
 8006d92:	d10b      	bne.n	8006dac <_free_r+0x6c>
 8006d94:	6820      	ldr	r0, [r4, #0]
 8006d96:	4401      	add	r1, r0
 8006d98:	1850      	adds	r0, r2, r1
 8006d9a:	4283      	cmp	r3, r0
 8006d9c:	6011      	str	r1, [r2, #0]
 8006d9e:	d1e0      	bne.n	8006d62 <_free_r+0x22>
 8006da0:	6818      	ldr	r0, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	4401      	add	r1, r0
 8006da6:	6011      	str	r1, [r2, #0]
 8006da8:	6053      	str	r3, [r2, #4]
 8006daa:	e7da      	b.n	8006d62 <_free_r+0x22>
 8006dac:	d902      	bls.n	8006db4 <_free_r+0x74>
 8006dae:	230c      	movs	r3, #12
 8006db0:	602b      	str	r3, [r5, #0]
 8006db2:	e7d6      	b.n	8006d62 <_free_r+0x22>
 8006db4:	6820      	ldr	r0, [r4, #0]
 8006db6:	1821      	adds	r1, r4, r0
 8006db8:	428b      	cmp	r3, r1
 8006dba:	bf01      	itttt	eq
 8006dbc:	6819      	ldreq	r1, [r3, #0]
 8006dbe:	685b      	ldreq	r3, [r3, #4]
 8006dc0:	1809      	addeq	r1, r1, r0
 8006dc2:	6021      	streq	r1, [r4, #0]
 8006dc4:	6063      	str	r3, [r4, #4]
 8006dc6:	6054      	str	r4, [r2, #4]
 8006dc8:	e7cb      	b.n	8006d62 <_free_r+0x22>
 8006dca:	bd38      	pop	{r3, r4, r5, pc}
 8006dcc:	20000334 	.word	0x20000334

08006dd0 <sbrk_aligned>:
 8006dd0:	b570      	push	{r4, r5, r6, lr}
 8006dd2:	4e0e      	ldr	r6, [pc, #56]	; (8006e0c <sbrk_aligned+0x3c>)
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	6831      	ldr	r1, [r6, #0]
 8006dd8:	4605      	mov	r5, r0
 8006dda:	b911      	cbnz	r1, 8006de2 <sbrk_aligned+0x12>
 8006ddc:	f000 f9e8 	bl	80071b0 <_sbrk_r>
 8006de0:	6030      	str	r0, [r6, #0]
 8006de2:	4621      	mov	r1, r4
 8006de4:	4628      	mov	r0, r5
 8006de6:	f000 f9e3 	bl	80071b0 <_sbrk_r>
 8006dea:	1c43      	adds	r3, r0, #1
 8006dec:	d00a      	beq.n	8006e04 <sbrk_aligned+0x34>
 8006dee:	1cc4      	adds	r4, r0, #3
 8006df0:	f024 0403 	bic.w	r4, r4, #3
 8006df4:	42a0      	cmp	r0, r4
 8006df6:	d007      	beq.n	8006e08 <sbrk_aligned+0x38>
 8006df8:	1a21      	subs	r1, r4, r0
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f000 f9d8 	bl	80071b0 <_sbrk_r>
 8006e00:	3001      	adds	r0, #1
 8006e02:	d101      	bne.n	8006e08 <sbrk_aligned+0x38>
 8006e04:	f04f 34ff 	mov.w	r4, #4294967295
 8006e08:	4620      	mov	r0, r4
 8006e0a:	bd70      	pop	{r4, r5, r6, pc}
 8006e0c:	20000338 	.word	0x20000338

08006e10 <_malloc_r>:
 8006e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e14:	1ccd      	adds	r5, r1, #3
 8006e16:	f025 0503 	bic.w	r5, r5, #3
 8006e1a:	3508      	adds	r5, #8
 8006e1c:	2d0c      	cmp	r5, #12
 8006e1e:	bf38      	it	cc
 8006e20:	250c      	movcc	r5, #12
 8006e22:	2d00      	cmp	r5, #0
 8006e24:	4607      	mov	r7, r0
 8006e26:	db01      	blt.n	8006e2c <_malloc_r+0x1c>
 8006e28:	42a9      	cmp	r1, r5
 8006e2a:	d905      	bls.n	8006e38 <_malloc_r+0x28>
 8006e2c:	230c      	movs	r3, #12
 8006e2e:	2600      	movs	r6, #0
 8006e30:	603b      	str	r3, [r7, #0]
 8006e32:	4630      	mov	r0, r6
 8006e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e38:	4e2e      	ldr	r6, [pc, #184]	; (8006ef4 <_malloc_r+0xe4>)
 8006e3a:	f000 fa25 	bl	8007288 <__malloc_lock>
 8006e3e:	6833      	ldr	r3, [r6, #0]
 8006e40:	461c      	mov	r4, r3
 8006e42:	bb34      	cbnz	r4, 8006e92 <_malloc_r+0x82>
 8006e44:	4629      	mov	r1, r5
 8006e46:	4638      	mov	r0, r7
 8006e48:	f7ff ffc2 	bl	8006dd0 <sbrk_aligned>
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	4604      	mov	r4, r0
 8006e50:	d14d      	bne.n	8006eee <_malloc_r+0xde>
 8006e52:	6834      	ldr	r4, [r6, #0]
 8006e54:	4626      	mov	r6, r4
 8006e56:	2e00      	cmp	r6, #0
 8006e58:	d140      	bne.n	8006edc <_malloc_r+0xcc>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4638      	mov	r0, r7
 8006e60:	eb04 0803 	add.w	r8, r4, r3
 8006e64:	f000 f9a4 	bl	80071b0 <_sbrk_r>
 8006e68:	4580      	cmp	r8, r0
 8006e6a:	d13a      	bne.n	8006ee2 <_malloc_r+0xd2>
 8006e6c:	6821      	ldr	r1, [r4, #0]
 8006e6e:	3503      	adds	r5, #3
 8006e70:	1a6d      	subs	r5, r5, r1
 8006e72:	f025 0503 	bic.w	r5, r5, #3
 8006e76:	3508      	adds	r5, #8
 8006e78:	2d0c      	cmp	r5, #12
 8006e7a:	bf38      	it	cc
 8006e7c:	250c      	movcc	r5, #12
 8006e7e:	4638      	mov	r0, r7
 8006e80:	4629      	mov	r1, r5
 8006e82:	f7ff ffa5 	bl	8006dd0 <sbrk_aligned>
 8006e86:	3001      	adds	r0, #1
 8006e88:	d02b      	beq.n	8006ee2 <_malloc_r+0xd2>
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	442b      	add	r3, r5
 8006e8e:	6023      	str	r3, [r4, #0]
 8006e90:	e00e      	b.n	8006eb0 <_malloc_r+0xa0>
 8006e92:	6822      	ldr	r2, [r4, #0]
 8006e94:	1b52      	subs	r2, r2, r5
 8006e96:	d41e      	bmi.n	8006ed6 <_malloc_r+0xc6>
 8006e98:	2a0b      	cmp	r2, #11
 8006e9a:	d916      	bls.n	8006eca <_malloc_r+0xba>
 8006e9c:	1961      	adds	r1, r4, r5
 8006e9e:	42a3      	cmp	r3, r4
 8006ea0:	6025      	str	r5, [r4, #0]
 8006ea2:	bf18      	it	ne
 8006ea4:	6059      	strne	r1, [r3, #4]
 8006ea6:	6863      	ldr	r3, [r4, #4]
 8006ea8:	bf08      	it	eq
 8006eaa:	6031      	streq	r1, [r6, #0]
 8006eac:	5162      	str	r2, [r4, r5]
 8006eae:	604b      	str	r3, [r1, #4]
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	f104 060b 	add.w	r6, r4, #11
 8006eb6:	f000 f9ed 	bl	8007294 <__malloc_unlock>
 8006eba:	f026 0607 	bic.w	r6, r6, #7
 8006ebe:	1d23      	adds	r3, r4, #4
 8006ec0:	1af2      	subs	r2, r6, r3
 8006ec2:	d0b6      	beq.n	8006e32 <_malloc_r+0x22>
 8006ec4:	1b9b      	subs	r3, r3, r6
 8006ec6:	50a3      	str	r3, [r4, r2]
 8006ec8:	e7b3      	b.n	8006e32 <_malloc_r+0x22>
 8006eca:	6862      	ldr	r2, [r4, #4]
 8006ecc:	42a3      	cmp	r3, r4
 8006ece:	bf0c      	ite	eq
 8006ed0:	6032      	streq	r2, [r6, #0]
 8006ed2:	605a      	strne	r2, [r3, #4]
 8006ed4:	e7ec      	b.n	8006eb0 <_malloc_r+0xa0>
 8006ed6:	4623      	mov	r3, r4
 8006ed8:	6864      	ldr	r4, [r4, #4]
 8006eda:	e7b2      	b.n	8006e42 <_malloc_r+0x32>
 8006edc:	4634      	mov	r4, r6
 8006ede:	6876      	ldr	r6, [r6, #4]
 8006ee0:	e7b9      	b.n	8006e56 <_malloc_r+0x46>
 8006ee2:	230c      	movs	r3, #12
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	603b      	str	r3, [r7, #0]
 8006ee8:	f000 f9d4 	bl	8007294 <__malloc_unlock>
 8006eec:	e7a1      	b.n	8006e32 <_malloc_r+0x22>
 8006eee:	6025      	str	r5, [r4, #0]
 8006ef0:	e7de      	b.n	8006eb0 <_malloc_r+0xa0>
 8006ef2:	bf00      	nop
 8006ef4:	20000334 	.word	0x20000334

08006ef8 <__ssputs_r>:
 8006ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006efc:	688e      	ldr	r6, [r1, #8]
 8006efe:	4682      	mov	sl, r0
 8006f00:	429e      	cmp	r6, r3
 8006f02:	460c      	mov	r4, r1
 8006f04:	4690      	mov	r8, r2
 8006f06:	461f      	mov	r7, r3
 8006f08:	d838      	bhi.n	8006f7c <__ssputs_r+0x84>
 8006f0a:	898a      	ldrh	r2, [r1, #12]
 8006f0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f10:	d032      	beq.n	8006f78 <__ssputs_r+0x80>
 8006f12:	6825      	ldr	r5, [r4, #0]
 8006f14:	6909      	ldr	r1, [r1, #16]
 8006f16:	3301      	adds	r3, #1
 8006f18:	eba5 0901 	sub.w	r9, r5, r1
 8006f1c:	6965      	ldr	r5, [r4, #20]
 8006f1e:	444b      	add	r3, r9
 8006f20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f28:	106d      	asrs	r5, r5, #1
 8006f2a:	429d      	cmp	r5, r3
 8006f2c:	bf38      	it	cc
 8006f2e:	461d      	movcc	r5, r3
 8006f30:	0553      	lsls	r3, r2, #21
 8006f32:	d531      	bpl.n	8006f98 <__ssputs_r+0xa0>
 8006f34:	4629      	mov	r1, r5
 8006f36:	f7ff ff6b 	bl	8006e10 <_malloc_r>
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	b950      	cbnz	r0, 8006f54 <__ssputs_r+0x5c>
 8006f3e:	230c      	movs	r3, #12
 8006f40:	f04f 30ff 	mov.w	r0, #4294967295
 8006f44:	f8ca 3000 	str.w	r3, [sl]
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f4e:	81a3      	strh	r3, [r4, #12]
 8006f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f54:	464a      	mov	r2, r9
 8006f56:	6921      	ldr	r1, [r4, #16]
 8006f58:	f7ff fb4e 	bl	80065f8 <memcpy>
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f66:	81a3      	strh	r3, [r4, #12]
 8006f68:	6126      	str	r6, [r4, #16]
 8006f6a:	444e      	add	r6, r9
 8006f6c:	6026      	str	r6, [r4, #0]
 8006f6e:	463e      	mov	r6, r7
 8006f70:	6165      	str	r5, [r4, #20]
 8006f72:	eba5 0509 	sub.w	r5, r5, r9
 8006f76:	60a5      	str	r5, [r4, #8]
 8006f78:	42be      	cmp	r6, r7
 8006f7a:	d900      	bls.n	8006f7e <__ssputs_r+0x86>
 8006f7c:	463e      	mov	r6, r7
 8006f7e:	4632      	mov	r2, r6
 8006f80:	4641      	mov	r1, r8
 8006f82:	6820      	ldr	r0, [r4, #0]
 8006f84:	f000 f966 	bl	8007254 <memmove>
 8006f88:	68a3      	ldr	r3, [r4, #8]
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	1b9b      	subs	r3, r3, r6
 8006f8e:	60a3      	str	r3, [r4, #8]
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	4433      	add	r3, r6
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	e7db      	b.n	8006f50 <__ssputs_r+0x58>
 8006f98:	462a      	mov	r2, r5
 8006f9a:	f000 f981 	bl	80072a0 <_realloc_r>
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d1e1      	bne.n	8006f68 <__ssputs_r+0x70>
 8006fa4:	4650      	mov	r0, sl
 8006fa6:	6921      	ldr	r1, [r4, #16]
 8006fa8:	f7ff feca 	bl	8006d40 <_free_r>
 8006fac:	e7c7      	b.n	8006f3e <__ssputs_r+0x46>
	...

08006fb0 <_svfiprintf_r>:
 8006fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb4:	4698      	mov	r8, r3
 8006fb6:	898b      	ldrh	r3, [r1, #12]
 8006fb8:	4607      	mov	r7, r0
 8006fba:	061b      	lsls	r3, r3, #24
 8006fbc:	460d      	mov	r5, r1
 8006fbe:	4614      	mov	r4, r2
 8006fc0:	b09d      	sub	sp, #116	; 0x74
 8006fc2:	d50e      	bpl.n	8006fe2 <_svfiprintf_r+0x32>
 8006fc4:	690b      	ldr	r3, [r1, #16]
 8006fc6:	b963      	cbnz	r3, 8006fe2 <_svfiprintf_r+0x32>
 8006fc8:	2140      	movs	r1, #64	; 0x40
 8006fca:	f7ff ff21 	bl	8006e10 <_malloc_r>
 8006fce:	6028      	str	r0, [r5, #0]
 8006fd0:	6128      	str	r0, [r5, #16]
 8006fd2:	b920      	cbnz	r0, 8006fde <_svfiprintf_r+0x2e>
 8006fd4:	230c      	movs	r3, #12
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fdc:	e0d1      	b.n	8007182 <_svfiprintf_r+0x1d2>
 8006fde:	2340      	movs	r3, #64	; 0x40
 8006fe0:	616b      	str	r3, [r5, #20]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fe6:	2320      	movs	r3, #32
 8006fe8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fec:	2330      	movs	r3, #48	; 0x30
 8006fee:	f04f 0901 	mov.w	r9, #1
 8006ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ff6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800719c <_svfiprintf_r+0x1ec>
 8006ffa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ffe:	4623      	mov	r3, r4
 8007000:	469a      	mov	sl, r3
 8007002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007006:	b10a      	cbz	r2, 800700c <_svfiprintf_r+0x5c>
 8007008:	2a25      	cmp	r2, #37	; 0x25
 800700a:	d1f9      	bne.n	8007000 <_svfiprintf_r+0x50>
 800700c:	ebba 0b04 	subs.w	fp, sl, r4
 8007010:	d00b      	beq.n	800702a <_svfiprintf_r+0x7a>
 8007012:	465b      	mov	r3, fp
 8007014:	4622      	mov	r2, r4
 8007016:	4629      	mov	r1, r5
 8007018:	4638      	mov	r0, r7
 800701a:	f7ff ff6d 	bl	8006ef8 <__ssputs_r>
 800701e:	3001      	adds	r0, #1
 8007020:	f000 80aa 	beq.w	8007178 <_svfiprintf_r+0x1c8>
 8007024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007026:	445a      	add	r2, fp
 8007028:	9209      	str	r2, [sp, #36]	; 0x24
 800702a:	f89a 3000 	ldrb.w	r3, [sl]
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 80a2 	beq.w	8007178 <_svfiprintf_r+0x1c8>
 8007034:	2300      	movs	r3, #0
 8007036:	f04f 32ff 	mov.w	r2, #4294967295
 800703a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800703e:	f10a 0a01 	add.w	sl, sl, #1
 8007042:	9304      	str	r3, [sp, #16]
 8007044:	9307      	str	r3, [sp, #28]
 8007046:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800704a:	931a      	str	r3, [sp, #104]	; 0x68
 800704c:	4654      	mov	r4, sl
 800704e:	2205      	movs	r2, #5
 8007050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007054:	4851      	ldr	r0, [pc, #324]	; (800719c <_svfiprintf_r+0x1ec>)
 8007056:	f7ff fac1 	bl	80065dc <memchr>
 800705a:	9a04      	ldr	r2, [sp, #16]
 800705c:	b9d8      	cbnz	r0, 8007096 <_svfiprintf_r+0xe6>
 800705e:	06d0      	lsls	r0, r2, #27
 8007060:	bf44      	itt	mi
 8007062:	2320      	movmi	r3, #32
 8007064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007068:	0711      	lsls	r1, r2, #28
 800706a:	bf44      	itt	mi
 800706c:	232b      	movmi	r3, #43	; 0x2b
 800706e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007072:	f89a 3000 	ldrb.w	r3, [sl]
 8007076:	2b2a      	cmp	r3, #42	; 0x2a
 8007078:	d015      	beq.n	80070a6 <_svfiprintf_r+0xf6>
 800707a:	4654      	mov	r4, sl
 800707c:	2000      	movs	r0, #0
 800707e:	f04f 0c0a 	mov.w	ip, #10
 8007082:	9a07      	ldr	r2, [sp, #28]
 8007084:	4621      	mov	r1, r4
 8007086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800708a:	3b30      	subs	r3, #48	; 0x30
 800708c:	2b09      	cmp	r3, #9
 800708e:	d94e      	bls.n	800712e <_svfiprintf_r+0x17e>
 8007090:	b1b0      	cbz	r0, 80070c0 <_svfiprintf_r+0x110>
 8007092:	9207      	str	r2, [sp, #28]
 8007094:	e014      	b.n	80070c0 <_svfiprintf_r+0x110>
 8007096:	eba0 0308 	sub.w	r3, r0, r8
 800709a:	fa09 f303 	lsl.w	r3, r9, r3
 800709e:	4313      	orrs	r3, r2
 80070a0:	46a2      	mov	sl, r4
 80070a2:	9304      	str	r3, [sp, #16]
 80070a4:	e7d2      	b.n	800704c <_svfiprintf_r+0x9c>
 80070a6:	9b03      	ldr	r3, [sp, #12]
 80070a8:	1d19      	adds	r1, r3, #4
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	9103      	str	r1, [sp, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	bfbb      	ittet	lt
 80070b2:	425b      	neglt	r3, r3
 80070b4:	f042 0202 	orrlt.w	r2, r2, #2
 80070b8:	9307      	strge	r3, [sp, #28]
 80070ba:	9307      	strlt	r3, [sp, #28]
 80070bc:	bfb8      	it	lt
 80070be:	9204      	strlt	r2, [sp, #16]
 80070c0:	7823      	ldrb	r3, [r4, #0]
 80070c2:	2b2e      	cmp	r3, #46	; 0x2e
 80070c4:	d10c      	bne.n	80070e0 <_svfiprintf_r+0x130>
 80070c6:	7863      	ldrb	r3, [r4, #1]
 80070c8:	2b2a      	cmp	r3, #42	; 0x2a
 80070ca:	d135      	bne.n	8007138 <_svfiprintf_r+0x188>
 80070cc:	9b03      	ldr	r3, [sp, #12]
 80070ce:	3402      	adds	r4, #2
 80070d0:	1d1a      	adds	r2, r3, #4
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	9203      	str	r2, [sp, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	bfb8      	it	lt
 80070da:	f04f 33ff 	movlt.w	r3, #4294967295
 80070de:	9305      	str	r3, [sp, #20]
 80070e0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80071a0 <_svfiprintf_r+0x1f0>
 80070e4:	2203      	movs	r2, #3
 80070e6:	4650      	mov	r0, sl
 80070e8:	7821      	ldrb	r1, [r4, #0]
 80070ea:	f7ff fa77 	bl	80065dc <memchr>
 80070ee:	b140      	cbz	r0, 8007102 <_svfiprintf_r+0x152>
 80070f0:	2340      	movs	r3, #64	; 0x40
 80070f2:	eba0 000a 	sub.w	r0, r0, sl
 80070f6:	fa03 f000 	lsl.w	r0, r3, r0
 80070fa:	9b04      	ldr	r3, [sp, #16]
 80070fc:	3401      	adds	r4, #1
 80070fe:	4303      	orrs	r3, r0
 8007100:	9304      	str	r3, [sp, #16]
 8007102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007106:	2206      	movs	r2, #6
 8007108:	4826      	ldr	r0, [pc, #152]	; (80071a4 <_svfiprintf_r+0x1f4>)
 800710a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800710e:	f7ff fa65 	bl	80065dc <memchr>
 8007112:	2800      	cmp	r0, #0
 8007114:	d038      	beq.n	8007188 <_svfiprintf_r+0x1d8>
 8007116:	4b24      	ldr	r3, [pc, #144]	; (80071a8 <_svfiprintf_r+0x1f8>)
 8007118:	bb1b      	cbnz	r3, 8007162 <_svfiprintf_r+0x1b2>
 800711a:	9b03      	ldr	r3, [sp, #12]
 800711c:	3307      	adds	r3, #7
 800711e:	f023 0307 	bic.w	r3, r3, #7
 8007122:	3308      	adds	r3, #8
 8007124:	9303      	str	r3, [sp, #12]
 8007126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007128:	4433      	add	r3, r6
 800712a:	9309      	str	r3, [sp, #36]	; 0x24
 800712c:	e767      	b.n	8006ffe <_svfiprintf_r+0x4e>
 800712e:	460c      	mov	r4, r1
 8007130:	2001      	movs	r0, #1
 8007132:	fb0c 3202 	mla	r2, ip, r2, r3
 8007136:	e7a5      	b.n	8007084 <_svfiprintf_r+0xd4>
 8007138:	2300      	movs	r3, #0
 800713a:	f04f 0c0a 	mov.w	ip, #10
 800713e:	4619      	mov	r1, r3
 8007140:	3401      	adds	r4, #1
 8007142:	9305      	str	r3, [sp, #20]
 8007144:	4620      	mov	r0, r4
 8007146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800714a:	3a30      	subs	r2, #48	; 0x30
 800714c:	2a09      	cmp	r2, #9
 800714e:	d903      	bls.n	8007158 <_svfiprintf_r+0x1a8>
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0c5      	beq.n	80070e0 <_svfiprintf_r+0x130>
 8007154:	9105      	str	r1, [sp, #20]
 8007156:	e7c3      	b.n	80070e0 <_svfiprintf_r+0x130>
 8007158:	4604      	mov	r4, r0
 800715a:	2301      	movs	r3, #1
 800715c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007160:	e7f0      	b.n	8007144 <_svfiprintf_r+0x194>
 8007162:	ab03      	add	r3, sp, #12
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	462a      	mov	r2, r5
 8007168:	4638      	mov	r0, r7
 800716a:	4b10      	ldr	r3, [pc, #64]	; (80071ac <_svfiprintf_r+0x1fc>)
 800716c:	a904      	add	r1, sp, #16
 800716e:	f7fd ffcd 	bl	800510c <_printf_float>
 8007172:	1c42      	adds	r2, r0, #1
 8007174:	4606      	mov	r6, r0
 8007176:	d1d6      	bne.n	8007126 <_svfiprintf_r+0x176>
 8007178:	89ab      	ldrh	r3, [r5, #12]
 800717a:	065b      	lsls	r3, r3, #25
 800717c:	f53f af2c 	bmi.w	8006fd8 <_svfiprintf_r+0x28>
 8007180:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007182:	b01d      	add	sp, #116	; 0x74
 8007184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007188:	ab03      	add	r3, sp, #12
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	462a      	mov	r2, r5
 800718e:	4638      	mov	r0, r7
 8007190:	4b06      	ldr	r3, [pc, #24]	; (80071ac <_svfiprintf_r+0x1fc>)
 8007192:	a904      	add	r1, sp, #16
 8007194:	f7fe fa56 	bl	8005644 <_printf_i>
 8007198:	e7eb      	b.n	8007172 <_svfiprintf_r+0x1c2>
 800719a:	bf00      	nop
 800719c:	080084c4 	.word	0x080084c4
 80071a0:	080084ca 	.word	0x080084ca
 80071a4:	080084ce 	.word	0x080084ce
 80071a8:	0800510d 	.word	0x0800510d
 80071ac:	08006ef9 	.word	0x08006ef9

080071b0 <_sbrk_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	2300      	movs	r3, #0
 80071b4:	4d05      	ldr	r5, [pc, #20]	; (80071cc <_sbrk_r+0x1c>)
 80071b6:	4604      	mov	r4, r0
 80071b8:	4608      	mov	r0, r1
 80071ba:	602b      	str	r3, [r5, #0]
 80071bc:	f7fa fbfe 	bl	80019bc <_sbrk>
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	d102      	bne.n	80071ca <_sbrk_r+0x1a>
 80071c4:	682b      	ldr	r3, [r5, #0]
 80071c6:	b103      	cbz	r3, 80071ca <_sbrk_r+0x1a>
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	2000033c 	.word	0x2000033c

080071d0 <__assert_func>:
 80071d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071d2:	4614      	mov	r4, r2
 80071d4:	461a      	mov	r2, r3
 80071d6:	4b09      	ldr	r3, [pc, #36]	; (80071fc <__assert_func+0x2c>)
 80071d8:	4605      	mov	r5, r0
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68d8      	ldr	r0, [r3, #12]
 80071de:	b14c      	cbz	r4, 80071f4 <__assert_func+0x24>
 80071e0:	4b07      	ldr	r3, [pc, #28]	; (8007200 <__assert_func+0x30>)
 80071e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071e6:	9100      	str	r1, [sp, #0]
 80071e8:	462b      	mov	r3, r5
 80071ea:	4906      	ldr	r1, [pc, #24]	; (8007204 <__assert_func+0x34>)
 80071ec:	f000 f80e 	bl	800720c <fiprintf>
 80071f0:	f000 faaa 	bl	8007748 <abort>
 80071f4:	4b04      	ldr	r3, [pc, #16]	; (8007208 <__assert_func+0x38>)
 80071f6:	461c      	mov	r4, r3
 80071f8:	e7f3      	b.n	80071e2 <__assert_func+0x12>
 80071fa:	bf00      	nop
 80071fc:	2000003c 	.word	0x2000003c
 8007200:	080084d5 	.word	0x080084d5
 8007204:	080084e2 	.word	0x080084e2
 8007208:	08008510 	.word	0x08008510

0800720c <fiprintf>:
 800720c:	b40e      	push	{r1, r2, r3}
 800720e:	b503      	push	{r0, r1, lr}
 8007210:	4601      	mov	r1, r0
 8007212:	ab03      	add	r3, sp, #12
 8007214:	4805      	ldr	r0, [pc, #20]	; (800722c <fiprintf+0x20>)
 8007216:	f853 2b04 	ldr.w	r2, [r3], #4
 800721a:	6800      	ldr	r0, [r0, #0]
 800721c:	9301      	str	r3, [sp, #4]
 800721e:	f000 f895 	bl	800734c <_vfiprintf_r>
 8007222:	b002      	add	sp, #8
 8007224:	f85d eb04 	ldr.w	lr, [sp], #4
 8007228:	b003      	add	sp, #12
 800722a:	4770      	bx	lr
 800722c:	2000003c 	.word	0x2000003c

08007230 <__ascii_mbtowc>:
 8007230:	b082      	sub	sp, #8
 8007232:	b901      	cbnz	r1, 8007236 <__ascii_mbtowc+0x6>
 8007234:	a901      	add	r1, sp, #4
 8007236:	b142      	cbz	r2, 800724a <__ascii_mbtowc+0x1a>
 8007238:	b14b      	cbz	r3, 800724e <__ascii_mbtowc+0x1e>
 800723a:	7813      	ldrb	r3, [r2, #0]
 800723c:	600b      	str	r3, [r1, #0]
 800723e:	7812      	ldrb	r2, [r2, #0]
 8007240:	1e10      	subs	r0, r2, #0
 8007242:	bf18      	it	ne
 8007244:	2001      	movne	r0, #1
 8007246:	b002      	add	sp, #8
 8007248:	4770      	bx	lr
 800724a:	4610      	mov	r0, r2
 800724c:	e7fb      	b.n	8007246 <__ascii_mbtowc+0x16>
 800724e:	f06f 0001 	mvn.w	r0, #1
 8007252:	e7f8      	b.n	8007246 <__ascii_mbtowc+0x16>

08007254 <memmove>:
 8007254:	4288      	cmp	r0, r1
 8007256:	b510      	push	{r4, lr}
 8007258:	eb01 0402 	add.w	r4, r1, r2
 800725c:	d902      	bls.n	8007264 <memmove+0x10>
 800725e:	4284      	cmp	r4, r0
 8007260:	4623      	mov	r3, r4
 8007262:	d807      	bhi.n	8007274 <memmove+0x20>
 8007264:	1e43      	subs	r3, r0, #1
 8007266:	42a1      	cmp	r1, r4
 8007268:	d008      	beq.n	800727c <memmove+0x28>
 800726a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800726e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007272:	e7f8      	b.n	8007266 <memmove+0x12>
 8007274:	4601      	mov	r1, r0
 8007276:	4402      	add	r2, r0
 8007278:	428a      	cmp	r2, r1
 800727a:	d100      	bne.n	800727e <memmove+0x2a>
 800727c:	bd10      	pop	{r4, pc}
 800727e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007282:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007286:	e7f7      	b.n	8007278 <memmove+0x24>

08007288 <__malloc_lock>:
 8007288:	4801      	ldr	r0, [pc, #4]	; (8007290 <__malloc_lock+0x8>)
 800728a:	f000 bc19 	b.w	8007ac0 <__retarget_lock_acquire_recursive>
 800728e:	bf00      	nop
 8007290:	20000340 	.word	0x20000340

08007294 <__malloc_unlock>:
 8007294:	4801      	ldr	r0, [pc, #4]	; (800729c <__malloc_unlock+0x8>)
 8007296:	f000 bc14 	b.w	8007ac2 <__retarget_lock_release_recursive>
 800729a:	bf00      	nop
 800729c:	20000340 	.word	0x20000340

080072a0 <_realloc_r>:
 80072a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a4:	4680      	mov	r8, r0
 80072a6:	4614      	mov	r4, r2
 80072a8:	460e      	mov	r6, r1
 80072aa:	b921      	cbnz	r1, 80072b6 <_realloc_r+0x16>
 80072ac:	4611      	mov	r1, r2
 80072ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072b2:	f7ff bdad 	b.w	8006e10 <_malloc_r>
 80072b6:	b92a      	cbnz	r2, 80072c4 <_realloc_r+0x24>
 80072b8:	f7ff fd42 	bl	8006d40 <_free_r>
 80072bc:	4625      	mov	r5, r4
 80072be:	4628      	mov	r0, r5
 80072c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c4:	f000 fc64 	bl	8007b90 <_malloc_usable_size_r>
 80072c8:	4284      	cmp	r4, r0
 80072ca:	4607      	mov	r7, r0
 80072cc:	d802      	bhi.n	80072d4 <_realloc_r+0x34>
 80072ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80072d2:	d812      	bhi.n	80072fa <_realloc_r+0x5a>
 80072d4:	4621      	mov	r1, r4
 80072d6:	4640      	mov	r0, r8
 80072d8:	f7ff fd9a 	bl	8006e10 <_malloc_r>
 80072dc:	4605      	mov	r5, r0
 80072de:	2800      	cmp	r0, #0
 80072e0:	d0ed      	beq.n	80072be <_realloc_r+0x1e>
 80072e2:	42bc      	cmp	r4, r7
 80072e4:	4622      	mov	r2, r4
 80072e6:	4631      	mov	r1, r6
 80072e8:	bf28      	it	cs
 80072ea:	463a      	movcs	r2, r7
 80072ec:	f7ff f984 	bl	80065f8 <memcpy>
 80072f0:	4631      	mov	r1, r6
 80072f2:	4640      	mov	r0, r8
 80072f4:	f7ff fd24 	bl	8006d40 <_free_r>
 80072f8:	e7e1      	b.n	80072be <_realloc_r+0x1e>
 80072fa:	4635      	mov	r5, r6
 80072fc:	e7df      	b.n	80072be <_realloc_r+0x1e>

080072fe <__sfputc_r>:
 80072fe:	6893      	ldr	r3, [r2, #8]
 8007300:	b410      	push	{r4}
 8007302:	3b01      	subs	r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	6093      	str	r3, [r2, #8]
 8007308:	da07      	bge.n	800731a <__sfputc_r+0x1c>
 800730a:	6994      	ldr	r4, [r2, #24]
 800730c:	42a3      	cmp	r3, r4
 800730e:	db01      	blt.n	8007314 <__sfputc_r+0x16>
 8007310:	290a      	cmp	r1, #10
 8007312:	d102      	bne.n	800731a <__sfputc_r+0x1c>
 8007314:	bc10      	pop	{r4}
 8007316:	f000 b949 	b.w	80075ac <__swbuf_r>
 800731a:	6813      	ldr	r3, [r2, #0]
 800731c:	1c58      	adds	r0, r3, #1
 800731e:	6010      	str	r0, [r2, #0]
 8007320:	7019      	strb	r1, [r3, #0]
 8007322:	4608      	mov	r0, r1
 8007324:	bc10      	pop	{r4}
 8007326:	4770      	bx	lr

08007328 <__sfputs_r>:
 8007328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732a:	4606      	mov	r6, r0
 800732c:	460f      	mov	r7, r1
 800732e:	4614      	mov	r4, r2
 8007330:	18d5      	adds	r5, r2, r3
 8007332:	42ac      	cmp	r4, r5
 8007334:	d101      	bne.n	800733a <__sfputs_r+0x12>
 8007336:	2000      	movs	r0, #0
 8007338:	e007      	b.n	800734a <__sfputs_r+0x22>
 800733a:	463a      	mov	r2, r7
 800733c:	4630      	mov	r0, r6
 800733e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007342:	f7ff ffdc 	bl	80072fe <__sfputc_r>
 8007346:	1c43      	adds	r3, r0, #1
 8007348:	d1f3      	bne.n	8007332 <__sfputs_r+0xa>
 800734a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800734c <_vfiprintf_r>:
 800734c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007350:	460d      	mov	r5, r1
 8007352:	4614      	mov	r4, r2
 8007354:	4698      	mov	r8, r3
 8007356:	4606      	mov	r6, r0
 8007358:	b09d      	sub	sp, #116	; 0x74
 800735a:	b118      	cbz	r0, 8007364 <_vfiprintf_r+0x18>
 800735c:	6983      	ldr	r3, [r0, #24]
 800735e:	b90b      	cbnz	r3, 8007364 <_vfiprintf_r+0x18>
 8007360:	f000 fb10 	bl	8007984 <__sinit>
 8007364:	4b89      	ldr	r3, [pc, #548]	; (800758c <_vfiprintf_r+0x240>)
 8007366:	429d      	cmp	r5, r3
 8007368:	d11b      	bne.n	80073a2 <_vfiprintf_r+0x56>
 800736a:	6875      	ldr	r5, [r6, #4]
 800736c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800736e:	07d9      	lsls	r1, r3, #31
 8007370:	d405      	bmi.n	800737e <_vfiprintf_r+0x32>
 8007372:	89ab      	ldrh	r3, [r5, #12]
 8007374:	059a      	lsls	r2, r3, #22
 8007376:	d402      	bmi.n	800737e <_vfiprintf_r+0x32>
 8007378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800737a:	f000 fba1 	bl	8007ac0 <__retarget_lock_acquire_recursive>
 800737e:	89ab      	ldrh	r3, [r5, #12]
 8007380:	071b      	lsls	r3, r3, #28
 8007382:	d501      	bpl.n	8007388 <_vfiprintf_r+0x3c>
 8007384:	692b      	ldr	r3, [r5, #16]
 8007386:	b9eb      	cbnz	r3, 80073c4 <_vfiprintf_r+0x78>
 8007388:	4629      	mov	r1, r5
 800738a:	4630      	mov	r0, r6
 800738c:	f000 f96e 	bl	800766c <__swsetup_r>
 8007390:	b1c0      	cbz	r0, 80073c4 <_vfiprintf_r+0x78>
 8007392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007394:	07dc      	lsls	r4, r3, #31
 8007396:	d50e      	bpl.n	80073b6 <_vfiprintf_r+0x6a>
 8007398:	f04f 30ff 	mov.w	r0, #4294967295
 800739c:	b01d      	add	sp, #116	; 0x74
 800739e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a2:	4b7b      	ldr	r3, [pc, #492]	; (8007590 <_vfiprintf_r+0x244>)
 80073a4:	429d      	cmp	r5, r3
 80073a6:	d101      	bne.n	80073ac <_vfiprintf_r+0x60>
 80073a8:	68b5      	ldr	r5, [r6, #8]
 80073aa:	e7df      	b.n	800736c <_vfiprintf_r+0x20>
 80073ac:	4b79      	ldr	r3, [pc, #484]	; (8007594 <_vfiprintf_r+0x248>)
 80073ae:	429d      	cmp	r5, r3
 80073b0:	bf08      	it	eq
 80073b2:	68f5      	ldreq	r5, [r6, #12]
 80073b4:	e7da      	b.n	800736c <_vfiprintf_r+0x20>
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	0598      	lsls	r0, r3, #22
 80073ba:	d4ed      	bmi.n	8007398 <_vfiprintf_r+0x4c>
 80073bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073be:	f000 fb80 	bl	8007ac2 <__retarget_lock_release_recursive>
 80073c2:	e7e9      	b.n	8007398 <_vfiprintf_r+0x4c>
 80073c4:	2300      	movs	r3, #0
 80073c6:	9309      	str	r3, [sp, #36]	; 0x24
 80073c8:	2320      	movs	r3, #32
 80073ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073ce:	2330      	movs	r3, #48	; 0x30
 80073d0:	f04f 0901 	mov.w	r9, #1
 80073d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80073d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007598 <_vfiprintf_r+0x24c>
 80073dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073e0:	4623      	mov	r3, r4
 80073e2:	469a      	mov	sl, r3
 80073e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073e8:	b10a      	cbz	r2, 80073ee <_vfiprintf_r+0xa2>
 80073ea:	2a25      	cmp	r2, #37	; 0x25
 80073ec:	d1f9      	bne.n	80073e2 <_vfiprintf_r+0x96>
 80073ee:	ebba 0b04 	subs.w	fp, sl, r4
 80073f2:	d00b      	beq.n	800740c <_vfiprintf_r+0xc0>
 80073f4:	465b      	mov	r3, fp
 80073f6:	4622      	mov	r2, r4
 80073f8:	4629      	mov	r1, r5
 80073fa:	4630      	mov	r0, r6
 80073fc:	f7ff ff94 	bl	8007328 <__sfputs_r>
 8007400:	3001      	adds	r0, #1
 8007402:	f000 80aa 	beq.w	800755a <_vfiprintf_r+0x20e>
 8007406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007408:	445a      	add	r2, fp
 800740a:	9209      	str	r2, [sp, #36]	; 0x24
 800740c:	f89a 3000 	ldrb.w	r3, [sl]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 80a2 	beq.w	800755a <_vfiprintf_r+0x20e>
 8007416:	2300      	movs	r3, #0
 8007418:	f04f 32ff 	mov.w	r2, #4294967295
 800741c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007420:	f10a 0a01 	add.w	sl, sl, #1
 8007424:	9304      	str	r3, [sp, #16]
 8007426:	9307      	str	r3, [sp, #28]
 8007428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800742c:	931a      	str	r3, [sp, #104]	; 0x68
 800742e:	4654      	mov	r4, sl
 8007430:	2205      	movs	r2, #5
 8007432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007436:	4858      	ldr	r0, [pc, #352]	; (8007598 <_vfiprintf_r+0x24c>)
 8007438:	f7ff f8d0 	bl	80065dc <memchr>
 800743c:	9a04      	ldr	r2, [sp, #16]
 800743e:	b9d8      	cbnz	r0, 8007478 <_vfiprintf_r+0x12c>
 8007440:	06d1      	lsls	r1, r2, #27
 8007442:	bf44      	itt	mi
 8007444:	2320      	movmi	r3, #32
 8007446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800744a:	0713      	lsls	r3, r2, #28
 800744c:	bf44      	itt	mi
 800744e:	232b      	movmi	r3, #43	; 0x2b
 8007450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007454:	f89a 3000 	ldrb.w	r3, [sl]
 8007458:	2b2a      	cmp	r3, #42	; 0x2a
 800745a:	d015      	beq.n	8007488 <_vfiprintf_r+0x13c>
 800745c:	4654      	mov	r4, sl
 800745e:	2000      	movs	r0, #0
 8007460:	f04f 0c0a 	mov.w	ip, #10
 8007464:	9a07      	ldr	r2, [sp, #28]
 8007466:	4621      	mov	r1, r4
 8007468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800746c:	3b30      	subs	r3, #48	; 0x30
 800746e:	2b09      	cmp	r3, #9
 8007470:	d94e      	bls.n	8007510 <_vfiprintf_r+0x1c4>
 8007472:	b1b0      	cbz	r0, 80074a2 <_vfiprintf_r+0x156>
 8007474:	9207      	str	r2, [sp, #28]
 8007476:	e014      	b.n	80074a2 <_vfiprintf_r+0x156>
 8007478:	eba0 0308 	sub.w	r3, r0, r8
 800747c:	fa09 f303 	lsl.w	r3, r9, r3
 8007480:	4313      	orrs	r3, r2
 8007482:	46a2      	mov	sl, r4
 8007484:	9304      	str	r3, [sp, #16]
 8007486:	e7d2      	b.n	800742e <_vfiprintf_r+0xe2>
 8007488:	9b03      	ldr	r3, [sp, #12]
 800748a:	1d19      	adds	r1, r3, #4
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	9103      	str	r1, [sp, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	bfbb      	ittet	lt
 8007494:	425b      	neglt	r3, r3
 8007496:	f042 0202 	orrlt.w	r2, r2, #2
 800749a:	9307      	strge	r3, [sp, #28]
 800749c:	9307      	strlt	r3, [sp, #28]
 800749e:	bfb8      	it	lt
 80074a0:	9204      	strlt	r2, [sp, #16]
 80074a2:	7823      	ldrb	r3, [r4, #0]
 80074a4:	2b2e      	cmp	r3, #46	; 0x2e
 80074a6:	d10c      	bne.n	80074c2 <_vfiprintf_r+0x176>
 80074a8:	7863      	ldrb	r3, [r4, #1]
 80074aa:	2b2a      	cmp	r3, #42	; 0x2a
 80074ac:	d135      	bne.n	800751a <_vfiprintf_r+0x1ce>
 80074ae:	9b03      	ldr	r3, [sp, #12]
 80074b0:	3402      	adds	r4, #2
 80074b2:	1d1a      	adds	r2, r3, #4
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	9203      	str	r2, [sp, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	bfb8      	it	lt
 80074bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80074c0:	9305      	str	r3, [sp, #20]
 80074c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800759c <_vfiprintf_r+0x250>
 80074c6:	2203      	movs	r2, #3
 80074c8:	4650      	mov	r0, sl
 80074ca:	7821      	ldrb	r1, [r4, #0]
 80074cc:	f7ff f886 	bl	80065dc <memchr>
 80074d0:	b140      	cbz	r0, 80074e4 <_vfiprintf_r+0x198>
 80074d2:	2340      	movs	r3, #64	; 0x40
 80074d4:	eba0 000a 	sub.w	r0, r0, sl
 80074d8:	fa03 f000 	lsl.w	r0, r3, r0
 80074dc:	9b04      	ldr	r3, [sp, #16]
 80074de:	3401      	adds	r4, #1
 80074e0:	4303      	orrs	r3, r0
 80074e2:	9304      	str	r3, [sp, #16]
 80074e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074e8:	2206      	movs	r2, #6
 80074ea:	482d      	ldr	r0, [pc, #180]	; (80075a0 <_vfiprintf_r+0x254>)
 80074ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074f0:	f7ff f874 	bl	80065dc <memchr>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	d03f      	beq.n	8007578 <_vfiprintf_r+0x22c>
 80074f8:	4b2a      	ldr	r3, [pc, #168]	; (80075a4 <_vfiprintf_r+0x258>)
 80074fa:	bb1b      	cbnz	r3, 8007544 <_vfiprintf_r+0x1f8>
 80074fc:	9b03      	ldr	r3, [sp, #12]
 80074fe:	3307      	adds	r3, #7
 8007500:	f023 0307 	bic.w	r3, r3, #7
 8007504:	3308      	adds	r3, #8
 8007506:	9303      	str	r3, [sp, #12]
 8007508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800750a:	443b      	add	r3, r7
 800750c:	9309      	str	r3, [sp, #36]	; 0x24
 800750e:	e767      	b.n	80073e0 <_vfiprintf_r+0x94>
 8007510:	460c      	mov	r4, r1
 8007512:	2001      	movs	r0, #1
 8007514:	fb0c 3202 	mla	r2, ip, r2, r3
 8007518:	e7a5      	b.n	8007466 <_vfiprintf_r+0x11a>
 800751a:	2300      	movs	r3, #0
 800751c:	f04f 0c0a 	mov.w	ip, #10
 8007520:	4619      	mov	r1, r3
 8007522:	3401      	adds	r4, #1
 8007524:	9305      	str	r3, [sp, #20]
 8007526:	4620      	mov	r0, r4
 8007528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800752c:	3a30      	subs	r2, #48	; 0x30
 800752e:	2a09      	cmp	r2, #9
 8007530:	d903      	bls.n	800753a <_vfiprintf_r+0x1ee>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0c5      	beq.n	80074c2 <_vfiprintf_r+0x176>
 8007536:	9105      	str	r1, [sp, #20]
 8007538:	e7c3      	b.n	80074c2 <_vfiprintf_r+0x176>
 800753a:	4604      	mov	r4, r0
 800753c:	2301      	movs	r3, #1
 800753e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007542:	e7f0      	b.n	8007526 <_vfiprintf_r+0x1da>
 8007544:	ab03      	add	r3, sp, #12
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	462a      	mov	r2, r5
 800754a:	4630      	mov	r0, r6
 800754c:	4b16      	ldr	r3, [pc, #88]	; (80075a8 <_vfiprintf_r+0x25c>)
 800754e:	a904      	add	r1, sp, #16
 8007550:	f7fd fddc 	bl	800510c <_printf_float>
 8007554:	4607      	mov	r7, r0
 8007556:	1c78      	adds	r0, r7, #1
 8007558:	d1d6      	bne.n	8007508 <_vfiprintf_r+0x1bc>
 800755a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800755c:	07d9      	lsls	r1, r3, #31
 800755e:	d405      	bmi.n	800756c <_vfiprintf_r+0x220>
 8007560:	89ab      	ldrh	r3, [r5, #12]
 8007562:	059a      	lsls	r2, r3, #22
 8007564:	d402      	bmi.n	800756c <_vfiprintf_r+0x220>
 8007566:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007568:	f000 faab 	bl	8007ac2 <__retarget_lock_release_recursive>
 800756c:	89ab      	ldrh	r3, [r5, #12]
 800756e:	065b      	lsls	r3, r3, #25
 8007570:	f53f af12 	bmi.w	8007398 <_vfiprintf_r+0x4c>
 8007574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007576:	e711      	b.n	800739c <_vfiprintf_r+0x50>
 8007578:	ab03      	add	r3, sp, #12
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	462a      	mov	r2, r5
 800757e:	4630      	mov	r0, r6
 8007580:	4b09      	ldr	r3, [pc, #36]	; (80075a8 <_vfiprintf_r+0x25c>)
 8007582:	a904      	add	r1, sp, #16
 8007584:	f7fe f85e 	bl	8005644 <_printf_i>
 8007588:	e7e4      	b.n	8007554 <_vfiprintf_r+0x208>
 800758a:	bf00      	nop
 800758c:	0800863c 	.word	0x0800863c
 8007590:	0800865c 	.word	0x0800865c
 8007594:	0800861c 	.word	0x0800861c
 8007598:	080084c4 	.word	0x080084c4
 800759c:	080084ca 	.word	0x080084ca
 80075a0:	080084ce 	.word	0x080084ce
 80075a4:	0800510d 	.word	0x0800510d
 80075a8:	08007329 	.word	0x08007329

080075ac <__swbuf_r>:
 80075ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ae:	460e      	mov	r6, r1
 80075b0:	4614      	mov	r4, r2
 80075b2:	4605      	mov	r5, r0
 80075b4:	b118      	cbz	r0, 80075be <__swbuf_r+0x12>
 80075b6:	6983      	ldr	r3, [r0, #24]
 80075b8:	b90b      	cbnz	r3, 80075be <__swbuf_r+0x12>
 80075ba:	f000 f9e3 	bl	8007984 <__sinit>
 80075be:	4b21      	ldr	r3, [pc, #132]	; (8007644 <__swbuf_r+0x98>)
 80075c0:	429c      	cmp	r4, r3
 80075c2:	d12b      	bne.n	800761c <__swbuf_r+0x70>
 80075c4:	686c      	ldr	r4, [r5, #4]
 80075c6:	69a3      	ldr	r3, [r4, #24]
 80075c8:	60a3      	str	r3, [r4, #8]
 80075ca:	89a3      	ldrh	r3, [r4, #12]
 80075cc:	071a      	lsls	r2, r3, #28
 80075ce:	d52f      	bpl.n	8007630 <__swbuf_r+0x84>
 80075d0:	6923      	ldr	r3, [r4, #16]
 80075d2:	b36b      	cbz	r3, 8007630 <__swbuf_r+0x84>
 80075d4:	6923      	ldr	r3, [r4, #16]
 80075d6:	6820      	ldr	r0, [r4, #0]
 80075d8:	b2f6      	uxtb	r6, r6
 80075da:	1ac0      	subs	r0, r0, r3
 80075dc:	6963      	ldr	r3, [r4, #20]
 80075de:	4637      	mov	r7, r6
 80075e0:	4283      	cmp	r3, r0
 80075e2:	dc04      	bgt.n	80075ee <__swbuf_r+0x42>
 80075e4:	4621      	mov	r1, r4
 80075e6:	4628      	mov	r0, r5
 80075e8:	f000 f938 	bl	800785c <_fflush_r>
 80075ec:	bb30      	cbnz	r0, 800763c <__swbuf_r+0x90>
 80075ee:	68a3      	ldr	r3, [r4, #8]
 80075f0:	3001      	adds	r0, #1
 80075f2:	3b01      	subs	r3, #1
 80075f4:	60a3      	str	r3, [r4, #8]
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	6022      	str	r2, [r4, #0]
 80075fc:	701e      	strb	r6, [r3, #0]
 80075fe:	6963      	ldr	r3, [r4, #20]
 8007600:	4283      	cmp	r3, r0
 8007602:	d004      	beq.n	800760e <__swbuf_r+0x62>
 8007604:	89a3      	ldrh	r3, [r4, #12]
 8007606:	07db      	lsls	r3, r3, #31
 8007608:	d506      	bpl.n	8007618 <__swbuf_r+0x6c>
 800760a:	2e0a      	cmp	r6, #10
 800760c:	d104      	bne.n	8007618 <__swbuf_r+0x6c>
 800760e:	4621      	mov	r1, r4
 8007610:	4628      	mov	r0, r5
 8007612:	f000 f923 	bl	800785c <_fflush_r>
 8007616:	b988      	cbnz	r0, 800763c <__swbuf_r+0x90>
 8007618:	4638      	mov	r0, r7
 800761a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800761c:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <__swbuf_r+0x9c>)
 800761e:	429c      	cmp	r4, r3
 8007620:	d101      	bne.n	8007626 <__swbuf_r+0x7a>
 8007622:	68ac      	ldr	r4, [r5, #8]
 8007624:	e7cf      	b.n	80075c6 <__swbuf_r+0x1a>
 8007626:	4b09      	ldr	r3, [pc, #36]	; (800764c <__swbuf_r+0xa0>)
 8007628:	429c      	cmp	r4, r3
 800762a:	bf08      	it	eq
 800762c:	68ec      	ldreq	r4, [r5, #12]
 800762e:	e7ca      	b.n	80075c6 <__swbuf_r+0x1a>
 8007630:	4621      	mov	r1, r4
 8007632:	4628      	mov	r0, r5
 8007634:	f000 f81a 	bl	800766c <__swsetup_r>
 8007638:	2800      	cmp	r0, #0
 800763a:	d0cb      	beq.n	80075d4 <__swbuf_r+0x28>
 800763c:	f04f 37ff 	mov.w	r7, #4294967295
 8007640:	e7ea      	b.n	8007618 <__swbuf_r+0x6c>
 8007642:	bf00      	nop
 8007644:	0800863c 	.word	0x0800863c
 8007648:	0800865c 	.word	0x0800865c
 800764c:	0800861c 	.word	0x0800861c

08007650 <__ascii_wctomb>:
 8007650:	4603      	mov	r3, r0
 8007652:	4608      	mov	r0, r1
 8007654:	b141      	cbz	r1, 8007668 <__ascii_wctomb+0x18>
 8007656:	2aff      	cmp	r2, #255	; 0xff
 8007658:	d904      	bls.n	8007664 <__ascii_wctomb+0x14>
 800765a:	228a      	movs	r2, #138	; 0x8a
 800765c:	f04f 30ff 	mov.w	r0, #4294967295
 8007660:	601a      	str	r2, [r3, #0]
 8007662:	4770      	bx	lr
 8007664:	2001      	movs	r0, #1
 8007666:	700a      	strb	r2, [r1, #0]
 8007668:	4770      	bx	lr
	...

0800766c <__swsetup_r>:
 800766c:	4b32      	ldr	r3, [pc, #200]	; (8007738 <__swsetup_r+0xcc>)
 800766e:	b570      	push	{r4, r5, r6, lr}
 8007670:	681d      	ldr	r5, [r3, #0]
 8007672:	4606      	mov	r6, r0
 8007674:	460c      	mov	r4, r1
 8007676:	b125      	cbz	r5, 8007682 <__swsetup_r+0x16>
 8007678:	69ab      	ldr	r3, [r5, #24]
 800767a:	b913      	cbnz	r3, 8007682 <__swsetup_r+0x16>
 800767c:	4628      	mov	r0, r5
 800767e:	f000 f981 	bl	8007984 <__sinit>
 8007682:	4b2e      	ldr	r3, [pc, #184]	; (800773c <__swsetup_r+0xd0>)
 8007684:	429c      	cmp	r4, r3
 8007686:	d10f      	bne.n	80076a8 <__swsetup_r+0x3c>
 8007688:	686c      	ldr	r4, [r5, #4]
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007690:	0719      	lsls	r1, r3, #28
 8007692:	d42c      	bmi.n	80076ee <__swsetup_r+0x82>
 8007694:	06dd      	lsls	r5, r3, #27
 8007696:	d411      	bmi.n	80076bc <__swsetup_r+0x50>
 8007698:	2309      	movs	r3, #9
 800769a:	6033      	str	r3, [r6, #0]
 800769c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80076a0:	f04f 30ff 	mov.w	r0, #4294967295
 80076a4:	81a3      	strh	r3, [r4, #12]
 80076a6:	e03e      	b.n	8007726 <__swsetup_r+0xba>
 80076a8:	4b25      	ldr	r3, [pc, #148]	; (8007740 <__swsetup_r+0xd4>)
 80076aa:	429c      	cmp	r4, r3
 80076ac:	d101      	bne.n	80076b2 <__swsetup_r+0x46>
 80076ae:	68ac      	ldr	r4, [r5, #8]
 80076b0:	e7eb      	b.n	800768a <__swsetup_r+0x1e>
 80076b2:	4b24      	ldr	r3, [pc, #144]	; (8007744 <__swsetup_r+0xd8>)
 80076b4:	429c      	cmp	r4, r3
 80076b6:	bf08      	it	eq
 80076b8:	68ec      	ldreq	r4, [r5, #12]
 80076ba:	e7e6      	b.n	800768a <__swsetup_r+0x1e>
 80076bc:	0758      	lsls	r0, r3, #29
 80076be:	d512      	bpl.n	80076e6 <__swsetup_r+0x7a>
 80076c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076c2:	b141      	cbz	r1, 80076d6 <__swsetup_r+0x6a>
 80076c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076c8:	4299      	cmp	r1, r3
 80076ca:	d002      	beq.n	80076d2 <__swsetup_r+0x66>
 80076cc:	4630      	mov	r0, r6
 80076ce:	f7ff fb37 	bl	8006d40 <_free_r>
 80076d2:	2300      	movs	r3, #0
 80076d4:	6363      	str	r3, [r4, #52]	; 0x34
 80076d6:	89a3      	ldrh	r3, [r4, #12]
 80076d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076dc:	81a3      	strh	r3, [r4, #12]
 80076de:	2300      	movs	r3, #0
 80076e0:	6063      	str	r3, [r4, #4]
 80076e2:	6923      	ldr	r3, [r4, #16]
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	f043 0308 	orr.w	r3, r3, #8
 80076ec:	81a3      	strh	r3, [r4, #12]
 80076ee:	6923      	ldr	r3, [r4, #16]
 80076f0:	b94b      	cbnz	r3, 8007706 <__swsetup_r+0x9a>
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80076f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076fc:	d003      	beq.n	8007706 <__swsetup_r+0x9a>
 80076fe:	4621      	mov	r1, r4
 8007700:	4630      	mov	r0, r6
 8007702:	f000 fa05 	bl	8007b10 <__smakebuf_r>
 8007706:	89a0      	ldrh	r0, [r4, #12]
 8007708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800770c:	f010 0301 	ands.w	r3, r0, #1
 8007710:	d00a      	beq.n	8007728 <__swsetup_r+0xbc>
 8007712:	2300      	movs	r3, #0
 8007714:	60a3      	str	r3, [r4, #8]
 8007716:	6963      	ldr	r3, [r4, #20]
 8007718:	425b      	negs	r3, r3
 800771a:	61a3      	str	r3, [r4, #24]
 800771c:	6923      	ldr	r3, [r4, #16]
 800771e:	b943      	cbnz	r3, 8007732 <__swsetup_r+0xc6>
 8007720:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007724:	d1ba      	bne.n	800769c <__swsetup_r+0x30>
 8007726:	bd70      	pop	{r4, r5, r6, pc}
 8007728:	0781      	lsls	r1, r0, #30
 800772a:	bf58      	it	pl
 800772c:	6963      	ldrpl	r3, [r4, #20]
 800772e:	60a3      	str	r3, [r4, #8]
 8007730:	e7f4      	b.n	800771c <__swsetup_r+0xb0>
 8007732:	2000      	movs	r0, #0
 8007734:	e7f7      	b.n	8007726 <__swsetup_r+0xba>
 8007736:	bf00      	nop
 8007738:	2000003c 	.word	0x2000003c
 800773c:	0800863c 	.word	0x0800863c
 8007740:	0800865c 	.word	0x0800865c
 8007744:	0800861c 	.word	0x0800861c

08007748 <abort>:
 8007748:	2006      	movs	r0, #6
 800774a:	b508      	push	{r3, lr}
 800774c:	f000 fa50 	bl	8007bf0 <raise>
 8007750:	2001      	movs	r0, #1
 8007752:	f7fa f8c0 	bl	80018d6 <_exit>
	...

08007758 <__sflush_r>:
 8007758:	898a      	ldrh	r2, [r1, #12]
 800775a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775c:	4605      	mov	r5, r0
 800775e:	0710      	lsls	r0, r2, #28
 8007760:	460c      	mov	r4, r1
 8007762:	d457      	bmi.n	8007814 <__sflush_r+0xbc>
 8007764:	684b      	ldr	r3, [r1, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	dc04      	bgt.n	8007774 <__sflush_r+0x1c>
 800776a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	dc01      	bgt.n	8007774 <__sflush_r+0x1c>
 8007770:	2000      	movs	r0, #0
 8007772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007774:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007776:	2e00      	cmp	r6, #0
 8007778:	d0fa      	beq.n	8007770 <__sflush_r+0x18>
 800777a:	2300      	movs	r3, #0
 800777c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007780:	682f      	ldr	r7, [r5, #0]
 8007782:	602b      	str	r3, [r5, #0]
 8007784:	d032      	beq.n	80077ec <__sflush_r+0x94>
 8007786:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	075a      	lsls	r2, r3, #29
 800778c:	d505      	bpl.n	800779a <__sflush_r+0x42>
 800778e:	6863      	ldr	r3, [r4, #4]
 8007790:	1ac0      	subs	r0, r0, r3
 8007792:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007794:	b10b      	cbz	r3, 800779a <__sflush_r+0x42>
 8007796:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007798:	1ac0      	subs	r0, r0, r3
 800779a:	2300      	movs	r3, #0
 800779c:	4602      	mov	r2, r0
 800779e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077a0:	4628      	mov	r0, r5
 80077a2:	6a21      	ldr	r1, [r4, #32]
 80077a4:	47b0      	blx	r6
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	d106      	bne.n	80077ba <__sflush_r+0x62>
 80077ac:	6829      	ldr	r1, [r5, #0]
 80077ae:	291d      	cmp	r1, #29
 80077b0:	d82c      	bhi.n	800780c <__sflush_r+0xb4>
 80077b2:	4a29      	ldr	r2, [pc, #164]	; (8007858 <__sflush_r+0x100>)
 80077b4:	40ca      	lsrs	r2, r1
 80077b6:	07d6      	lsls	r6, r2, #31
 80077b8:	d528      	bpl.n	800780c <__sflush_r+0xb4>
 80077ba:	2200      	movs	r2, #0
 80077bc:	6062      	str	r2, [r4, #4]
 80077be:	6922      	ldr	r2, [r4, #16]
 80077c0:	04d9      	lsls	r1, r3, #19
 80077c2:	6022      	str	r2, [r4, #0]
 80077c4:	d504      	bpl.n	80077d0 <__sflush_r+0x78>
 80077c6:	1c42      	adds	r2, r0, #1
 80077c8:	d101      	bne.n	80077ce <__sflush_r+0x76>
 80077ca:	682b      	ldr	r3, [r5, #0]
 80077cc:	b903      	cbnz	r3, 80077d0 <__sflush_r+0x78>
 80077ce:	6560      	str	r0, [r4, #84]	; 0x54
 80077d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077d2:	602f      	str	r7, [r5, #0]
 80077d4:	2900      	cmp	r1, #0
 80077d6:	d0cb      	beq.n	8007770 <__sflush_r+0x18>
 80077d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077dc:	4299      	cmp	r1, r3
 80077de:	d002      	beq.n	80077e6 <__sflush_r+0x8e>
 80077e0:	4628      	mov	r0, r5
 80077e2:	f7ff faad 	bl	8006d40 <_free_r>
 80077e6:	2000      	movs	r0, #0
 80077e8:	6360      	str	r0, [r4, #52]	; 0x34
 80077ea:	e7c2      	b.n	8007772 <__sflush_r+0x1a>
 80077ec:	6a21      	ldr	r1, [r4, #32]
 80077ee:	2301      	movs	r3, #1
 80077f0:	4628      	mov	r0, r5
 80077f2:	47b0      	blx	r6
 80077f4:	1c41      	adds	r1, r0, #1
 80077f6:	d1c7      	bne.n	8007788 <__sflush_r+0x30>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0c4      	beq.n	8007788 <__sflush_r+0x30>
 80077fe:	2b1d      	cmp	r3, #29
 8007800:	d001      	beq.n	8007806 <__sflush_r+0xae>
 8007802:	2b16      	cmp	r3, #22
 8007804:	d101      	bne.n	800780a <__sflush_r+0xb2>
 8007806:	602f      	str	r7, [r5, #0]
 8007808:	e7b2      	b.n	8007770 <__sflush_r+0x18>
 800780a:	89a3      	ldrh	r3, [r4, #12]
 800780c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007810:	81a3      	strh	r3, [r4, #12]
 8007812:	e7ae      	b.n	8007772 <__sflush_r+0x1a>
 8007814:	690f      	ldr	r7, [r1, #16]
 8007816:	2f00      	cmp	r7, #0
 8007818:	d0aa      	beq.n	8007770 <__sflush_r+0x18>
 800781a:	0793      	lsls	r3, r2, #30
 800781c:	bf18      	it	ne
 800781e:	2300      	movne	r3, #0
 8007820:	680e      	ldr	r6, [r1, #0]
 8007822:	bf08      	it	eq
 8007824:	694b      	ldreq	r3, [r1, #20]
 8007826:	1bf6      	subs	r6, r6, r7
 8007828:	600f      	str	r7, [r1, #0]
 800782a:	608b      	str	r3, [r1, #8]
 800782c:	2e00      	cmp	r6, #0
 800782e:	dd9f      	ble.n	8007770 <__sflush_r+0x18>
 8007830:	4633      	mov	r3, r6
 8007832:	463a      	mov	r2, r7
 8007834:	4628      	mov	r0, r5
 8007836:	6a21      	ldr	r1, [r4, #32]
 8007838:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800783c:	47e0      	blx	ip
 800783e:	2800      	cmp	r0, #0
 8007840:	dc06      	bgt.n	8007850 <__sflush_r+0xf8>
 8007842:	89a3      	ldrh	r3, [r4, #12]
 8007844:	f04f 30ff 	mov.w	r0, #4294967295
 8007848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800784c:	81a3      	strh	r3, [r4, #12]
 800784e:	e790      	b.n	8007772 <__sflush_r+0x1a>
 8007850:	4407      	add	r7, r0
 8007852:	1a36      	subs	r6, r6, r0
 8007854:	e7ea      	b.n	800782c <__sflush_r+0xd4>
 8007856:	bf00      	nop
 8007858:	20400001 	.word	0x20400001

0800785c <_fflush_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	690b      	ldr	r3, [r1, #16]
 8007860:	4605      	mov	r5, r0
 8007862:	460c      	mov	r4, r1
 8007864:	b913      	cbnz	r3, 800786c <_fflush_r+0x10>
 8007866:	2500      	movs	r5, #0
 8007868:	4628      	mov	r0, r5
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	b118      	cbz	r0, 8007876 <_fflush_r+0x1a>
 800786e:	6983      	ldr	r3, [r0, #24]
 8007870:	b90b      	cbnz	r3, 8007876 <_fflush_r+0x1a>
 8007872:	f000 f887 	bl	8007984 <__sinit>
 8007876:	4b14      	ldr	r3, [pc, #80]	; (80078c8 <_fflush_r+0x6c>)
 8007878:	429c      	cmp	r4, r3
 800787a:	d11b      	bne.n	80078b4 <_fflush_r+0x58>
 800787c:	686c      	ldr	r4, [r5, #4]
 800787e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0ef      	beq.n	8007866 <_fflush_r+0xa>
 8007886:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007888:	07d0      	lsls	r0, r2, #31
 800788a:	d404      	bmi.n	8007896 <_fflush_r+0x3a>
 800788c:	0599      	lsls	r1, r3, #22
 800788e:	d402      	bmi.n	8007896 <_fflush_r+0x3a>
 8007890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007892:	f000 f915 	bl	8007ac0 <__retarget_lock_acquire_recursive>
 8007896:	4628      	mov	r0, r5
 8007898:	4621      	mov	r1, r4
 800789a:	f7ff ff5d 	bl	8007758 <__sflush_r>
 800789e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078a0:	4605      	mov	r5, r0
 80078a2:	07da      	lsls	r2, r3, #31
 80078a4:	d4e0      	bmi.n	8007868 <_fflush_r+0xc>
 80078a6:	89a3      	ldrh	r3, [r4, #12]
 80078a8:	059b      	lsls	r3, r3, #22
 80078aa:	d4dd      	bmi.n	8007868 <_fflush_r+0xc>
 80078ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ae:	f000 f908 	bl	8007ac2 <__retarget_lock_release_recursive>
 80078b2:	e7d9      	b.n	8007868 <_fflush_r+0xc>
 80078b4:	4b05      	ldr	r3, [pc, #20]	; (80078cc <_fflush_r+0x70>)
 80078b6:	429c      	cmp	r4, r3
 80078b8:	d101      	bne.n	80078be <_fflush_r+0x62>
 80078ba:	68ac      	ldr	r4, [r5, #8]
 80078bc:	e7df      	b.n	800787e <_fflush_r+0x22>
 80078be:	4b04      	ldr	r3, [pc, #16]	; (80078d0 <_fflush_r+0x74>)
 80078c0:	429c      	cmp	r4, r3
 80078c2:	bf08      	it	eq
 80078c4:	68ec      	ldreq	r4, [r5, #12]
 80078c6:	e7da      	b.n	800787e <_fflush_r+0x22>
 80078c8:	0800863c 	.word	0x0800863c
 80078cc:	0800865c 	.word	0x0800865c
 80078d0:	0800861c 	.word	0x0800861c

080078d4 <std>:
 80078d4:	2300      	movs	r3, #0
 80078d6:	b510      	push	{r4, lr}
 80078d8:	4604      	mov	r4, r0
 80078da:	e9c0 3300 	strd	r3, r3, [r0]
 80078de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078e2:	6083      	str	r3, [r0, #8]
 80078e4:	8181      	strh	r1, [r0, #12]
 80078e6:	6643      	str	r3, [r0, #100]	; 0x64
 80078e8:	81c2      	strh	r2, [r0, #14]
 80078ea:	6183      	str	r3, [r0, #24]
 80078ec:	4619      	mov	r1, r3
 80078ee:	2208      	movs	r2, #8
 80078f0:	305c      	adds	r0, #92	; 0x5c
 80078f2:	f7fd fb65 	bl	8004fc0 <memset>
 80078f6:	4b05      	ldr	r3, [pc, #20]	; (800790c <std+0x38>)
 80078f8:	6224      	str	r4, [r4, #32]
 80078fa:	6263      	str	r3, [r4, #36]	; 0x24
 80078fc:	4b04      	ldr	r3, [pc, #16]	; (8007910 <std+0x3c>)
 80078fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8007900:	4b04      	ldr	r3, [pc, #16]	; (8007914 <std+0x40>)
 8007902:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007904:	4b04      	ldr	r3, [pc, #16]	; (8007918 <std+0x44>)
 8007906:	6323      	str	r3, [r4, #48]	; 0x30
 8007908:	bd10      	pop	{r4, pc}
 800790a:	bf00      	nop
 800790c:	08007c29 	.word	0x08007c29
 8007910:	08007c4b 	.word	0x08007c4b
 8007914:	08007c83 	.word	0x08007c83
 8007918:	08007ca7 	.word	0x08007ca7

0800791c <_cleanup_r>:
 800791c:	4901      	ldr	r1, [pc, #4]	; (8007924 <_cleanup_r+0x8>)
 800791e:	f000 b8af 	b.w	8007a80 <_fwalk_reent>
 8007922:	bf00      	nop
 8007924:	0800785d 	.word	0x0800785d

08007928 <__sfmoreglue>:
 8007928:	2268      	movs	r2, #104	; 0x68
 800792a:	b570      	push	{r4, r5, r6, lr}
 800792c:	1e4d      	subs	r5, r1, #1
 800792e:	4355      	muls	r5, r2
 8007930:	460e      	mov	r6, r1
 8007932:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007936:	f7ff fa6b 	bl	8006e10 <_malloc_r>
 800793a:	4604      	mov	r4, r0
 800793c:	b140      	cbz	r0, 8007950 <__sfmoreglue+0x28>
 800793e:	2100      	movs	r1, #0
 8007940:	e9c0 1600 	strd	r1, r6, [r0]
 8007944:	300c      	adds	r0, #12
 8007946:	60a0      	str	r0, [r4, #8]
 8007948:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800794c:	f7fd fb38 	bl	8004fc0 <memset>
 8007950:	4620      	mov	r0, r4
 8007952:	bd70      	pop	{r4, r5, r6, pc}

08007954 <__sfp_lock_acquire>:
 8007954:	4801      	ldr	r0, [pc, #4]	; (800795c <__sfp_lock_acquire+0x8>)
 8007956:	f000 b8b3 	b.w	8007ac0 <__retarget_lock_acquire_recursive>
 800795a:	bf00      	nop
 800795c:	20000341 	.word	0x20000341

08007960 <__sfp_lock_release>:
 8007960:	4801      	ldr	r0, [pc, #4]	; (8007968 <__sfp_lock_release+0x8>)
 8007962:	f000 b8ae 	b.w	8007ac2 <__retarget_lock_release_recursive>
 8007966:	bf00      	nop
 8007968:	20000341 	.word	0x20000341

0800796c <__sinit_lock_acquire>:
 800796c:	4801      	ldr	r0, [pc, #4]	; (8007974 <__sinit_lock_acquire+0x8>)
 800796e:	f000 b8a7 	b.w	8007ac0 <__retarget_lock_acquire_recursive>
 8007972:	bf00      	nop
 8007974:	20000342 	.word	0x20000342

08007978 <__sinit_lock_release>:
 8007978:	4801      	ldr	r0, [pc, #4]	; (8007980 <__sinit_lock_release+0x8>)
 800797a:	f000 b8a2 	b.w	8007ac2 <__retarget_lock_release_recursive>
 800797e:	bf00      	nop
 8007980:	20000342 	.word	0x20000342

08007984 <__sinit>:
 8007984:	b510      	push	{r4, lr}
 8007986:	4604      	mov	r4, r0
 8007988:	f7ff fff0 	bl	800796c <__sinit_lock_acquire>
 800798c:	69a3      	ldr	r3, [r4, #24]
 800798e:	b11b      	cbz	r3, 8007998 <__sinit+0x14>
 8007990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007994:	f7ff bff0 	b.w	8007978 <__sinit_lock_release>
 8007998:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800799c:	6523      	str	r3, [r4, #80]	; 0x50
 800799e:	4b13      	ldr	r3, [pc, #76]	; (80079ec <__sinit+0x68>)
 80079a0:	4a13      	ldr	r2, [pc, #76]	; (80079f0 <__sinit+0x6c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80079a6:	42a3      	cmp	r3, r4
 80079a8:	bf08      	it	eq
 80079aa:	2301      	moveq	r3, #1
 80079ac:	4620      	mov	r0, r4
 80079ae:	bf08      	it	eq
 80079b0:	61a3      	streq	r3, [r4, #24]
 80079b2:	f000 f81f 	bl	80079f4 <__sfp>
 80079b6:	6060      	str	r0, [r4, #4]
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 f81b 	bl	80079f4 <__sfp>
 80079be:	60a0      	str	r0, [r4, #8]
 80079c0:	4620      	mov	r0, r4
 80079c2:	f000 f817 	bl	80079f4 <__sfp>
 80079c6:	2200      	movs	r2, #0
 80079c8:	2104      	movs	r1, #4
 80079ca:	60e0      	str	r0, [r4, #12]
 80079cc:	6860      	ldr	r0, [r4, #4]
 80079ce:	f7ff ff81 	bl	80078d4 <std>
 80079d2:	2201      	movs	r2, #1
 80079d4:	2109      	movs	r1, #9
 80079d6:	68a0      	ldr	r0, [r4, #8]
 80079d8:	f7ff ff7c 	bl	80078d4 <std>
 80079dc:	2202      	movs	r2, #2
 80079de:	2112      	movs	r1, #18
 80079e0:	68e0      	ldr	r0, [r4, #12]
 80079e2:	f7ff ff77 	bl	80078d4 <std>
 80079e6:	2301      	movs	r3, #1
 80079e8:	61a3      	str	r3, [r4, #24]
 80079ea:	e7d1      	b.n	8007990 <__sinit+0xc>
 80079ec:	080082a4 	.word	0x080082a4
 80079f0:	0800791d 	.word	0x0800791d

080079f4 <__sfp>:
 80079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f6:	4607      	mov	r7, r0
 80079f8:	f7ff ffac 	bl	8007954 <__sfp_lock_acquire>
 80079fc:	4b1e      	ldr	r3, [pc, #120]	; (8007a78 <__sfp+0x84>)
 80079fe:	681e      	ldr	r6, [r3, #0]
 8007a00:	69b3      	ldr	r3, [r6, #24]
 8007a02:	b913      	cbnz	r3, 8007a0a <__sfp+0x16>
 8007a04:	4630      	mov	r0, r6
 8007a06:	f7ff ffbd 	bl	8007984 <__sinit>
 8007a0a:	3648      	adds	r6, #72	; 0x48
 8007a0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	d503      	bpl.n	8007a1c <__sfp+0x28>
 8007a14:	6833      	ldr	r3, [r6, #0]
 8007a16:	b30b      	cbz	r3, 8007a5c <__sfp+0x68>
 8007a18:	6836      	ldr	r6, [r6, #0]
 8007a1a:	e7f7      	b.n	8007a0c <__sfp+0x18>
 8007a1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a20:	b9d5      	cbnz	r5, 8007a58 <__sfp+0x64>
 8007a22:	4b16      	ldr	r3, [pc, #88]	; (8007a7c <__sfp+0x88>)
 8007a24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a28:	60e3      	str	r3, [r4, #12]
 8007a2a:	6665      	str	r5, [r4, #100]	; 0x64
 8007a2c:	f000 f847 	bl	8007abe <__retarget_lock_init_recursive>
 8007a30:	f7ff ff96 	bl	8007960 <__sfp_lock_release>
 8007a34:	2208      	movs	r2, #8
 8007a36:	4629      	mov	r1, r5
 8007a38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a40:	6025      	str	r5, [r4, #0]
 8007a42:	61a5      	str	r5, [r4, #24]
 8007a44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a48:	f7fd faba 	bl	8004fc0 <memset>
 8007a4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a54:	4620      	mov	r0, r4
 8007a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a58:	3468      	adds	r4, #104	; 0x68
 8007a5a:	e7d9      	b.n	8007a10 <__sfp+0x1c>
 8007a5c:	2104      	movs	r1, #4
 8007a5e:	4638      	mov	r0, r7
 8007a60:	f7ff ff62 	bl	8007928 <__sfmoreglue>
 8007a64:	4604      	mov	r4, r0
 8007a66:	6030      	str	r0, [r6, #0]
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d1d5      	bne.n	8007a18 <__sfp+0x24>
 8007a6c:	f7ff ff78 	bl	8007960 <__sfp_lock_release>
 8007a70:	230c      	movs	r3, #12
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	e7ee      	b.n	8007a54 <__sfp+0x60>
 8007a76:	bf00      	nop
 8007a78:	080082a4 	.word	0x080082a4
 8007a7c:	ffff0001 	.word	0xffff0001

08007a80 <_fwalk_reent>:
 8007a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a84:	4606      	mov	r6, r0
 8007a86:	4688      	mov	r8, r1
 8007a88:	2700      	movs	r7, #0
 8007a8a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a92:	f1b9 0901 	subs.w	r9, r9, #1
 8007a96:	d505      	bpl.n	8007aa4 <_fwalk_reent+0x24>
 8007a98:	6824      	ldr	r4, [r4, #0]
 8007a9a:	2c00      	cmp	r4, #0
 8007a9c:	d1f7      	bne.n	8007a8e <_fwalk_reent+0xe>
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aa4:	89ab      	ldrh	r3, [r5, #12]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d907      	bls.n	8007aba <_fwalk_reent+0x3a>
 8007aaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	d003      	beq.n	8007aba <_fwalk_reent+0x3a>
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	47c0      	blx	r8
 8007ab8:	4307      	orrs	r7, r0
 8007aba:	3568      	adds	r5, #104	; 0x68
 8007abc:	e7e9      	b.n	8007a92 <_fwalk_reent+0x12>

08007abe <__retarget_lock_init_recursive>:
 8007abe:	4770      	bx	lr

08007ac0 <__retarget_lock_acquire_recursive>:
 8007ac0:	4770      	bx	lr

08007ac2 <__retarget_lock_release_recursive>:
 8007ac2:	4770      	bx	lr

08007ac4 <__swhatbuf_r>:
 8007ac4:	b570      	push	{r4, r5, r6, lr}
 8007ac6:	460e      	mov	r6, r1
 8007ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007acc:	4614      	mov	r4, r2
 8007ace:	2900      	cmp	r1, #0
 8007ad0:	461d      	mov	r5, r3
 8007ad2:	b096      	sub	sp, #88	; 0x58
 8007ad4:	da08      	bge.n	8007ae8 <__swhatbuf_r+0x24>
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007adc:	602a      	str	r2, [r5, #0]
 8007ade:	061a      	lsls	r2, r3, #24
 8007ae0:	d410      	bmi.n	8007b04 <__swhatbuf_r+0x40>
 8007ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ae6:	e00e      	b.n	8007b06 <__swhatbuf_r+0x42>
 8007ae8:	466a      	mov	r2, sp
 8007aea:	f000 f903 	bl	8007cf4 <_fstat_r>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	dbf1      	blt.n	8007ad6 <__swhatbuf_r+0x12>
 8007af2:	9a01      	ldr	r2, [sp, #4]
 8007af4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007af8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007afc:	425a      	negs	r2, r3
 8007afe:	415a      	adcs	r2, r3
 8007b00:	602a      	str	r2, [r5, #0]
 8007b02:	e7ee      	b.n	8007ae2 <__swhatbuf_r+0x1e>
 8007b04:	2340      	movs	r3, #64	; 0x40
 8007b06:	2000      	movs	r0, #0
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	b016      	add	sp, #88	; 0x58
 8007b0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b10 <__smakebuf_r>:
 8007b10:	898b      	ldrh	r3, [r1, #12]
 8007b12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b14:	079d      	lsls	r5, r3, #30
 8007b16:	4606      	mov	r6, r0
 8007b18:	460c      	mov	r4, r1
 8007b1a:	d507      	bpl.n	8007b2c <__smakebuf_r+0x1c>
 8007b1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	6123      	str	r3, [r4, #16]
 8007b24:	2301      	movs	r3, #1
 8007b26:	6163      	str	r3, [r4, #20]
 8007b28:	b002      	add	sp, #8
 8007b2a:	bd70      	pop	{r4, r5, r6, pc}
 8007b2c:	466a      	mov	r2, sp
 8007b2e:	ab01      	add	r3, sp, #4
 8007b30:	f7ff ffc8 	bl	8007ac4 <__swhatbuf_r>
 8007b34:	9900      	ldr	r1, [sp, #0]
 8007b36:	4605      	mov	r5, r0
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f7ff f969 	bl	8006e10 <_malloc_r>
 8007b3e:	b948      	cbnz	r0, 8007b54 <__smakebuf_r+0x44>
 8007b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b44:	059a      	lsls	r2, r3, #22
 8007b46:	d4ef      	bmi.n	8007b28 <__smakebuf_r+0x18>
 8007b48:	f023 0303 	bic.w	r3, r3, #3
 8007b4c:	f043 0302 	orr.w	r3, r3, #2
 8007b50:	81a3      	strh	r3, [r4, #12]
 8007b52:	e7e3      	b.n	8007b1c <__smakebuf_r+0xc>
 8007b54:	4b0d      	ldr	r3, [pc, #52]	; (8007b8c <__smakebuf_r+0x7c>)
 8007b56:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b58:	89a3      	ldrh	r3, [r4, #12]
 8007b5a:	6020      	str	r0, [r4, #0]
 8007b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b60:	81a3      	strh	r3, [r4, #12]
 8007b62:	9b00      	ldr	r3, [sp, #0]
 8007b64:	6120      	str	r0, [r4, #16]
 8007b66:	6163      	str	r3, [r4, #20]
 8007b68:	9b01      	ldr	r3, [sp, #4]
 8007b6a:	b15b      	cbz	r3, 8007b84 <__smakebuf_r+0x74>
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b72:	f000 f8d1 	bl	8007d18 <_isatty_r>
 8007b76:	b128      	cbz	r0, 8007b84 <__smakebuf_r+0x74>
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	f023 0303 	bic.w	r3, r3, #3
 8007b7e:	f043 0301 	orr.w	r3, r3, #1
 8007b82:	81a3      	strh	r3, [r4, #12]
 8007b84:	89a0      	ldrh	r0, [r4, #12]
 8007b86:	4305      	orrs	r5, r0
 8007b88:	81a5      	strh	r5, [r4, #12]
 8007b8a:	e7cd      	b.n	8007b28 <__smakebuf_r+0x18>
 8007b8c:	0800791d 	.word	0x0800791d

08007b90 <_malloc_usable_size_r>:
 8007b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b94:	1f18      	subs	r0, r3, #4
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bfbc      	itt	lt
 8007b9a:	580b      	ldrlt	r3, [r1, r0]
 8007b9c:	18c0      	addlt	r0, r0, r3
 8007b9e:	4770      	bx	lr

08007ba0 <_raise_r>:
 8007ba0:	291f      	cmp	r1, #31
 8007ba2:	b538      	push	{r3, r4, r5, lr}
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	460d      	mov	r5, r1
 8007ba8:	d904      	bls.n	8007bb4 <_raise_r+0x14>
 8007baa:	2316      	movs	r3, #22
 8007bac:	6003      	str	r3, [r0, #0]
 8007bae:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007bb6:	b112      	cbz	r2, 8007bbe <_raise_r+0x1e>
 8007bb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bbc:	b94b      	cbnz	r3, 8007bd2 <_raise_r+0x32>
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f000 f830 	bl	8007c24 <_getpid_r>
 8007bc4:	462a      	mov	r2, r5
 8007bc6:	4601      	mov	r1, r0
 8007bc8:	4620      	mov	r0, r4
 8007bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bce:	f000 b817 	b.w	8007c00 <_kill_r>
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d00a      	beq.n	8007bec <_raise_r+0x4c>
 8007bd6:	1c59      	adds	r1, r3, #1
 8007bd8:	d103      	bne.n	8007be2 <_raise_r+0x42>
 8007bda:	2316      	movs	r3, #22
 8007bdc:	6003      	str	r3, [r0, #0]
 8007bde:	2001      	movs	r0, #1
 8007be0:	e7e7      	b.n	8007bb2 <_raise_r+0x12>
 8007be2:	2400      	movs	r4, #0
 8007be4:	4628      	mov	r0, r5
 8007be6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007bea:	4798      	blx	r3
 8007bec:	2000      	movs	r0, #0
 8007bee:	e7e0      	b.n	8007bb2 <_raise_r+0x12>

08007bf0 <raise>:
 8007bf0:	4b02      	ldr	r3, [pc, #8]	; (8007bfc <raise+0xc>)
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	f7ff bfd3 	b.w	8007ba0 <_raise_r>
 8007bfa:	bf00      	nop
 8007bfc:	2000003c 	.word	0x2000003c

08007c00 <_kill_r>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	2300      	movs	r3, #0
 8007c04:	4d06      	ldr	r5, [pc, #24]	; (8007c20 <_kill_r+0x20>)
 8007c06:	4604      	mov	r4, r0
 8007c08:	4608      	mov	r0, r1
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	602b      	str	r3, [r5, #0]
 8007c0e:	f7f9 fe52 	bl	80018b6 <_kill>
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	d102      	bne.n	8007c1c <_kill_r+0x1c>
 8007c16:	682b      	ldr	r3, [r5, #0]
 8007c18:	b103      	cbz	r3, 8007c1c <_kill_r+0x1c>
 8007c1a:	6023      	str	r3, [r4, #0]
 8007c1c:	bd38      	pop	{r3, r4, r5, pc}
 8007c1e:	bf00      	nop
 8007c20:	2000033c 	.word	0x2000033c

08007c24 <_getpid_r>:
 8007c24:	f7f9 be40 	b.w	80018a8 <_getpid>

08007c28 <__sread>:
 8007c28:	b510      	push	{r4, lr}
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c30:	f000 f894 	bl	8007d5c <_read_r>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	bfab      	itete	ge
 8007c38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c3a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c3c:	181b      	addge	r3, r3, r0
 8007c3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c42:	bfac      	ite	ge
 8007c44:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c46:	81a3      	strhlt	r3, [r4, #12]
 8007c48:	bd10      	pop	{r4, pc}

08007c4a <__swrite>:
 8007c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c4e:	461f      	mov	r7, r3
 8007c50:	898b      	ldrh	r3, [r1, #12]
 8007c52:	4605      	mov	r5, r0
 8007c54:	05db      	lsls	r3, r3, #23
 8007c56:	460c      	mov	r4, r1
 8007c58:	4616      	mov	r6, r2
 8007c5a:	d505      	bpl.n	8007c68 <__swrite+0x1e>
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c64:	f000 f868 	bl	8007d38 <_lseek_r>
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	4632      	mov	r2, r6
 8007c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c70:	81a3      	strh	r3, [r4, #12]
 8007c72:	4628      	mov	r0, r5
 8007c74:	463b      	mov	r3, r7
 8007c76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7e:	f000 b817 	b.w	8007cb0 <_write_r>

08007c82 <__sseek>:
 8007c82:	b510      	push	{r4, lr}
 8007c84:	460c      	mov	r4, r1
 8007c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c8a:	f000 f855 	bl	8007d38 <_lseek_r>
 8007c8e:	1c43      	adds	r3, r0, #1
 8007c90:	89a3      	ldrh	r3, [r4, #12]
 8007c92:	bf15      	itete	ne
 8007c94:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c9e:	81a3      	strheq	r3, [r4, #12]
 8007ca0:	bf18      	it	ne
 8007ca2:	81a3      	strhne	r3, [r4, #12]
 8007ca4:	bd10      	pop	{r4, pc}

08007ca6 <__sclose>:
 8007ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007caa:	f000 b813 	b.w	8007cd4 <_close_r>
	...

08007cb0 <_write_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	2200      	movs	r2, #0
 8007cba:	4d05      	ldr	r5, [pc, #20]	; (8007cd0 <_write_r+0x20>)
 8007cbc:	602a      	str	r2, [r5, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f7f9 fe30 	bl	8001924 <_write>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	d102      	bne.n	8007cce <_write_r+0x1e>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	b103      	cbz	r3, 8007cce <_write_r+0x1e>
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	bd38      	pop	{r3, r4, r5, pc}
 8007cd0:	2000033c 	.word	0x2000033c

08007cd4 <_close_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	4d05      	ldr	r5, [pc, #20]	; (8007cf0 <_close_r+0x1c>)
 8007cda:	4604      	mov	r4, r0
 8007cdc:	4608      	mov	r0, r1
 8007cde:	602b      	str	r3, [r5, #0]
 8007ce0:	f7f9 fe3c 	bl	800195c <_close>
 8007ce4:	1c43      	adds	r3, r0, #1
 8007ce6:	d102      	bne.n	8007cee <_close_r+0x1a>
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	b103      	cbz	r3, 8007cee <_close_r+0x1a>
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	bd38      	pop	{r3, r4, r5, pc}
 8007cf0:	2000033c 	.word	0x2000033c

08007cf4 <_fstat_r>:
 8007cf4:	b538      	push	{r3, r4, r5, lr}
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	4d06      	ldr	r5, [pc, #24]	; (8007d14 <_fstat_r+0x20>)
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	4611      	mov	r1, r2
 8007d00:	602b      	str	r3, [r5, #0]
 8007d02:	f7f9 fe36 	bl	8001972 <_fstat>
 8007d06:	1c43      	adds	r3, r0, #1
 8007d08:	d102      	bne.n	8007d10 <_fstat_r+0x1c>
 8007d0a:	682b      	ldr	r3, [r5, #0]
 8007d0c:	b103      	cbz	r3, 8007d10 <_fstat_r+0x1c>
 8007d0e:	6023      	str	r3, [r4, #0]
 8007d10:	bd38      	pop	{r3, r4, r5, pc}
 8007d12:	bf00      	nop
 8007d14:	2000033c 	.word	0x2000033c

08007d18 <_isatty_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	4d05      	ldr	r5, [pc, #20]	; (8007d34 <_isatty_r+0x1c>)
 8007d1e:	4604      	mov	r4, r0
 8007d20:	4608      	mov	r0, r1
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	f7f9 fe34 	bl	8001990 <_isatty>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_isatty_r+0x1a>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_isatty_r+0x1a>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	2000033c 	.word	0x2000033c

08007d38 <_lseek_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	4608      	mov	r0, r1
 8007d3e:	4611      	mov	r1, r2
 8007d40:	2200      	movs	r2, #0
 8007d42:	4d05      	ldr	r5, [pc, #20]	; (8007d58 <_lseek_r+0x20>)
 8007d44:	602a      	str	r2, [r5, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	f7f9 fe2c 	bl	80019a4 <_lseek>
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	d102      	bne.n	8007d56 <_lseek_r+0x1e>
 8007d50:	682b      	ldr	r3, [r5, #0]
 8007d52:	b103      	cbz	r3, 8007d56 <_lseek_r+0x1e>
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	2000033c 	.word	0x2000033c

08007d5c <_read_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4608      	mov	r0, r1
 8007d62:	4611      	mov	r1, r2
 8007d64:	2200      	movs	r2, #0
 8007d66:	4d05      	ldr	r5, [pc, #20]	; (8007d7c <_read_r+0x20>)
 8007d68:	602a      	str	r2, [r5, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f7f9 fdbd 	bl	80018ea <_read>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_read_r+0x1e>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_read_r+0x1e>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	2000033c 	.word	0x2000033c

08007d80 <atan2>:
 8007d80:	f000 b802 	b.w	8007d88 <__ieee754_atan2>
 8007d84:	0000      	movs	r0, r0
	...

08007d88 <__ieee754_atan2>:
 8007d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8c:	4692      	mov	sl, r2
 8007d8e:	4699      	mov	r9, r3
 8007d90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d94:	461f      	mov	r7, r3
 8007d96:	f1ca 0300 	rsb	r3, sl, #0
 8007d9a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007f20 <__ieee754_atan2+0x198>
 8007d9e:	ea43 030a 	orr.w	r3, r3, sl
 8007da2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007da6:	4573      	cmp	r3, lr
 8007da8:	4604      	mov	r4, r0
 8007daa:	460d      	mov	r5, r1
 8007dac:	d808      	bhi.n	8007dc0 <__ieee754_atan2+0x38>
 8007dae:	4246      	negs	r6, r0
 8007db0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007db4:	4306      	orrs	r6, r0
 8007db6:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8007dba:	4576      	cmp	r6, lr
 8007dbc:	468c      	mov	ip, r1
 8007dbe:	d908      	bls.n	8007dd2 <__ieee754_atan2+0x4a>
 8007dc0:	4652      	mov	r2, sl
 8007dc2:	464b      	mov	r3, r9
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7f8 f9d0 	bl	800016c <__adddf3>
 8007dcc:	4604      	mov	r4, r0
 8007dce:	460d      	mov	r5, r1
 8007dd0:	e019      	b.n	8007e06 <__ieee754_atan2+0x7e>
 8007dd2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8007dd6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007dda:	ea56 060a 	orrs.w	r6, r6, sl
 8007dde:	d103      	bne.n	8007de8 <__ieee754_atan2+0x60>
 8007de0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de4:	f000 b8a4 	b.w	8007f30 <atan>
 8007de8:	17be      	asrs	r6, r7, #30
 8007dea:	f006 0602 	and.w	r6, r6, #2
 8007dee:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007df2:	ea53 0100 	orrs.w	r1, r3, r0
 8007df6:	d10a      	bne.n	8007e0e <__ieee754_atan2+0x86>
 8007df8:	2e02      	cmp	r6, #2
 8007dfa:	d067      	beq.n	8007ecc <__ieee754_atan2+0x144>
 8007dfc:	2e03      	cmp	r6, #3
 8007dfe:	d102      	bne.n	8007e06 <__ieee754_atan2+0x7e>
 8007e00:	a53b      	add	r5, pc, #236	; (adr r5, 8007ef0 <__ieee754_atan2+0x168>)
 8007e02:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e06:	4620      	mov	r0, r4
 8007e08:	4629      	mov	r1, r5
 8007e0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0e:	ea52 010a 	orrs.w	r1, r2, sl
 8007e12:	d106      	bne.n	8007e22 <__ieee754_atan2+0x9a>
 8007e14:	f1bc 0f00 	cmp.w	ip, #0
 8007e18:	da63      	bge.n	8007ee2 <__ieee754_atan2+0x15a>
 8007e1a:	a537      	add	r5, pc, #220	; (adr r5, 8007ef8 <__ieee754_atan2+0x170>)
 8007e1c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e20:	e7f1      	b.n	8007e06 <__ieee754_atan2+0x7e>
 8007e22:	4572      	cmp	r2, lr
 8007e24:	d10f      	bne.n	8007e46 <__ieee754_atan2+0xbe>
 8007e26:	4293      	cmp	r3, r2
 8007e28:	f106 36ff 	add.w	r6, r6, #4294967295
 8007e2c:	d107      	bne.n	8007e3e <__ieee754_atan2+0xb6>
 8007e2e:	2e02      	cmp	r6, #2
 8007e30:	d850      	bhi.n	8007ed4 <__ieee754_atan2+0x14c>
 8007e32:	4b3c      	ldr	r3, [pc, #240]	; (8007f24 <__ieee754_atan2+0x19c>)
 8007e34:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007e38:	e9d6 4500 	ldrd	r4, r5, [r6]
 8007e3c:	e7e3      	b.n	8007e06 <__ieee754_atan2+0x7e>
 8007e3e:	2e02      	cmp	r6, #2
 8007e40:	d84c      	bhi.n	8007edc <__ieee754_atan2+0x154>
 8007e42:	4b39      	ldr	r3, [pc, #228]	; (8007f28 <__ieee754_atan2+0x1a0>)
 8007e44:	e7f6      	b.n	8007e34 <__ieee754_atan2+0xac>
 8007e46:	4573      	cmp	r3, lr
 8007e48:	d0e4      	beq.n	8007e14 <__ieee754_atan2+0x8c>
 8007e4a:	1a9b      	subs	r3, r3, r2
 8007e4c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007e50:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e54:	da20      	bge.n	8007e98 <__ieee754_atan2+0x110>
 8007e56:	2f00      	cmp	r7, #0
 8007e58:	da01      	bge.n	8007e5e <__ieee754_atan2+0xd6>
 8007e5a:	323c      	adds	r2, #60	; 0x3c
 8007e5c:	db20      	blt.n	8007ea0 <__ieee754_atan2+0x118>
 8007e5e:	4652      	mov	r2, sl
 8007e60:	464b      	mov	r3, r9
 8007e62:	4620      	mov	r0, r4
 8007e64:	4629      	mov	r1, r5
 8007e66:	f7f8 fc61 	bl	800072c <__aeabi_ddiv>
 8007e6a:	f000 f9eb 	bl	8008244 <fabs>
 8007e6e:	f000 f85f 	bl	8007f30 <atan>
 8007e72:	4604      	mov	r4, r0
 8007e74:	460d      	mov	r5, r1
 8007e76:	2e01      	cmp	r6, #1
 8007e78:	d015      	beq.n	8007ea6 <__ieee754_atan2+0x11e>
 8007e7a:	2e02      	cmp	r6, #2
 8007e7c:	d017      	beq.n	8007eae <__ieee754_atan2+0x126>
 8007e7e:	2e00      	cmp	r6, #0
 8007e80:	d0c1      	beq.n	8007e06 <__ieee754_atan2+0x7e>
 8007e82:	a31f      	add	r3, pc, #124	; (adr r3, 8007f00 <__ieee754_atan2+0x178>)
 8007e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e88:	4620      	mov	r0, r4
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	f7f8 f96c 	bl	8000168 <__aeabi_dsub>
 8007e90:	a31d      	add	r3, pc, #116	; (adr r3, 8007f08 <__ieee754_atan2+0x180>)
 8007e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e96:	e016      	b.n	8007ec6 <__ieee754_atan2+0x13e>
 8007e98:	a51d      	add	r5, pc, #116	; (adr r5, 8007f10 <__ieee754_atan2+0x188>)
 8007e9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e9e:	e7ea      	b.n	8007e76 <__ieee754_atan2+0xee>
 8007ea0:	2400      	movs	r4, #0
 8007ea2:	2500      	movs	r5, #0
 8007ea4:	e7e7      	b.n	8007e76 <__ieee754_atan2+0xee>
 8007ea6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007eaa:	461d      	mov	r5, r3
 8007eac:	e7ab      	b.n	8007e06 <__ieee754_atan2+0x7e>
 8007eae:	a314      	add	r3, pc, #80	; (adr r3, 8007f00 <__ieee754_atan2+0x178>)
 8007eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	f7f8 f956 	bl	8000168 <__aeabi_dsub>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	a111      	add	r1, pc, #68	; (adr r1, 8007f08 <__ieee754_atan2+0x180>)
 8007ec2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ec6:	f7f8 f94f 	bl	8000168 <__aeabi_dsub>
 8007eca:	e77f      	b.n	8007dcc <__ieee754_atan2+0x44>
 8007ecc:	a50e      	add	r5, pc, #56	; (adr r5, 8007f08 <__ieee754_atan2+0x180>)
 8007ece:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ed2:	e798      	b.n	8007e06 <__ieee754_atan2+0x7e>
 8007ed4:	a510      	add	r5, pc, #64	; (adr r5, 8007f18 <__ieee754_atan2+0x190>)
 8007ed6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007eda:	e794      	b.n	8007e06 <__ieee754_atan2+0x7e>
 8007edc:	2400      	movs	r4, #0
 8007ede:	2500      	movs	r5, #0
 8007ee0:	e791      	b.n	8007e06 <__ieee754_atan2+0x7e>
 8007ee2:	a50b      	add	r5, pc, #44	; (adr r5, 8007f10 <__ieee754_atan2+0x188>)
 8007ee4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ee8:	e78d      	b.n	8007e06 <__ieee754_atan2+0x7e>
 8007eea:	bf00      	nop
 8007eec:	f3af 8000 	nop.w
 8007ef0:	54442d18 	.word	0x54442d18
 8007ef4:	c00921fb 	.word	0xc00921fb
 8007ef8:	54442d18 	.word	0x54442d18
 8007efc:	bff921fb 	.word	0xbff921fb
 8007f00:	33145c07 	.word	0x33145c07
 8007f04:	3ca1a626 	.word	0x3ca1a626
 8007f08:	54442d18 	.word	0x54442d18
 8007f0c:	400921fb 	.word	0x400921fb
 8007f10:	54442d18 	.word	0x54442d18
 8007f14:	3ff921fb 	.word	0x3ff921fb
 8007f18:	54442d18 	.word	0x54442d18
 8007f1c:	3fe921fb 	.word	0x3fe921fb
 8007f20:	7ff00000 	.word	0x7ff00000
 8007f24:	08008680 	.word	0x08008680
 8007f28:	08008698 	.word	0x08008698
 8007f2c:	00000000 	.word	0x00000000

08007f30 <atan>:
 8007f30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f34:	4bb6      	ldr	r3, [pc, #728]	; (8008210 <atan+0x2e0>)
 8007f36:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007f3a:	429e      	cmp	r6, r3
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	460d      	mov	r5, r1
 8007f40:	468b      	mov	fp, r1
 8007f42:	dd17      	ble.n	8007f74 <atan+0x44>
 8007f44:	4bb3      	ldr	r3, [pc, #716]	; (8008214 <atan+0x2e4>)
 8007f46:	429e      	cmp	r6, r3
 8007f48:	dc01      	bgt.n	8007f4e <atan+0x1e>
 8007f4a:	d109      	bne.n	8007f60 <atan+0x30>
 8007f4c:	b140      	cbz	r0, 8007f60 <atan+0x30>
 8007f4e:	4622      	mov	r2, r4
 8007f50:	462b      	mov	r3, r5
 8007f52:	4620      	mov	r0, r4
 8007f54:	4629      	mov	r1, r5
 8007f56:	f7f8 f909 	bl	800016c <__adddf3>
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	460d      	mov	r5, r1
 8007f5e:	e005      	b.n	8007f6c <atan+0x3c>
 8007f60:	f1bb 0f00 	cmp.w	fp, #0
 8007f64:	4cac      	ldr	r4, [pc, #688]	; (8008218 <atan+0x2e8>)
 8007f66:	f300 8121 	bgt.w	80081ac <atan+0x27c>
 8007f6a:	4dac      	ldr	r5, [pc, #688]	; (800821c <atan+0x2ec>)
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	4629      	mov	r1, r5
 8007f70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f74:	4baa      	ldr	r3, [pc, #680]	; (8008220 <atan+0x2f0>)
 8007f76:	429e      	cmp	r6, r3
 8007f78:	dc11      	bgt.n	8007f9e <atan+0x6e>
 8007f7a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007f7e:	429e      	cmp	r6, r3
 8007f80:	dc0a      	bgt.n	8007f98 <atan+0x68>
 8007f82:	a38b      	add	r3, pc, #556	; (adr r3, 80081b0 <atan+0x280>)
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	f7f8 f8f0 	bl	800016c <__adddf3>
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	4ba5      	ldr	r3, [pc, #660]	; (8008224 <atan+0x2f4>)
 8007f90:	f7f8 fd32 	bl	80009f8 <__aeabi_dcmpgt>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d1e9      	bne.n	8007f6c <atan+0x3c>
 8007f98:	f04f 3aff 	mov.w	sl, #4294967295
 8007f9c:	e027      	b.n	8007fee <atan+0xbe>
 8007f9e:	f000 f951 	bl	8008244 <fabs>
 8007fa2:	4ba1      	ldr	r3, [pc, #644]	; (8008228 <atan+0x2f8>)
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	429e      	cmp	r6, r3
 8007fa8:	460d      	mov	r5, r1
 8007faa:	f300 80b8 	bgt.w	800811e <atan+0x1ee>
 8007fae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007fb2:	429e      	cmp	r6, r3
 8007fb4:	f300 809c 	bgt.w	80080f0 <atan+0x1c0>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	460b      	mov	r3, r1
 8007fbc:	f7f8 f8d6 	bl	800016c <__adddf3>
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	4b98      	ldr	r3, [pc, #608]	; (8008224 <atan+0x2f4>)
 8007fc4:	f7f8 f8d0 	bl	8000168 <__aeabi_dsub>
 8007fc8:	2200      	movs	r2, #0
 8007fca:	4606      	mov	r6, r0
 8007fcc:	460f      	mov	r7, r1
 8007fce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	f7f8 f8c9 	bl	800016c <__adddf3>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4630      	mov	r0, r6
 8007fe0:	4639      	mov	r1, r7
 8007fe2:	f7f8 fba3 	bl	800072c <__aeabi_ddiv>
 8007fe6:	f04f 0a00 	mov.w	sl, #0
 8007fea:	4604      	mov	r4, r0
 8007fec:	460d      	mov	r5, r1
 8007fee:	4622      	mov	r2, r4
 8007ff0:	462b      	mov	r3, r5
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	f7f8 fa6f 	bl	80004d8 <__aeabi_dmul>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4680      	mov	r8, r0
 8008000:	4689      	mov	r9, r1
 8008002:	f7f8 fa69 	bl	80004d8 <__aeabi_dmul>
 8008006:	a36c      	add	r3, pc, #432	; (adr r3, 80081b8 <atan+0x288>)
 8008008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800c:	4606      	mov	r6, r0
 800800e:	460f      	mov	r7, r1
 8008010:	f7f8 fa62 	bl	80004d8 <__aeabi_dmul>
 8008014:	a36a      	add	r3, pc, #424	; (adr r3, 80081c0 <atan+0x290>)
 8008016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801a:	f7f8 f8a7 	bl	800016c <__adddf3>
 800801e:	4632      	mov	r2, r6
 8008020:	463b      	mov	r3, r7
 8008022:	f7f8 fa59 	bl	80004d8 <__aeabi_dmul>
 8008026:	a368      	add	r3, pc, #416	; (adr r3, 80081c8 <atan+0x298>)
 8008028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802c:	f7f8 f89e 	bl	800016c <__adddf3>
 8008030:	4632      	mov	r2, r6
 8008032:	463b      	mov	r3, r7
 8008034:	f7f8 fa50 	bl	80004d8 <__aeabi_dmul>
 8008038:	a365      	add	r3, pc, #404	; (adr r3, 80081d0 <atan+0x2a0>)
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	f7f8 f895 	bl	800016c <__adddf3>
 8008042:	4632      	mov	r2, r6
 8008044:	463b      	mov	r3, r7
 8008046:	f7f8 fa47 	bl	80004d8 <__aeabi_dmul>
 800804a:	a363      	add	r3, pc, #396	; (adr r3, 80081d8 <atan+0x2a8>)
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	f7f8 f88c 	bl	800016c <__adddf3>
 8008054:	4632      	mov	r2, r6
 8008056:	463b      	mov	r3, r7
 8008058:	f7f8 fa3e 	bl	80004d8 <__aeabi_dmul>
 800805c:	a360      	add	r3, pc, #384	; (adr r3, 80081e0 <atan+0x2b0>)
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	f7f8 f883 	bl	800016c <__adddf3>
 8008066:	4642      	mov	r2, r8
 8008068:	464b      	mov	r3, r9
 800806a:	f7f8 fa35 	bl	80004d8 <__aeabi_dmul>
 800806e:	a35e      	add	r3, pc, #376	; (adr r3, 80081e8 <atan+0x2b8>)
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	4680      	mov	r8, r0
 8008076:	4689      	mov	r9, r1
 8008078:	4630      	mov	r0, r6
 800807a:	4639      	mov	r1, r7
 800807c:	f7f8 fa2c 	bl	80004d8 <__aeabi_dmul>
 8008080:	a35b      	add	r3, pc, #364	; (adr r3, 80081f0 <atan+0x2c0>)
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	f7f8 f86f 	bl	8000168 <__aeabi_dsub>
 800808a:	4632      	mov	r2, r6
 800808c:	463b      	mov	r3, r7
 800808e:	f7f8 fa23 	bl	80004d8 <__aeabi_dmul>
 8008092:	a359      	add	r3, pc, #356	; (adr r3, 80081f8 <atan+0x2c8>)
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	f7f8 f866 	bl	8000168 <__aeabi_dsub>
 800809c:	4632      	mov	r2, r6
 800809e:	463b      	mov	r3, r7
 80080a0:	f7f8 fa1a 	bl	80004d8 <__aeabi_dmul>
 80080a4:	a356      	add	r3, pc, #344	; (adr r3, 8008200 <atan+0x2d0>)
 80080a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080aa:	f7f8 f85d 	bl	8000168 <__aeabi_dsub>
 80080ae:	4632      	mov	r2, r6
 80080b0:	463b      	mov	r3, r7
 80080b2:	f7f8 fa11 	bl	80004d8 <__aeabi_dmul>
 80080b6:	a354      	add	r3, pc, #336	; (adr r3, 8008208 <atan+0x2d8>)
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	f7f8 f854 	bl	8000168 <__aeabi_dsub>
 80080c0:	4632      	mov	r2, r6
 80080c2:	463b      	mov	r3, r7
 80080c4:	f7f8 fa08 	bl	80004d8 <__aeabi_dmul>
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	4640      	mov	r0, r8
 80080ce:	4649      	mov	r1, r9
 80080d0:	f7f8 f84c 	bl	800016c <__adddf3>
 80080d4:	4622      	mov	r2, r4
 80080d6:	462b      	mov	r3, r5
 80080d8:	f7f8 f9fe 	bl	80004d8 <__aeabi_dmul>
 80080dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	d144      	bne.n	8008170 <atan+0x240>
 80080e6:	4620      	mov	r0, r4
 80080e8:	4629      	mov	r1, r5
 80080ea:	f7f8 f83d 	bl	8000168 <__aeabi_dsub>
 80080ee:	e734      	b.n	8007f5a <atan+0x2a>
 80080f0:	2200      	movs	r2, #0
 80080f2:	4b4c      	ldr	r3, [pc, #304]	; (8008224 <atan+0x2f4>)
 80080f4:	f7f8 f838 	bl	8000168 <__aeabi_dsub>
 80080f8:	2200      	movs	r2, #0
 80080fa:	4606      	mov	r6, r0
 80080fc:	460f      	mov	r7, r1
 80080fe:	4620      	mov	r0, r4
 8008100:	4629      	mov	r1, r5
 8008102:	4b48      	ldr	r3, [pc, #288]	; (8008224 <atan+0x2f4>)
 8008104:	f7f8 f832 	bl	800016c <__adddf3>
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4630      	mov	r0, r6
 800810e:	4639      	mov	r1, r7
 8008110:	f7f8 fb0c 	bl	800072c <__aeabi_ddiv>
 8008114:	f04f 0a01 	mov.w	sl, #1
 8008118:	4604      	mov	r4, r0
 800811a:	460d      	mov	r5, r1
 800811c:	e767      	b.n	8007fee <atan+0xbe>
 800811e:	4b43      	ldr	r3, [pc, #268]	; (800822c <atan+0x2fc>)
 8008120:	429e      	cmp	r6, r3
 8008122:	da1a      	bge.n	800815a <atan+0x22a>
 8008124:	2200      	movs	r2, #0
 8008126:	4b42      	ldr	r3, [pc, #264]	; (8008230 <atan+0x300>)
 8008128:	f7f8 f81e 	bl	8000168 <__aeabi_dsub>
 800812c:	2200      	movs	r2, #0
 800812e:	4606      	mov	r6, r0
 8008130:	460f      	mov	r7, r1
 8008132:	4620      	mov	r0, r4
 8008134:	4629      	mov	r1, r5
 8008136:	4b3e      	ldr	r3, [pc, #248]	; (8008230 <atan+0x300>)
 8008138:	f7f8 f9ce 	bl	80004d8 <__aeabi_dmul>
 800813c:	2200      	movs	r2, #0
 800813e:	4b39      	ldr	r3, [pc, #228]	; (8008224 <atan+0x2f4>)
 8008140:	f7f8 f814 	bl	800016c <__adddf3>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4630      	mov	r0, r6
 800814a:	4639      	mov	r1, r7
 800814c:	f7f8 faee 	bl	800072c <__aeabi_ddiv>
 8008150:	f04f 0a02 	mov.w	sl, #2
 8008154:	4604      	mov	r4, r0
 8008156:	460d      	mov	r5, r1
 8008158:	e749      	b.n	8007fee <atan+0xbe>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	2000      	movs	r0, #0
 8008160:	4934      	ldr	r1, [pc, #208]	; (8008234 <atan+0x304>)
 8008162:	f7f8 fae3 	bl	800072c <__aeabi_ddiv>
 8008166:	f04f 0a03 	mov.w	sl, #3
 800816a:	4604      	mov	r4, r0
 800816c:	460d      	mov	r5, r1
 800816e:	e73e      	b.n	8007fee <atan+0xbe>
 8008170:	4b31      	ldr	r3, [pc, #196]	; (8008238 <atan+0x308>)
 8008172:	4e32      	ldr	r6, [pc, #200]	; (800823c <atan+0x30c>)
 8008174:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008178:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800817c:	e9da 2300 	ldrd	r2, r3, [sl]
 8008180:	f7f7 fff2 	bl	8000168 <__aeabi_dsub>
 8008184:	4622      	mov	r2, r4
 8008186:	462b      	mov	r3, r5
 8008188:	f7f7 ffee 	bl	8000168 <__aeabi_dsub>
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008194:	f7f7 ffe8 	bl	8000168 <__aeabi_dsub>
 8008198:	f1bb 0f00 	cmp.w	fp, #0
 800819c:	4604      	mov	r4, r0
 800819e:	460d      	mov	r5, r1
 80081a0:	f6bf aee4 	bge.w	8007f6c <atan+0x3c>
 80081a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081a8:	461d      	mov	r5, r3
 80081aa:	e6df      	b.n	8007f6c <atan+0x3c>
 80081ac:	4d24      	ldr	r5, [pc, #144]	; (8008240 <atan+0x310>)
 80081ae:	e6dd      	b.n	8007f6c <atan+0x3c>
 80081b0:	8800759c 	.word	0x8800759c
 80081b4:	7e37e43c 	.word	0x7e37e43c
 80081b8:	e322da11 	.word	0xe322da11
 80081bc:	3f90ad3a 	.word	0x3f90ad3a
 80081c0:	24760deb 	.word	0x24760deb
 80081c4:	3fa97b4b 	.word	0x3fa97b4b
 80081c8:	a0d03d51 	.word	0xa0d03d51
 80081cc:	3fb10d66 	.word	0x3fb10d66
 80081d0:	c54c206e 	.word	0xc54c206e
 80081d4:	3fb745cd 	.word	0x3fb745cd
 80081d8:	920083ff 	.word	0x920083ff
 80081dc:	3fc24924 	.word	0x3fc24924
 80081e0:	5555550d 	.word	0x5555550d
 80081e4:	3fd55555 	.word	0x3fd55555
 80081e8:	2c6a6c2f 	.word	0x2c6a6c2f
 80081ec:	bfa2b444 	.word	0xbfa2b444
 80081f0:	52defd9a 	.word	0x52defd9a
 80081f4:	3fadde2d 	.word	0x3fadde2d
 80081f8:	af749a6d 	.word	0xaf749a6d
 80081fc:	3fb3b0f2 	.word	0x3fb3b0f2
 8008200:	fe231671 	.word	0xfe231671
 8008204:	3fbc71c6 	.word	0x3fbc71c6
 8008208:	9998ebc4 	.word	0x9998ebc4
 800820c:	3fc99999 	.word	0x3fc99999
 8008210:	440fffff 	.word	0x440fffff
 8008214:	7ff00000 	.word	0x7ff00000
 8008218:	54442d18 	.word	0x54442d18
 800821c:	bff921fb 	.word	0xbff921fb
 8008220:	3fdbffff 	.word	0x3fdbffff
 8008224:	3ff00000 	.word	0x3ff00000
 8008228:	3ff2ffff 	.word	0x3ff2ffff
 800822c:	40038000 	.word	0x40038000
 8008230:	3ff80000 	.word	0x3ff80000
 8008234:	bff00000 	.word	0xbff00000
 8008238:	080086d0 	.word	0x080086d0
 800823c:	080086b0 	.word	0x080086b0
 8008240:	3ff921fb 	.word	0x3ff921fb

08008244 <fabs>:
 8008244:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008248:	4770      	bx	lr
	...

0800824c <_init>:
 800824c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824e:	bf00      	nop
 8008250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008252:	bc08      	pop	{r3}
 8008254:	469e      	mov	lr, r3
 8008256:	4770      	bx	lr

08008258 <_fini>:
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	bf00      	nop
 800825c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825e:	bc08      	pop	{r3}
 8008260:	469e      	mov	lr, r3
 8008262:	4770      	bx	lr
